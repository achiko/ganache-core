{"version":3,"sources":["webpack://Ganache/webpack/universalModuleDefinition","webpack://Ganache/webpack/bootstrap","webpack://Ganache/./lib/utils/to.js","webpack://Ganache/external \"ethereumjs-util\"","webpack://Ganache/external \"util\"","webpack://Ganache/external \"async\"","webpack://Ganache/external \"web3-provider-engine/subproviders/subprovider.js\"","webpack://Ganache/./lib/utils/runtimeerror.js","webpack://Ganache/external \"ethereumjs-common\"","webpack://Ganache/external \"lodash\"","webpack://Ganache/external \"source-map-support/register\"","webpack://Ganache/external \"ethereumjs-account\"","webpack://Ganache/./lib/utils/transaction.js","webpack://Ganache/external \"ethereumjs-tx\"","webpack://Ganache/external \"ethereumjs-block\"","webpack://Ganache/./lib/utils/log.js","webpack://Ganache/./lib/utils/receipt.js","webpack://Ganache/external \"level-sublevel\"","webpack://Ganache/./lib/utils/errorhelper.js","webpack://Ganache/external \"events\"","webpack://Ganache/./node_modules/web3/src/index.js","webpack://Ganache/external \"web3-core\"","webpack://Ganache/external \"underscore\"","webpack://Ganache/external \"web3-utils\"","webpack://Ganache/./lib/provider.js","webpack://Ganache/./node_modules/ethereumjs-wallet/index.js","webpack://Ganache/external \"crypto\"","webpack://Ganache/./lib/blockchain_double.js","webpack://Ganache/external \"merkle-patricia-tree\"","webpack://Ganache/external \"fs\"","webpack://Ganache/./lib/database/txserializer.js","webpack://Ganache/external \"web3-core-helpers\"","webpack://Ganache/external \"web3-core-method\"","webpack://Ganache/external \"web3-net\"","webpack://Ganache/external \"web3-eth-personal\"","webpack://Ganache/./lib/utils/txrejectederror.js","webpack://Ganache/./lib/utils/block_helper.js","webpack://Ganache/./public-exports.js","webpack://Ganache/external \"web3-provider-engine\"","webpack://Ganache/external \"web3-provider-engine/subproviders/subscriptions\"","webpack://Ganache/./lib/subproviders/requestfunnel.js","webpack://Ganache/./lib/subproviders/delayedblockfilter.js","webpack://Ganache/./lib/subproviders/gethdefaults.js","webpack://Ganache/./lib/subproviders/geth_api_double.js","webpack://Ganache/./lib/statemanager.js","webpack://Ganache/external \"ethereumjs-abi\"","webpack://Ganache/external \"assert\"","webpack://Ganache/external \"seedrandom\"","webpack://Ganache/external \"bip39\"","webpack://Ganache/external \"safe-buffer\"","webpack://Ganache/external \"randombytes\"","webpack://Ganache/external \"scrypt.js\"","webpack://Ganache/external \"uuid/v4\"","webpack://Ganache/external \"bs58check\"","webpack://Ganache/./node_modules/ethereumjs-wallet/hdkey.js","webpack://Ganache/external \"hdkey\"","webpack://Ganache/external \"ethereumjs-vm\"","webpack://Ganache/external \"heap\"","webpack://Ganache/./lib/database.js","webpack://Ganache/./lib/database/leveluparrayadapter.js","webpack://Ganache/./lib/database/levelupobjectadapter.js","webpack://Ganache/external \"levelup\"","webpack://Ganache/external \"encoding-down\"","webpack://Ganache/./lib/database/filedown.js","webpack://Ganache/external \"abstract-leveldown\"","webpack://Ganache/external \"path\"","webpack://Ganache/external \"cachedown\"","webpack://Ganache/./lib/database/blockserializer.js","webpack://Ganache/./lib/database/bufferserializer.js","webpack://Ganache/./lib/database/blocklogsserializer.js","webpack://Ganache/./lib/database/receiptserializer.js","webpack://Ganache/external \"tmp\"","webpack://Ganache/./lib/utils/gas/estimateGas.js","webpack://Ganache/./lib/utils/gas/guestimation.js","webpack://Ganache/./lib/utils/gas/binSearch.js","webpack://Ganache/./lib/utils/forkedblockchain.js","webpack://Ganache/./lib/utils/forkedstoragetrie.js","webpack://Ganache/external \"merkle-patricia-tree/baseTrie\"","webpack://Ganache/external \"merkle-patricia-tree/checkpoint-interface\"","webpack://Ganache/./node_modules/web3-eth/src/index.js","webpack://Ganache/external \"web3-core-subscriptions\"","webpack://Ganache/external \"web3-eth-ens\"","webpack://Ganache/external \"web3-eth-contract\"","webpack://Ganache/external \"web3-eth-iban\"","webpack://Ganache/./node_modules/web3-eth-accounts/src/index.js","webpack://Ganache/external \"any-promise\"","webpack://Ganache/external \"eth-lib/lib/account\"","webpack://Ganache/external \"eth-lib/lib/hash\"","webpack://Ganache/external \"eth-lib/lib/rlp\"","webpack://Ganache/external \"eth-lib/lib/bytes\"","webpack://Ganache/external \"crypto-browserify\"","webpack://Ganache/external \"@web3-js/scrypt-shim\"","webpack://Ganache/external \"uuid\"","webpack://Ganache/external \"web3-eth-abi\"","webpack://Ganache/./node_modules/web3-eth/src/getNetworkType.js","webpack://Ganache/external \"web3-shh\"","webpack://Ganache/external \"web3-bzz\"","webpack://Ganache/external \"eth-sig-util\"","webpack://Ganache/./lib/utils/random.js","webpack://Ganache/./lib/block_tracker.js","webpack://Ganache/./lib/server.js","webpack://Ganache/./lib/webSocketServer.js","webpack://Ganache/external \"websocket\"","webpack://Ganache/./lib/httpServer.js","webpack://Ganache/external \"http\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","utils","buffer","val","data","indexOf","slice","length","Buffer","from","isBuffer","hex","trim","BN","intToHex","toString","addHexPrefix","_rpcQuantityHexString","this","replace","rpcQuantityHexString","rpcDataHexString","Array","fill","join","nullableRpcDataHexString","rpcDataHex","nullableRpcQuantityHexString","rpcQuantityHex","hexWithZeroPadding","digits","number","parseInt","bufVal","toBuffer","bufferToInt","rpcError","id","code","msg","JSON","stringify","jsonrpc","error","message","require","inherits","to","abi","RuntimeError","transactions","vmOutput","Error","captureStackTrace","constructor","results","hashes","combine","err","keys","push","apply","tx","result","execResult","exceptionError","reason","hash","returnData","returnValue","rawDecode","program_counter","runState","programCounter","return","exceptionResult","count","fromResults","EthereumJsTransaction","Transaction","EthereumJsFakeTransaction","FakeTransaction","Common","default","ethUtil","assert","rlp","sign","fakeHash","_hash","arguments","BUFFER_ZERO","fixProps","_originals","forEach","fieldName","fieldLength","index","_fields","descriptor","getOwnPropertyDescriptor","set","v","configZeroableField","isFake","configurable","getSenderAddress","_from","[object Object]","type","types","none","common","chainId","forCustomChain","networkId","comment","bootstrapNodes","super","undefined","ganacheTxCommon","decode","self","isArray","field","_chainId","raw","initData","signed","fake","json","hardfork","toAccount","buf","equals","setLengthLeft","input","options","nonce","gasLimit","gas","gasPrice","Math","floor","_type","_options","expectedNonce","isSigned","block","transactionIndex","txns","blockHash","blockNumber","header","Log","toJSON","logIndex","transactionHash","address","topics","Receipt","logs","gasUsed","cumulativeGasUsed","contractAddress","status","logsBloom","txHash","map","log","LevelUpOutOfRangeError","len","BlockOutOfRangeError","version","core","Eth","Net","Personal","Shh","Bzz","Web3","_this","packageInit","eth","shh","bzz","setProvider","provider","net","addProviders","ProviderEngine","SubscriptionSubprovider","RequestFunnel","DelayedBlockFilter","GethDefaults","GethApiDouble","BlockTracker","EventEmitter","_","Provider","_applyDefaultOptions","gethApiDouble","engine","blockTracker","blockchain","state","subscriptionSubprovider","manager","addProvider","setMaxListeners","start","sendAsync","send","close","_queueRequest","_processRequestQueue","on","notification","emit","defaultOptions","vmErrorsOnRPCResponse","verbose","asyncRequestProcessing","logger","merge","payload","callback","externalize","cloneDeep","intermediary","response","reportErrorInResponse","split","process","nextTick","stopMining","stop","_requestQueue","setImmediate","_requestInProgress","args","shift","cleanUpErrorObject","errorObject","stack","transactionMethods","_isTransactionRequest","request","method","_typeof","iterator","obj","crypto","randomBytes","scryptsy","uuidv4","bs58check","decipherBuffer","decipher","concat","update","final","Wallet","priv","pub","isValidPrivate","isValidPublic","_privKey","_pubKey","privateToPublic","privKey","generate","icapDirect","max","privateToAddress","lte","generateVanityAddress","pattern","RegExp","test","getPrivateKey","getPrivateKeyString","bufferToHex","getPublicKey","pubKey","getPublicKeyString","getAddress","publicToAddress","getAddressString","getChecksumAddressString","toChecksumAddress","toV3","password","opts","derivedKey","salt","iv","kdf","kdfparams","dklen","prf","pbkdf2Sync","cipher","createCipheriv","ciphertext","mac","keccak256","random","uuid","cipherparams","getV3Filename","timestamp","Date","toV3String","fromPublicKey","nonStrict","importPublic","fromExtendedPublicKey","fromPrivateKey","fromExtendedPrivateKey","tmp","fromV1","parse","Version","Crypto","KeyHeader","Kdf","KdfParams","Salt","N","R","P","DkLen","CipherText","MAC","seed","createDecipheriv","IV","fromV3","toLowerCase","fromEthSale","encseed","wallet","ethaddr","Account","Block","VM","Trie","async","Heap","Database","estimateGas","promisify","BlockchainDouble","console","trie","db_path","pending_transactions","blockGasLimit","defaultTransactionGasLimit","timeAdjustment","blockNumberAdjustment","time","debug","allowUnlimitedContractSize","assign","initialize","accounts","latestBlock","stateRoot","stateTrie","createStateTrie","trie_db","vm","createVMFromStateTrie","setTime","createGenesisBlock","stateManager","checkpoint","eachSeries","accountData","finished","putAccount","account","commit","putBlock","activatePrecompiles","network_id","forkVersion","getBlock","done","e","info","opcode","argsNum","in","arg","db","createBlock","blocks","last","getEffectiveBlockNumber","getHeight","blockHashes","blockIndex","first","receipts","requests","blockLogs","transactionReceipts","parallel","popBlock","del","pop","series","newLastBlock","setStateRoot","_storageTries","clearPendingTransactions","parent","emulateParent","getParent","parentHash","parentNumber","currentTime","getQueuedNonce","addressBuffer","pendingNonce","gt","iaddn","toArrayLike","queueTransaction","sortByPriceAndNonce","sortedByNonce","arr","nonceSort","a","b","sort","heap","sortedTransactions","size","best","getReadyCall","readyCall","parentBlock","newBlock","runArgs","skipBalance","skipNonce","processCall","runTx","catch","vmerr","processBlock","runBlock","skipBlockValidation","totalBlockGasUsage","txTrie","rcptTrie","promises","putInTrie","put","receipt","txLogs","receiptLog","j","rcpt","createdAddress","bitvector","rawReceipt","rcptBuffer","encode","serialize","Promise","all","transactionsTrie","receiptTrie","processNextBlock","currentTransactions","totalGasLimit","maxGasLimit","processTransactionTrace","params","targetHash","txHashCurrentlyProcessing","txCurrentlyProcessing","storageStack","currentDepth","returnVal","structLogs","stepListener","event","next","gasLeft","gasUsedThisStep","memory","disableMemory","match","lastItem","disableStack","item","structLog","depth","gasCost","op","pc","storage","disableStorage","processStorageTrace","getTransactionReceipt","targetBlock","forkBlockNumber","beforeTxListener","afterTxListener","removeListeners","removeListener","_cache","flush","cb","stackLength","getContractStorage","getAccount","currentStateRoot","getNonce","getBalance","balance","getStorage","position","getCode","getTransaction","notFound","pendingTxs","getBlockLogs","effective","getTime","increaseTime","seconds","date","now","setBlockNumber","that","maybeBlock","sigV","commonOptions","fromJSON","TXRejectedError","includeFullTransactions","mixHash","sha3Uncles","uncleHash","bloom","transactionsRoot","receiptsRoot","miner","coinbase","difficulty","totalDifficulty","extraData","toJsonRpc","uncles","Server","server","_webpacked","Subprovider","methods","eth_call","eth_getStorageAt","eth_sendTransaction","eth_sendRawTransaction","eth_newBlockFilter","eth_getFilterChanges","eth_getFilterLogs","queue","isWorking","handleRequest","end","external","processNext","watching","handleNewBlockFilter","handleGetFilterChanges","filterId","currentBlockHash","previousBlockHash","emitPayload","res","StateManager","blockHelper","pkg","maxSafeInt","Number","MAX_SAFE_INTEGER","initialized","initialization_error","post_initialization_callbacks","callbacks","waitForInitialization","addedBlockParam","requiresDefaultBlockParameter","minLength","errorMessage","getDelayedHandler","eth_getBalance","eth_getCode","eth_getTransactionCount","eth_estimateGas","eth_accounts","eth_blockNumber","eth_chainId","eth_coinbase","eth_mining","is_mining","eth_hashrate","eth_gasPrice","eth_getBlockByNumber","eth_getBlockByHash","eth_getBlockTransactionCountByNumber","eth_getBlockTransactionCountByHash","eth_getTransactionReceipt","eth_getTransactionByHash","eth_getTransactionByBlockHashAndIndex","hashOrNumber","eth_getTransactionByBlockNumberAndIndex","getTransactionCount","eth_sign","dataToSign","eth_signTypedData","typedDataToSign","signTypedData","txData","rawTx","queueRawTransaction","_setCallGasLimit","globalCallGasLimit","callGasLimit","queueStorage","latestFilterId","mine","eth_getLogs","filter","getLogs","eth_uninstallFilter","eth_protocolVersion","bzz_hive","bzz_info","shh_version","eth_getCompilers","eth_syncing","net_listening","net_peerCount","web3_clientVersion","web3_sha3","string","net_version","miner_start","threads","startMining","miner_stop","rpc_modules","rpc","web3","evm","personal","personal_listAccounts","personal_accounts","personal_newAccount","createAccount","account_passwords","personal_importRawKey","rawKey","secretKey","personal_lockAccount","unlocked_accounts","personal_unlockAccount","duration","storedPassword","personal_sendTransaction","ret","evm_snapshot","snapshot","evm_revert","snapshotId","revert","evm_increaseTime","evm_setTime","evm_mineBlockNumber","evm_mine","debug_traceTransaction","queueTransactionTrace","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_getUncleByBlockHashAndIndex","eth_getUncleByBlockNumberAndIndex","uncleIndex","eth_getWork","eth_submitWork","powHash","digest","eth_submitHashrate","hashRate","clientID","db_putString","dbName","db_getString","db_putHex","db_getHex","shh_post","priority","ttl","shh_newIdentity","shh_hasIdentity","shh_newGroup","shh_addToGroup","shh_newFilter","shh_uninstallFilter","shh_getFilterChanges","shh_getMessages","seedrandom","bip39","hdkey","ForkedBlockchain","fs","sigUtil","ZERO_BUFFER","fork","secure","total_accounts","latest_filter_id","action_queue","action_processing","snapshots","mnemonic","fromMasterSeed","mnemonicToSeed","wallet_hdpath","hdPath","gasPriceVal","blockTime","is_mining_on_interval","mining_interval_timeout","_provider","default_balance_ether","randomAlphaNumericString","entropyToMnemonic","defaultBalanceWei","toWei","reduce","idx","account_keys_path","fileData","addresses","private_keys","writeFileSync","mineOnInterval","_minerCancellationToken","clearTimeout","cancelled","cancellationToken","timeout","setTimeout","unref","derivePath","getWallet","publicKey","_queueTransaction","processNextAction","txJsonRpc","isKnownAccount","_setTransactionDefaults","isTransaction","allocUnsafe","override","queued","processTransaction","processGasEstimate","msgHash","hashPersonalMessage","sgn","ecsign","toRpcSig","EIP712Domain","domain","primaryType","signTypedData_v4","printTransactionReceipt","runtimeError","finishedPrinting","processBlocks","totalBlocks","amountProcessed","whilst","createTransactionWithCorrectNonce","gasEstimate","expectedAddress","expectedTopics","fromBlock","toBlock","current","filtered","keep","expectedTopic","logTopic","isMatch","includes","nextSnapshot","during","doneWithTest","nextBlock","hasContractCode","getContractCode","isUnlocked","validateNonce","resolve","expected","actual","reject","then","HDKey","EthereumHDKey","fromHDKey","_hdkey","seedBuffer","fromExtendedKey","base58key","privateExtendedKey","publicExtendedKey","path","derive","deriveChild","_privateKey","_publicKey","LevelUpArrayAdapter","LevelUpObjectAdapter","levelup","filedown","cachedown","txserializer","blockserializer","bufferserializer","BlockLogsSerializer","ReceiptSerializer","directory","finishInitializing","levelupOptions","valueEncoding","store","maxSize","dir","Sublevel","serializer","sublevel","_get","_put","encoded","RangeError","newLength","valueserializer","keyserializer","encodedKey","decodedValue","batch","array","each","isOpen","util","AbstractLevelDOWN","FileDown","location","_open","writeFile","readFile","_del","unlink","_batch","txJson","database","binSearch","generateVM","bn","STIPEND","check","opname","has","isCall","Set","isCallOrCallcode","isCreate","isTerminator","steps","stepTracker","collect","Context","fee","base","cost","sixtyFloorths","ops","intermediateCost","sub","callingFee","compositeContext","addGas","gtn","gte","isub","iadd","setStart","setStop","getCost","transfer","ctx","values","addSixtyFloorth","sixtyFloorth","addRange","add","finalizeRange","range","isZero","innerCost","divn","estimate","actualUsed","sysops","systemOps","opIndex","cursor","context","currentIndex","isPrecompile","getTotal","sysOps","allOps","preCompile","preCompileCheck","precompileCallDepth","clone","MAX","hexToBn","gasRefund","startingGas","lo","hi","isEnoughGas","muln","addn","lt","mid","ForkedStorageTrie","httpReg","protocolReg","validProtocolReg","fork_block_number","providers","HttpProvider","WebsocketProvider","storageTrieCache","patchVM","getId","_trie","lookupAccount","getLookupAccount","_lookupAccount","_lookupStorageTrie","getLookupStorageTrie","storageTrie","copy","isFallbackBlock","isBlockHash","byteLength","isFallbackBlockHash","getFallbackBlock","numberOrHash","real","checkFn","isFallback","getRelativeBlockNumber","keyExists","exists","keyIsDeleted","deleted","fetchCodeFromFallback","fetchAccountFromFallback","acc","receiptJson","fetchBalanceFromFallback","fetchNonceFromFallback","setCode","getSafeFallbackBlockNumber","safeBlockNumber","toBN","relative","currentProvider","MerklePatriciaTree","BaseTrie","checkpointInterface","ForkedStorageBaseTrie","_deleted","getStorageAt","findPath","node","remainder","rpcKey","originalDelete","prove","verifyProof","helpers","Subscriptions","subscriptions","Method","ENS","BaseContract","Iban","Accounts","getNetworkType","formatter","formatters","blockCall","isString","transactionFromBlockCall","uncleCall","getBlockTransactionCountCall","uncleCountCall","Contract","defaultChain","defaultHardfork","defaultCommon","defaultAccount","defaultBlock","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","inputAddressFormatter","clearSubscriptions","_requestManager","ens","outputFormatter","hexToNumber","outputSyncingFormatter","outputBigNumberFormatter","inputFormatter","inputDefaultBlockNumberFormatter","numberToHex","inputBlockNumberFormatter","outputBlockFormatter","outputTransactionFormatter","outputTransactionReceiptFormatter","inputTransactionFormatter","inputSignFormatter","transformPayload","reverse","inputCallFormatter","inputLogFormatter","outputLogFormatter","newBlockHeaders","subscriptionName","pendingTransactions","subscriptionHandler","output","removed","isFunction","syncing","_isSyncing","_isSyncingTimeout","currentBlock","highestBlock","attachToObject","setRequestManager","Hash","RLP","Bytes","cryp","scrypt","isNot","isUndefined","isNull","BatchRequest","extend","_ethereumCall","isAddress","_accounts","defaultKeyName","_addAccountFunctions","signTransaction","privateKey","encrypt","entropy","randomHex","privateKeyToAccount","fromPrivate","transactionOptions","hasTxSigningOptions","chain","transaction","baseChain","customChain","startsWith","substring","ethTx","validationResult","validate","rawTransaction","messageHash","getChainId","getGasPrice","getNetworkId","recoverTransaction","signature","encodeSignature","recovery","toNumber","fromNumber","signingData","signingDataHex","recover","hashMessage","isHexStrict","hexToBytes","messageBuffer","preamble","preambleBuffer","ethMessage","keccak256s","vrs","decodeSignature","preFixed","isObject","isBoolean","decrypt","v3Keystore","sha3","v4","_findSafeIndex","pointer","_currentIndexes","numberOfAccounts","remove","addressOrIndex","clear","encryptedWallet","keystore","save","keyName","localStorage","setItem","load","getItem","window","x","removeItem","storageAvailable","givenId","genesis","rng","alphabet","text","charAt","GanacheBlockTracker","_blockchain","getTrackingBlock","awaitCurrentBlock","_setCurrentBlock","_currentBlock","getCurrentBlock","once","_isRunning","oldBlock","webSocketServer","httpServer","keepAliveTimeout","connectionCounter","connections","conn","oldListen","listen","ws","oldClose","destroy","websocket","WebSocketServer","ConnectionManager","connectionsBySubscriptionId","_updateSubscriptions","manageConnection","_logPayload","_handleRequest","connectionManager","wsServer","autoAcceptConnections","connection","utf8Data","binaryData","CLOSE_REASON_UNPROCESSABLE_INPUT","subscriptionId","subscription","http","sendResponse","statusCode","headers","writeHead","createServer","body","chunk","requestHeaders","origin","createCORSResponseHeaders","ganacheProvider"],"mappings":"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","file":"ganache.core.node.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Ganache\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Ganache\"] = factory();\n\telse\n\t\troot[\"Ganache\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 35);\n","let utils = require(\"ethereumjs-util\");\n\nmodule.exports = {\n  buffer: function(val) {\n    let data;\n    if (typeof val === \"string\") {\n      // strings need to be treated as hex, so we have to prep them:\n      data = val.indexOf(\"0x\") === 0 ? val.slice(2) : val;\n      data = data.length % 2 === 1 ? `0${data}` : data;\n      data = Buffer.from(data, \"hex\");\n    } else if (Buffer.isBuffer(val)) {\n      // no need to copy the Buffer to a new Buffer, so we just use the Buffer\n      // exactly as it was given to us:\n      data = val;\n    } else {\n      // all other types get the Buffer treatment and built-in type checking:\n      data = Buffer.from(val);\n    }\n    return data;\n  },\n  // Note: Do not use to.hex() when you really mean utils.addHexPrefix().\n  hex: function(val) {\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") === 0) {\n        return val.trim();\n      } else {\n        val = new utils.BN(val);\n      }\n    }\n\n    if (typeof val === \"boolean\") {\n      val = val ? 1 : 0;\n    }\n\n    if (typeof val === \"number\") {\n      val = utils.intToHex(val);\n    } else if (val == null) {\n      return \"0x\";\n    } else if (typeof val === \"object\") {\n      // Support Buffer, BigInteger and BN library\n      // Hint: BN is used in ethereumjs\n      val = val.toString(\"hex\");\n    }\n\n    return utils.addHexPrefix(val);\n  },\n\n  _rpcQuantityHexString: function(val) {\n    val = this.hex(val);\n    // remove all zeroes leading zeros, `0+`, from the hex-encoded value\n    // This doesn't remove the last 0 which would be captured by `(.+?)`\n    val = val.replace(/^(?:0x)(?:0+(.+?))?$/, \"0x$1\");\n    return val;\n  },\n\n  rpcQuantityHexString: function(val) {\n    val = this._rpcQuantityHexString(val);\n\n    // RPC Quantities must represent `0` as `0x0`\n    if (val === \"0x\") {\n      val = \"0x0\";\n    }\n\n    return val;\n  },\n\n  rpcDataHexString: function(val, length) {\n    if (typeof length === \"number\") {\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      val = new Array(length - val.length).fill(\"0\").join(\"\") + val;\n    } else {\n      if (val.length === 0) {\n        return \"0x\";\n      }\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      if (val.length % 2 !== 0) {\n        val = \"0\" + val;\n      }\n    }\n    return \"0x\" + val;\n  },\n\n  nullableRpcDataHexString: function(val, length) {\n    if (val === null) {\n      return null;\n    } else {\n      const rpcDataHex = this.rpcDataHexString(val, length);\n      return rpcDataHex === \"0x\" ? null : rpcDataHex;\n    }\n  },\n\n  nullableRpcQuantityHexString: function(val, length) {\n    if (val === null) {\n      return null;\n    } else {\n      const rpcQuantityHex = this._rpcQuantityHexString(val, length);\n      return rpcQuantityHex === \"0x\" ? null : rpcQuantityHex;\n    }\n  },\n\n  hexWithZeroPadding: function(val) {\n    val = this.hex(val);\n    const digits = val.replace(\"0x\", \"\");\n    if (digits.length & 0x1) {\n      return \"0x0\" + digits;\n    }\n    return val;\n  },\n\n  number: function(val) {\n    if (typeof val === \"number\") {\n      return val;\n    }\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") !== 0) {\n        return parseInt(val, 10);\n      }\n    }\n    var bufVal = utils.toBuffer(val);\n    return utils.bufferToInt(bufVal);\n  },\n\n  rpcError: function(id, code, msg) {\n    return JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: id,\n      error: {\n        code: code,\n        message: msg\n      }\n    });\n  }\n};\n","module.exports = require(\"ethereumjs-util\");","module.exports = require(\"util\");","module.exports = require(\"async\");","module.exports = require(\"web3-provider-engine/subproviders/subprovider.js\");","var inherits = require(\"util\").inherits;\nvar to = require(\"./to\");\nvar abi = require(\"ethereumjs-abi\");\n\ninherits(RuntimeError, Error);\n\n// Note: ethereumjs-vm will return an object that has a \"results\" and \"receipts\" keys.\n// You should pass in the whole object.\nfunction RuntimeError(transactions, vmOutput) {\n  // Why not just Error.apply(this, [message])? See\n  // https://gist.github.com/justmoon/15511f92e5216fa2624b#anti-patterns\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n\n  this.results = {};\n  this.hashes = [];\n\n  // handles creating this.message\n  this.combine(transactions, vmOutput);\n}\n\nRuntimeError.prototype.combine = function(transactions, vmOutput) {\n  // Can be combined with vmOutput or another RuntimeError.\n  if (transactions instanceof RuntimeError) {\n    var err = transactions;\n    var keys = Object.keys(err.results);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      this.results[key] = err.results[key];\n      Array.prototype.push.apply(this.hashes, err.hashes);\n    }\n  } else {\n    var results = vmOutput.results;\n\n    for (i = 0; i < transactions.length; i++) {\n      var tx = transactions[i];\n      var result = results[i];\n\n      // 1 means no error, oddly.\n      if (result.execResult.exceptionError) {\n        var hash = to.hex(tx.hash());\n        this.hashes.push(hash);\n        var reason;\n        var returnData = result.execResult.returnValue;\n        if (returnData && returnData.slice(0, 4).toString(\"hex\") === \"08c379a0\") {\n          reason = abi.rawDecode([\"string\"], returnData.slice(4))[0];\n        }\n\n        this.results[hash] = {\n          error: result.execResult.exceptionError.error || result.execResult.exceptionError,\n          program_counter: result.execResult.runState.programCounter,\n          return: to.hex(result.execResult.returnValue),\n          reason: reason\n        };\n      }\n    }\n  }\n\n  // Once combined, set the message\n  if (this.hashes.length === 1) {\n    var exceptionResult = this.results[this.hashes[0]];\n    var message = \"VM Exception while processing transaction: \" + exceptionResult.error;\n    if (exceptionResult.reason) {\n      message += \" \" + exceptionResult.reason;\n    }\n    this.message = message;\n  } else {\n    message = \"Multiple VM Exceptions while processing transactions: \\n\\n\";\n\n    for (i = 0; i < this.hashes.length; i++) {\n      hash = this.hashes[i];\n      exceptionResult = this.results[hash];\n      message += hash + \": \" + exceptionResult.error;\n      if (exceptionResult.reason) {\n        message += \" \" + exceptionResult.reason;\n      }\n      message += \"\\n\";\n    }\n    this.message = message;\n  }\n};\n\nRuntimeError.prototype.count = function() {\n  return Object.keys(this.results).length;\n};\n\nRuntimeError.fromResults = function(transactions, vmOutput) {\n  var err = new RuntimeError(transactions, vmOutput);\n\n  if (err.count() === 0) {\n    return null;\n  }\n\n  return err;\n};\n\nmodule.exports = RuntimeError;\n","module.exports = require(\"ethereumjs-common\");","module.exports = require(\"lodash\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"ethereumjs-account\");","const EthereumJsTransaction = require(\"ethereumjs-tx\").Transaction;\nconst EthereumJsFakeTransaction = require(\"ethereumjs-tx\").FakeTransaction;\nconst Common = require(\"ethereumjs-common\").default;\nconst ethUtil = require(\"ethereumjs-util\");\nconst assert = require(\"assert\");\nconst rlp = ethUtil.rlp;\nconst to = require(\"./to\");\n\nconst sign = EthereumJsTransaction.prototype.sign;\nconst fakeHash = function() {\n  // this isn't memoization of the hash. previous versions of ganache-core\n  // created hashes in a different/incorrect way and are recorded this way\n  // in snapshot dbs. We are preserving the chain's immutability by using the\n  // stored hash instead of calculating it.\n  if (this._hash != null) {\n    return this._hash;\n  }\n  return EthereumJsFakeTransaction.prototype.hash.apply(this, arguments);\n};\nconst BUFFER_ZERO = Buffer.from([0]);\n\nfunction configZeroableField(tx, fieldName, fieldLength = 32) {\n  const index = tx._fields.indexOf(fieldName);\n  const descriptor = Object.getOwnPropertyDescriptor(tx, fieldName);\n  // eslint-disable-next-line accessor-pairs\n  Object.defineProperty(tx, fieldName, {\n    set: (v) => {\n      descriptor.set.call(tx, v);\n      v = ethUtil.toBuffer(v);\n      assert(fieldLength >= v.length, `The field ${fieldName} must not have more ${fieldLength} bytes`);\n      tx._originals[index] = v;\n    },\n    get: () => {\n      return tx._originals[index];\n    }\n  });\n}\n\n/**\n * etheruemjs-tx's Transactions don't behave quite like we need them to, so\n * we're monkey-patching them to do what we want here.\n * @param {Transaction} tx The Transaction to fix\n * @param {Object} [data] The data object\n */\nfunction fixProps(tx, data) {\n  // ethereumjs-tx doesn't allow for a `0` value in fields, but we want it to\n  // in order to differentiate between a value that isn't set and a value\n  // that is set to 0 in a fake transaction.\n  // Once https://github.com/ethereumjs/ethereumjs-tx/issues/112 is figured\n  // out we can probably remove this fix/hack.\n  // We keep track of the original value and return that value when\n  // referenced by its property name. This lets us properly encode a `0` as\n  // an empty buffer while still being able to differentiate between a `0`\n  // and `null`/`undefined`.\n  tx._originals = [];\n  const fieldNames = [\"nonce\", \"gasPrice\", \"gasLimit\", \"value\"];\n  fieldNames.forEach((fieldName) => configZeroableField(tx, fieldName, 32));\n\n  if (tx.isFake()) {\n    /**\n     * @prop {Buffer} from (read/write) Set from address to bypass transaction\n     * signing on fake transactions.\n     */\n    Object.defineProperty(tx, \"from\", {\n      enumerable: true,\n      configurable: true,\n      get: tx.getSenderAddress.bind(tx),\n      set: (val) => {\n        if (val) {\n          tx._from = ethUtil.toBuffer(val);\n        } else {\n          tx._from = null;\n        }\n      }\n    });\n\n    if (data && data.from) {\n      tx.from = data.from;\n    }\n\n    tx.hash = fakeHash;\n  }\n}\n\n/**\n * Parses the given data object and adds its properties to the given tx.\n * @param {Transaction} tx\n * @param {Object} [data]\n */\nfunction initData(tx, data) {\n  if (data) {\n    if (typeof data === \"string\") {\n      data = to.buffer(data);\n    }\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n    const self = tx;\n    if (Array.isArray(data)) {\n      if (data.length > tx._fields.length) {\n        throw new Error(\"wrong number of fields in data\");\n      }\n\n      // make sure all the items are buffers\n      data.forEach((d, i) => {\n        self[self._fields[i]] = ethUtil.toBuffer(d);\n      });\n    } else if ((typeof data === \"undefined\" ? \"undefined\" : typeof data) === \"object\") {\n      const keys = Object.keys(data);\n      tx._fields.forEach(function(field) {\n        if (keys.indexOf(field) !== -1) {\n          self[field] = data[field];\n        }\n        if (field === \"gasLimit\") {\n          if (keys.indexOf(\"gas\") !== -1) {\n            self[\"gas\"] = data[\"gas\"];\n          }\n        } else if (field === \"data\") {\n          if (keys.indexOf(\"input\") !== -1) {\n            self[\"input\"] = data[\"input\"];\n          }\n        }\n      });\n\n      // Set chainId value from the data, if it's there and the data didn't\n      // contain a `v` value with chainId in it already. If we do have a\n      // data.chainId value let's set the interval v value to it.\n      if (!tx._chainId && data && data.chainId != null) {\n        tx.raw[self._fields.indexOf(\"v\")] = tx._chainId = data.chainId || 0;\n      }\n    } else {\n      throw new Error(\"invalid data\");\n    }\n  }\n}\n\nmodule.exports = class Transaction extends EthereumJsTransaction {\n  /**\n   * @param {Object} [data] The data for this Transaction.\n   * @param {Number} type The `Transaction.types` bit flag for this transaction\n   * @param {Object} [common] EthereumJS common.fromCustomChain()\n   *  Can be a combination of `Transaction.types.none`, `Transaction.types.signed`, and `Transaction.types.fake`.\n   */\n  constructor(data, type = Transaction.types.none, common) {\n    if (data.chainId && !common) {\n      common = Common.forCustomChain(\n        \"mainnet\", // TODO needs to match chain id\n        {\n          name: \"ganache\",\n          networkId: 1,\n          chainId: data.chainId,\n          comment: \"Local test network\",\n          bootstrapNodes: []\n        },\n        \"istanbul\"\n      );\n    }\n    super(undefined, { common });\n\n    this.ganacheTxCommon = common;\n    this.type = type;\n\n    fixProps(this, data);\n    initData(this, data);\n  }\n\n  static get types() {\n    // values must be powers of 2\n    return {\n      none: 0,\n      signed: 1,\n      fake: 2\n    };\n  }\n\n  /**\n   * Prepares arbitrary JSON data for use in a Transaction.\n   * @param {Object} json JSON object representing the Transaction\n   * @param {Number} type The `Transaction.types` bit flag for this transaction\n   * @param {Object} [common] EthereumJS common.fromCustomChain()\n   * @param {Number} [networkId]\n   * @param {string} [hardfork]\n   *  Can be a combination of `Transaction.types.none`, `Transaction.types.signed`, and `Transaction.types.fake`.\n   */\n  static fromJSON(json, type, common, networkId, hardfork) {\n    let toAccount;\n    if (json.to) {\n      // Remove all padding and make it easily comparible.\n      const buf = to.buffer(json.to);\n      if (buf.equals(Buffer.from([0]))) {\n        // if the address is 0x0 make it 0x0{20}\n        toAccount = ethUtil.setLengthLeft(buf, 20);\n      } else {\n        toAccount = buf;\n      }\n    }\n    const data = json.data || json.input;\n    const options = {\n      nonce: ethUtil.toBuffer(to.hex(json.nonce)),\n      from: ethUtil.toBuffer(to.hex(json.from)),\n      value: ethUtil.toBuffer(to.hex(json.value)),\n      gasLimit: ethUtil.toBuffer(to.hex(json.gas || json.gasLimit)),\n      gasPrice: ethUtil.toBuffer(to.hex(json.gasPrice)),\n      data: data ? to.buffer(data) : null,\n      to: toAccount,\n      v: ethUtil.toBuffer(json.v),\n      r: ethUtil.toBuffer(json.r),\n      s: ethUtil.toBuffer(json.s)\n    };\n    if (!common && options.v.length > 0) {\n      const chainId = Math.floor((json.v - 35) / 2);\n      common = Common.forCustomChain(\n        \"mainnet\", // TODO needs to match chain id\n        {\n          name: \"ganache\",\n          networkId: networkId,\n          chainId: chainId >= 0 ? chainId : 1,\n          comment: \"Local test network\",\n          bootstrapNodes: []\n        },\n        hardfork\n      );\n    }\n    const tx = new Transaction(options, type, common);\n    tx._hash = json.hash ? to.buffer(json.hash) : null;\n    return tx;\n  }\n\n  /**\n   * Encodes the Transaction in order to be used in a database. Can be decoded\n   * into an identical Transaction via `Transaction.decode(encodedTx)`.\n   */\n  encode() {\n    const resultJSON = {\n      hash: to.nullableRpcDataHexString(this.hash()),\n      nonce: to.nullableRpcQuantityHexString(this.nonce) || \"0x\",\n      from: to.rpcDataHexString(this.from),\n      to: to.nullableRpcDataHexString(this.to),\n      value: to.nullableRpcQuantityHexString(this.value),\n      gas: to.nullableRpcQuantityHexString(this.gasLimit),\n      gasPrice: to.nullableRpcQuantityHexString(this.gasPrice),\n      data: this.data ? this.data.toString(\"hex\") : null,\n      v: to.nullableRpcQuantityHexString(this.v),\n      r: to.nullableRpcQuantityHexString(this.r),\n      s: to.nullableRpcQuantityHexString(this.s),\n      _type: this.type,\n      _options: {\n        hardfork: this.ganacheTxCommon.hardfork(),\n        chainId: this.ganacheTxCommon.chainId(),\n        networkId: this.ganacheTxCommon.networkId()\n      }\n    };\n    return resultJSON;\n  }\n\n  isFake() {\n    return (this.type & Transaction.types.fake) === Transaction.types.fake;\n  }\n\n  isSigned() {\n    return (this.type & Transaction.types.signed) === Transaction.types.signed;\n  }\n\n  /**\n   * Compares the transaction's nonce value to the given expectedNonce taking in\n   * to account the type of transaction and comparison rules for each type.\n   *\n   * In a signed transaction a nonce of Buffer([]) is the same as Buffer([0]),\n   * but in a fake transaction Buffer([]) is null and Buffer([0]) is 0.\n   *\n   * @param {Buffer} expectedNonce The value of the from account's next nonce.\n   */\n  validateNonce(expectedNonce) {\n    let nonce;\n    if (this.isSigned() && this.nonce.length === 0) {\n      nonce = BUFFER_ZERO;\n    } else {\n      nonce = this.nonce;\n    }\n    return nonce.equals(expectedNonce);\n  }\n\n  /**\n   * Signs the transaction and sets the `type` bit for `signed` to 1,\n   * i.e., `isSigned() === true`\n   */\n  sign() {\n    sign.apply(this, arguments);\n    this.type |= Transaction.types.signed;\n  }\n\n  /**\n   * Returns a JSON-RPC spec compliant representation of this Transaction.\n   *\n   * @param {Object} block The block this Transaction appears in.\n   */\n  toJsonRpc(block) {\n    const hash = this.hash();\n\n    let transactionIndex = null;\n    for (let i = 0, txns = block.transactions, l = txns.length; i < l; i++) {\n      if (txns[i].hash().equals(hash)) {\n        transactionIndex = i;\n        break;\n      }\n    }\n\n    const resultJSON = {\n      hash: to.nullableRpcDataHexString(hash),\n      nonce: to.rpcQuantityHexString(this.nonce),\n      blockHash: to.nullableRpcDataHexString(block.hash()),\n      blockNumber: to.nullableRpcQuantityHexString(block.header.number),\n      transactionIndex: to.nullableRpcQuantityHexString(transactionIndex),\n      from: to.rpcDataHexString(this.from),\n      to: to.nullableRpcDataHexString(this.to),\n      value: to.rpcQuantityHexString(this.value),\n      gas: to.rpcQuantityHexString(this.gasLimit),\n      gasPrice: to.rpcQuantityHexString(this.gasPrice),\n      input: to.rpcDataHexString(this.data),\n      v: to.nullableRpcQuantityHexString(this.v),\n      r: to.nullableRpcQuantityHexString(this.r),\n      s: to.nullableRpcQuantityHexString(this.s)\n    };\n\n    return resultJSON;\n  }\n};\n","module.exports = require(\"ethereumjs-tx\");","module.exports = require(\"ethereumjs-block\");","var to = require(\"./to.js\");\n\n// Expects:\n//\n// logIndex: ...\n// transactionIndex: ...\n// transactionHash: ...\n// block: ...\n// address: ...\n// data: ...\n// topics: ...\n// type: ...\n\nfunction Log(data) {\n  var self = this;\n  Object.keys(data).forEach(function(key) {\n    self[key] = data[key];\n  });\n}\n\nLog.prototype.toJSON = function() {\n  // RPC quantity values like this.transactionIndex can be set to \"0x00\",\n  // use the explicit rpcQuantityHexString to properly format the JSON, removing leading zeroes.\n  // See RPC log format spec: https://github.com/ethereum/wiki/wiki/JSON-RPC\n  return {\n    logIndex: to.rpcQuantityHexString(this.logIndex),\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\n    transactionHash: to.rpcDataHexString(this.transactionHash),\n    blockHash: to.rpcDataHexString(this.block.hash()),\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\n    address: to.rpcDataHexString(this.address),\n    data: to.rpcDataHexString(this.data),\n    topics: this.topics,\n    type: \"mined\"\n  };\n};\n\nmodule.exports = Log;\n","var to = require(\"./to\");\n\nfunction Receipt(tx, block, logs, gasUsed, cumulativeGasUsed, contractAddress, status, logsBloom) {\n  this.tx = tx;\n  this.block = block;\n  this.logs = logs;\n  this.gasUsed = gasUsed;\n  this.cumulativeGasUsed = cumulativeGasUsed;\n  this.contractAddress = contractAddress;\n  this.status = status;\n  this.logsBloom = logsBloom;\n\n  this.transactionIndex = 0;\n\n  this.txHash = tx.hash();\n\n  for (var i = 0; i < block.transactions.length; i++) {\n    var current = block.transactions[i];\n    if (current.hash().equals(this.txHash)) {\n      this.transactionIndex = i;\n      break;\n    }\n  }\n}\n\nReceipt.prototype.toJSON = function() {\n  // Enforce Hex formatting as defined in the RPC spec.\n  return {\n    transactionHash: to.rpcDataHexString(this.txHash),\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\n    blockHash: to.rpcDataHexString(this.block.hash()),\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\n    from: to.rpcDataHexString(this.tx.from),\n    to: to.nullableRpcDataHexString(this.tx.to),\n    gasUsed: to.rpcQuantityHexString(this.gasUsed),\n    cumulativeGasUsed: to.rpcQuantityHexString(this.cumulativeGasUsed),\n    contractAddress: this.contractAddress != null ? to.rpcDataHexString(this.contractAddress) : null,\n    logs: this.logs.map(function(log) {\n      return log.toJSON();\n    }),\n    status: to.rpcQuantityHexString(this.status),\n    logsBloom: to.rpcDataHexString(this.logsBloom),\n    v: to.rpcQuantityHexString(this.tx.v),\n    r: to.rpcQuantityHexString(this.tx.r),\n    s: to.rpcQuantityHexString(this.tx.s)\n  };\n};\n\nmodule.exports = Receipt;\n","module.exports = require(\"level-sublevel\");","class LevelUpOutOfRangeError extends Error {\n  constructor(type, index, len) {\n    const message = \"LevelUpArrayAdapter named '\" + type + \"' index out of range: index \" + index + \"; length: \" + len;\n    super(message);\n    this.name = `${this.constructor.name}:${type}`;\n    this.type = type;\n  }\n}\n\nclass BlockOutOfRangeError extends LevelUpOutOfRangeError {\n  constructor(index, len) {\n    super(\"blocks\", index, len);\n  }\n}\n\nmodule.exports = {\n  LevelUpOutOfRangeError,\n  BlockOutOfRangeError\n};\n","module.exports = require(\"events\");","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Gav Wood <gav@parity.io>\n *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea <marian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar version = require('../package.json').version;\nvar core = require('web3-core');\nvar Eth = require('web3-eth');\nvar Net = require('web3-net');\nvar Personal = require('web3-eth-personal');\nvar Shh = require('web3-shh');\nvar Bzz = require('web3-bzz');\nvar utils = require('web3-utils');\n\nvar Web3 = function Web3() {\n    var _this = this;\n\n    // sets _requestmanager etc\n    core.packageInit(this, arguments);\n\n    this.version = version;\n    this.utils = utils;\n\n    this.eth = new Eth(this);\n    this.shh = new Shh(this);\n    this.bzz = new Bzz(this);\n\n    // overwrite package setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function (provider, net) {\n        setProvider.apply(_this, arguments);\n\n        this.eth.setProvider(provider, net);\n        this.shh.setProvider(provider, net);\n        this.bzz.setProvider(provider);\n\n        return true;\n    };\n};\n\nWeb3.version = version;\nWeb3.utils = utils;\nWeb3.modules = {\n    Eth: Eth,\n    Net: Net,\n    Personal: Personal,\n    Shh: Shh,\n    Bzz: Bzz\n};\n\ncore.addProviders(Web3);\n\nmodule.exports = Web3;\n\n","module.exports = require(\"web3-core\");","module.exports = require(\"underscore\");","module.exports = require(\"web3-utils\");","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nlet ProviderEngine = require(\"web3-provider-engine\");\nlet SubscriptionSubprovider = require(\"web3-provider-engine/subproviders/subscriptions\");\n\nlet RequestFunnel = require(\"./subproviders/requestfunnel\");\nlet DelayedBlockFilter = require(\"./subproviders/delayedblockfilter\");\nlet GethDefaults = require(\"./subproviders/gethdefaults\");\nlet GethApiDouble = require(\"./subproviders/geth_api_double\");\n\nlet BlockTracker = require(\"./block_tracker\");\n\nlet RuntimeError = require(\"./utils/runtimeerror\");\nlet EventEmitter = require(\"events\");\n\nlet _ = require(\"lodash\");\n\nfunction Provider(options) {\n  const self = this;\n  EventEmitter.call(this);\n\n  this.options = options = self._applyDefaultOptions(options || {});\n\n  let gethApiDouble = new GethApiDouble(options, this);\n\n  this.engine = new ProviderEngine({\n    blockTracker: new BlockTracker({ blockchain: gethApiDouble.state.blockchain })\n  });\n\n  let subscriptionSubprovider = new SubscriptionSubprovider();\n\n  this.engine.manager = gethApiDouble;\n  this.engine.addProvider(new RequestFunnel());\n  this.engine.addProvider(new DelayedBlockFilter());\n  this.engine.addProvider(subscriptionSubprovider);\n  this.engine.addProvider(new GethDefaults());\n  this.engine.addProvider(gethApiDouble);\n\n  this.engine.setMaxListeners(100);\n  this.engine.start();\n\n  this.manager = gethApiDouble;\n  this.sendAsync = this.send.bind(this);\n  this.send = this.send.bind(this);\n  this.close = this.close.bind(this);\n  this._queueRequest = this._queueRequest.bind(this);\n  this._processRequestQueue = this._processRequestQueue.bind(this);\n\n  subscriptionSubprovider.on(\"data\", function(err, notification) {\n    self.emit(\"data\", err, notification);\n  });\n}\n\nconst defaultOptions = {\n  _chainId: 1,\n  vmErrorsOnRPCResponse: true,\n  verbose: false,\n  asyncRequestProcessing: false,\n  logger: {\n    log: function() {}\n  }\n};\n\nProvider.prototype = Object.create(EventEmitter.prototype);\nProvider.prototype.constructor = Provider;\n\nProvider.prototype._applyDefaultOptions = function(options) {\n  return _.merge({}, defaultOptions, options);\n};\n\nProvider.prototype.send = function(payload, callback) {\n  if (typeof callback !== \"function\") {\n    throw new Error(\n      \"No callback provided to provider's send function. As of web3 1.0, provider.send \" +\n        \"is no longer synchronous and must be passed a callback as its final argument.\"\n    );\n  }\n\n  let self = this;\n\n  let externalize = function(payload) {\n    return _.cloneDeep(payload);\n  };\n\n  if (Array.isArray(payload)) {\n    payload = payload.map(externalize);\n  } else {\n    payload = externalize(payload);\n  }\n\n  let intermediary = function(err, result) {\n    // clone result so that we can mutate the response without worrying about\n    // that messing up assumptions the calling logic might have about us\n    // mutating things\n    result = _.cloneDeep(result);\n    let response;\n    if (Array.isArray(result)) {\n      response = [];\n      for (let i = 0; i < result.length; i++) {\n        response.push(self.reportErrorInResponse(payload[i], err, result[i]));\n      }\n    } else {\n      response = self.reportErrorInResponse(payload, err, result);\n    }\n\n    if (self.options.verbose) {\n      self.options.logger.log(\n        \" <   \" +\n          JSON.stringify(response, null, 2)\n            .split(\"\\n\")\n            .join(\"\\n <   \")\n      );\n    }\n    process.nextTick(() => callback(response.error ? err : null, response));\n  };\n\n  if (self.options.verbose) {\n    self.options.logger.log(\n      \"   > \" +\n        JSON.stringify(payload, null, 2)\n          .split(\"\\n\")\n          .join(\"\\n   > \")\n    );\n  }\n\n  if (self.options.asyncRequestProcessing) {\n    self.engine.sendAsync(payload, intermediary);\n  } else {\n    self._queueRequest(payload, intermediary);\n  }\n};\n\nProvider.prototype.close = function(callback) {\n  // This is a little gross reaching, but...\n  this.manager.state.stopMining();\n  this.manager.state.blockchain.close(callback);\n  this.engine.stop();\n};\n\nProvider.prototype._queueRequest = function(payload, intermediary) {\n  if (!this._requestQueue) {\n    this._requestQueue = [];\n  }\n\n  this._requestQueue.push({\n    payload: payload,\n    callback: intermediary\n  });\n\n  setImmediate(this._processRequestQueue);\n};\n\nProvider.prototype._processRequestQueue = function() {\n  const self = this;\n\n  if (self._requestInProgress) {\n    return;\n  }\n\n  self._requestInProgress = true;\n\n  let args = self._requestQueue.shift();\n\n  if (args) {\n    self.engine.sendAsync(args.payload, (err, result) => {\n      if (self._requestQueue.length > 0) {\n        setImmediate(self._processRequestQueue);\n      }\n      args.callback(err, result);\n      self._requestInProgress = false;\n    });\n  } else {\n    // still need to free the lock\n    self._requestInProgress = false;\n\n    if (self._requestQueue.length > 0) {\n      setImmediate(self._processRequestQueue);\n    }\n  }\n};\n\nProvider.prototype.cleanUpErrorObject = function(err, response) {\n  // Our response should already have an error field at this point, if it\n  // doesn't, this was likely intentional. If not, this is the wrong place to\n  // fix that problem.\n  if (!err || !response.error) {\n    return response;\n  }\n\n  let errorObject = {\n    error: {\n      data: {}\n    }\n  };\n\n  if (err.message) {\n    // clean up the error reporting done by the provider engine so the error message isn't lost in the stack trace noise\n    errorObject.error.message = err.message;\n    errorObject.error.data.stack = err.stack;\n    errorObject.error.data.name = err.name;\n    if (\"code\" in err) {\n      errorObject.error.code = err.code;\n    }\n  } else if (!response.error) {\n    errorObject.error = {\n      message: err.toString()\n    };\n  }\n\n  return _.merge(response, errorObject);\n};\n\n// helper list of RPC methods which execute code and respond with a transaction hash as their result\nlet transactionMethods = [\"eth_sendTransaction\", \"eth_sendRawTransaction\", \"personal_sendTransaction\"];\n\nProvider.prototype._isTransactionRequest = function(request) {\n  return transactionMethods.indexOf(request.method) !== -1;\n};\n\nProvider.prototype.reportErrorInResponse = function(request, err, response) {\n  const self = this;\n\n  if (!err) {\n    return response;\n  }\n\n  // TODO: for next major release: move reporting of tx hash on error to error\n  // field to prevent poorly-written clients which assume that the existence of\n  // the \"result\" field implies no errors from breaking.\n  if (self._isTransactionRequest(request)) {\n    if (err instanceof RuntimeError) {\n      // Make sure we always return the transaction hash on failed transactions so\n      // the caller can get their tx receipt. This breaks JSONRPC 2.0, but it's how\n      // we've always done it.\n      response.result = err.hashes[0];\n\n      if (self.options.vmErrorsOnRPCResponse) {\n        if (!response.error.data) {\n          response.error.data = {};\n        }\n        response.error.data[err.hashes[0]] = err.results[err.hashes[0]];\n      } else {\n        delete response.error;\n      }\n    }\n  }\n\n  if (request.method === \"eth_call\") {\n    if (err instanceof RuntimeError) {\n      if (self.options.vmErrorsOnRPCResponse) {\n        if (!response.error.data) {\n          response.error.data = {};\n        }\n        response.error.data[err.hashes[0]] = err.results[err.hashes[0]];\n      } else {\n        response.result = err.results[err.hashes[0]].return || \"0x\";\n        delete response.error;\n      }\n    }\n  }\n\n  return self.cleanUpErrorObject(err, response);\n};\n\nmodule.exports = Provider;\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar Buffer = require('safe-buffer').Buffer;\nvar ethUtil = require('ethereumjs-util');\nvar crypto = require('crypto');\nvar randomBytes = require('randombytes');\nvar scryptsy = require('scrypt.js');\nvar uuidv4 = require('uuid/v4');\nvar bs58check = require('bs58check');\n\nfunction assert(val, msg) {\n  if (!val) {\n    throw new Error(msg || 'Assertion failed');\n  }\n}\n\nfunction decipherBuffer(decipher, data) {\n  return Buffer.concat([decipher.update(data), decipher.final()]);\n}\n\nvar Wallet = function Wallet(priv, pub) {\n  if (priv && pub) {\n    throw new Error('Cannot supply both a private and a public key to the constructor');\n  }\n\n  if (priv && !ethUtil.isValidPrivate(priv)) {\n    throw new Error('Private key does not satisfy the curve requirements (ie. it is invalid)');\n  }\n\n  if (pub && !ethUtil.isValidPublic(pub)) {\n    throw new Error('Invalid public key');\n  }\n\n  this._privKey = priv;\n  this._pubKey = pub;\n};\n\nObject.defineProperty(Wallet.prototype, 'privKey', {\n  get: function get() {\n    assert(this._privKey, 'This is a public key only wallet');\n    return this._privKey;\n  }\n});\n\nObject.defineProperty(Wallet.prototype, 'pubKey', {\n  get: function get() {\n    if (!this._pubKey) {\n      this._pubKey = ethUtil.privateToPublic(this.privKey);\n    }\n    return this._pubKey;\n  }\n});\n\nWallet.generate = function (icapDirect) {\n  if (icapDirect) {\n    var max = new ethUtil.BN('088f924eeceeda7fe92e1f5b0fffffffffffffff', 16);\n    while (true) {\n      var privKey = randomBytes(32);\n      if (new ethUtil.BN(ethUtil.privateToAddress(privKey)).lte(max)) {\n        return new Wallet(privKey);\n      }\n    }\n  } else {\n    return new Wallet(randomBytes(32));\n  }\n};\n\nWallet.generateVanityAddress = function (pattern) {\n  if ((typeof pattern === 'undefined' ? 'undefined' : _typeof(pattern)) !== 'object') {\n    pattern = new RegExp(pattern);\n  }\n\n  while (true) {\n    var privKey = randomBytes(32);\n    var address = ethUtil.privateToAddress(privKey);\n\n    if (pattern.test(address.toString('hex'))) {\n      return new Wallet(privKey);\n    }\n  }\n};\n\nWallet.prototype.getPrivateKey = function () {\n  return this.privKey;\n};\n\nWallet.prototype.getPrivateKeyString = function () {\n  return ethUtil.bufferToHex(this.getPrivateKey());\n};\n\nWallet.prototype.getPublicKey = function () {\n  return this.pubKey;\n};\n\nWallet.prototype.getPublicKeyString = function () {\n  return ethUtil.bufferToHex(this.getPublicKey());\n};\n\nWallet.prototype.getAddress = function () {\n  return ethUtil.publicToAddress(this.pubKey);\n};\n\nWallet.prototype.getAddressString = function () {\n  return ethUtil.bufferToHex(this.getAddress());\n};\n\nWallet.prototype.getChecksumAddressString = function () {\n  return ethUtil.toChecksumAddress(this.getAddressString());\n};\n\n// https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\nWallet.prototype.toV3 = function (password, opts) {\n  assert(this._privKey, 'This is a public key only wallet');\n\n  opts = opts || {};\n  var salt = opts.salt || randomBytes(32);\n  var iv = opts.iv || randomBytes(16);\n\n  var derivedKey;\n  var kdf = opts.kdf || 'scrypt';\n  var kdfparams = {\n    dklen: opts.dklen || 32,\n    salt: salt.toString('hex')\n  };\n\n  if (kdf === 'pbkdf2') {\n    kdfparams.c = opts.c || 262144;\n    kdfparams.prf = 'hmac-sha256';\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');\n  } else if (kdf === 'scrypt') {\n    // FIXME: support progress reporting callback\n    kdfparams.n = opts.n || 262144;\n    kdfparams.r = opts.r || 8;\n    kdfparams.p = opts.p || 1;\n    derivedKey = scryptsy(Buffer.from(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else {\n    throw new Error('Unsupported kdf');\n  }\n\n  var cipher = crypto.createCipheriv(opts.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n  if (!cipher) {\n    throw new Error('Unsupported cipher');\n  }\n\n  var ciphertext = Buffer.concat([cipher.update(this.privKey), cipher.final()]);\n\n  var mac = ethUtil.keccak256(Buffer.concat([derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex')]));\n\n  return {\n    version: 3,\n    id: uuidv4({ random: opts.uuid || randomBytes(16) }),\n    address: this.getAddress().toString('hex'),\n    crypto: {\n      ciphertext: ciphertext.toString('hex'),\n      cipherparams: {\n        iv: iv.toString('hex')\n      },\n      cipher: opts.cipher || 'aes-128-ctr',\n      kdf: kdf,\n      kdfparams: kdfparams,\n      mac: mac.toString('hex')\n    }\n  };\n};\n\nWallet.prototype.getV3Filename = function (timestamp) {\n  /*\n   * We want a timestamp like 2016-03-15T17-11-33.007598288Z. Date formatting\n   * is a pain in Javascript, everbody knows that. We could use moment.js,\n   * but decide to do it manually in order to save space.\n   *\n   * toJSON() returns a pretty close version, so let's use it. It is not UTC though,\n   * but does it really matter?\n   *\n   * Alternative manual way with padding and Date fields: http://stackoverflow.com/a/7244288/4964819\n   *\n   */\n  var ts = timestamp ? new Date(timestamp) : new Date();\n\n  return ['UTC--', ts.toJSON().replace(/:/g, '-'), '--', this.getAddress().toString('hex')].join('');\n};\n\nWallet.prototype.toV3String = function (password, opts) {\n  return JSON.stringify(this.toV3(password, opts));\n};\n\nWallet.fromPublicKey = function (pub, nonStrict) {\n  if (nonStrict) {\n    pub = ethUtil.importPublic(pub);\n  }\n  return new Wallet(null, pub);\n};\n\nWallet.fromExtendedPublicKey = function (pub) {\n  assert(pub.slice(0, 4) === 'xpub', 'Not an extended public key');\n  pub = bs58check.decode(pub).slice(45);\n  // Convert to an Ethereum public key\n  return Wallet.fromPublicKey(pub, true);\n};\n\nWallet.fromPrivateKey = function (priv) {\n  return new Wallet(priv);\n};\n\nWallet.fromExtendedPrivateKey = function (priv) {\n  assert(priv.slice(0, 4) === 'xprv', 'Not an extended private key');\n  var tmp = bs58check.decode(priv);\n  assert(tmp[45] === 0, 'Invalid extended private key');\n  return Wallet.fromPrivateKey(tmp.slice(46));\n};\n\n// https://github.com/ethereum/go-ethereum/wiki/Passphrase-protected-key-store-spec\nWallet.fromV1 = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  if (json.Version !== '1') {\n    throw new Error('Not a V1 wallet');\n  }\n\n  if (json.Crypto.KeyHeader.Kdf !== 'scrypt') {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var kdfparams = json.Crypto.KeyHeader.KdfParams;\n  var derivedKey = scryptsy(Buffer.from(password), Buffer.from(json.Crypto.Salt, 'hex'), kdfparams.N, kdfparams.R, kdfparams.P, kdfparams.DkLen);\n\n  var ciphertext = Buffer.from(json.Crypto.CipherText, 'hex');\n\n  var mac = ethUtil.keccak256(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n\n  if (mac.toString('hex') !== json.Crypto.MAC) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv('aes-128-cbc', ethUtil.keccak256(derivedKey.slice(0, 16)).slice(0, 16), Buffer.from(json.Crypto.IV, 'hex'));\n  var seed = decipherBuffer(decipher, ciphertext);\n\n  return new Wallet(seed);\n};\n\nWallet.fromV3 = function (input, password, nonStrict) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(nonStrict ? input.toLowerCase() : input);\n\n  if (json.version !== 3) {\n    throw new Error('Not a V3 wallet');\n  }\n\n  var derivedKey;\n  var kdfparams;\n  if (json.crypto.kdf === 'scrypt') {\n    kdfparams = json.crypto.kdfparams;\n\n    // FIXME: support progress reporting callback\n    derivedKey = scryptsy(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else if (json.crypto.kdf === 'pbkdf2') {\n    kdfparams = json.crypto.kdfparams;\n\n    if (kdfparams.prf !== 'hmac-sha256') {\n      throw new Error('Unsupported parameters to PBKDF2');\n    }\n\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n  } else {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');\n\n  var mac = ethUtil.keccak256(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n  if (mac.toString('hex') !== json.crypto.mac) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));\n  var seed = decipherBuffer(decipher, ciphertext);\n\n  return new Wallet(seed);\n};\n\n/*\n * Based on https://github.com/ethereum/pyethsaletool/blob/master/pyethsaletool.py\n * JSON fields: encseed, ethaddr, btcaddr, email\n */\nWallet.fromEthSale = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  var encseed = Buffer.from(json.encseed, 'hex');\n\n  // key derivation\n  var derivedKey = crypto.pbkdf2Sync(password, password, 2000, 32, 'sha256').slice(0, 16);\n\n  // seed decoding (IV is first 16 bytes)\n  // NOTE: crypto (derived from openssl) when used with aes-*-cbc will handle PKCS#7 padding internally\n  //       see also http://stackoverflow.com/a/31614770/4964819\n  var decipher = crypto.createDecipheriv('aes-128-cbc', derivedKey, encseed.slice(0, 16));\n  var seed = decipherBuffer(decipher, encseed.slice(16));\n\n  var wallet = new Wallet(ethUtil.keccak256(seed));\n  if (wallet.getAddress().toString('hex') !== json.ethaddr) {\n    throw new Error('Decoded key mismatch - possibly wrong passphrase');\n  }\n  return wallet;\n};\n\nmodule.exports = Wallet;","module.exports = require(\"crypto\");","var to = require(\"./utils/to.js\");\nvar Account = require(\"ethereumjs-account\").default;\nvar Block = require(\"ethereumjs-block\");\nvar Log = require(\"./utils/log\");\nvar Receipt = require(\"./utils/receipt\");\nvar VM = require(\"ethereumjs-vm\").default;\nvar Common = require(\"ethereumjs-common\").default;\nvar RuntimeError = require(\"./utils/runtimeerror\");\nvar Trie = require(\"merkle-patricia-tree\");\nvar utils = require(\"ethereumjs-util\");\nvar async = require(\"async\");\nvar Heap = require(\"heap\");\nvar Database = require(\"./database\");\nvar EventEmitter = require(\"events\");\nvar estimateGas = require(\"./utils/gas/estimateGas\");\nvar _ = require(\"lodash\");\nvar promisify = require(\"util\").promisify;\nconst BN = utils.BN;\n\nfunction BlockchainDouble(options) {\n  var self = this;\n  EventEmitter.apply(self);\n\n  this.options = options = this._applyDefaultOptions(options || {});\n\n  this.logger = options.logger || console;\n\n  this.data = new Database(options);\n\n  if (options.trie != null && options.db_path != null) {\n    throw new Error(\"Can't initialize a TestRPC with a db and a custom trie.\");\n  }\n\n  this.pending_transactions = [];\n\n  // updated periodically to keep up with the times\n  this.blockGasLimit = options.gasLimit;\n  this.defaultTransactionGasLimit = options.defaultTransactionGasLimit;\n  this.timeAdjustment = 0;\n  this.blockNumberAdjustment = 0;\n}\n\nconst defaultOptions = {\n  gasLimit: \"0x6691b7\",\n  defaultTransactionGasLimit: \"0x15f90\",\n  time: null,\n  debug: false,\n  hardfork: \"istanbul\",\n  allowUnlimitedContractSize: false\n};\n\n// inheritence w/ prototype chaining\nBlockchainDouble.prototype = Object.create(EventEmitter.prototype);\nBlockchainDouble.prototype.constructor = BlockchainDouble;\n\nBlockchainDouble.prototype._applyDefaultOptions = function(options) {\n  // We want this function to mutate the options object so that we can report\n  // our settings back to our consumer application (e.g., ganache)\n  return _.merge(options, defaultOptions, Object.assign({}, options));\n};\n\nBlockchainDouble.prototype.initialize = function(accounts, callback) {\n  var self = this;\n\n  this.data.initialize(function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.latestBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      var options = self.options;\n\n      var root = null;\n\n      if (block) {\n        root = block.header.stateRoot;\n      }\n\n      // I haven't yet found a good way to do this. Getting the trie from the\n      // forked blockchain without going through the other setup is a little gross.\n      self.stateTrie = self.createStateTrie(self.data.trie_db, root);\n\n      self.vm = options.vm || self.createVMFromStateTrie(self.stateTrie, true);\n\n      if (options.time) {\n        self.setTime(options.time);\n      }\n\n      // If we already have a block, then that means there's an existing chain.\n      // Don't create a genesis block.\n      if (block) {\n        self.emit(\"block\", block);\n        return callback();\n      }\n\n      self.createGenesisBlock(function(err, block) {\n        if (err) {\n          return callback(err);\n        }\n\n        accounts = accounts || [];\n\n        self.vm.stateManager.checkpoint(() => {\n          async.eachSeries(\n            accounts,\n            function(accountData, finished) {\n              self.vm.stateManager.putAccount(utils.toBuffer(accountData.address), accountData.account, finished);\n            },\n            function(err) {\n              if (err) {\n                return callback(err);\n              }\n\n              self.vm.stateManager.commit(() => {\n                // Create first block\n                self.putBlock(block, [], [], callback);\n              });\n            }\n          );\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.createVMFromStateTrie = function(state, activatePrecompiles) {\n  const self = this;\n  const common = Common.forCustomChain(\n    \"mainnet\", // TODO needs to match chain id\n    {\n      name: \"ganache\",\n      networkId: self.options.network_id || self.forkVersion,\n      chainId: self.options._chainId,\n      comment: \"Local test network\",\n      bootstrapNodes: []\n    },\n    self.options.hardfork\n  );\n\n  const vm = new VM({\n    state: state,\n    common,\n    blockchain: {\n      // EthereumJS VM needs a blockchain object in order to get block information.\n      // When calling getBlock() it will pass a number that's of a Buffer type.\n      // Unfortunately, it uses a 64-character buffer (when converted to hex) to\n      // represent block numbers as well as block hashes. Since it's very unlikely\n      // any block number will get higher than the maximum safe Javascript integer,\n      // we can convert this buffer to a number ahead of time before calling our\n      // own getBlock(). If the conversion succeeds, we have a block number.\n      // If it doesn't, we have a block hash. (Note: Our implementation accepts both.)\n      getBlock: function(number, done) {\n        try {\n          number = to.number(number);\n        } catch (e) {\n          // Do nothing; must be a block hash.\n        }\n\n        self.getBlock(number, done);\n      }\n    },\n    activatePrecompiles: activatePrecompiles || false,\n    allowUnlimitedContractSize: self.options.allowUnlimitedContractSize\n  });\n\n  if (self.options.debug === true) {\n    // log executed opcodes, including args as hex\n    vm.on(\"step\", function(info) {\n      var name = info.opcode.name;\n      var argsNum = info.opcode.in;\n      if (argsNum) {\n        var args = info.stack\n          .slice(-argsNum)\n          .map((arg) => to.hex(arg))\n          .join(\" \");\n\n        self.logger.log(`${name} ${args}`);\n      } else {\n        self.logger.log(name);\n      }\n    });\n  }\n\n  return vm;\n};\n\nBlockchainDouble.prototype.createStateTrie = function(db, root) {\n  return new Trie(db, root);\n};\n\n// Overrideable so other implementations (forking) can edit it.\nBlockchainDouble.prototype.createGenesisBlock = function(callback) {\n  this.createBlock(callback);\n};\n\nBlockchainDouble.prototype.latestBlock = function(callback) {\n  this.data.blocks.last(function(err, last) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, last);\n  });\n};\n\n// number accepts number (integer, hex) or tag (e.g., \"latest\")\nBlockchainDouble.prototype.getEffectiveBlockNumber = function(number, callback) {\n  if (typeof number !== \"string\") {\n    number = to.hex(number);\n  }\n\n  // If we have a hex number\n  if (number.indexOf(\"0x\") >= 0) {\n    return callback(null, to.number(number));\n  } else {\n    if (number === \"latest\" || number === \"pending\") {\n      return this.getHeight(callback);\n    } else if (number === \"earliest\") {\n      return callback(null, 0);\n    }\n  }\n};\n\n// number accepts number (integer, hex), tag (e.g., \"latest\") or block hash\n// This function is used by ethereumjs-vm\nBlockchainDouble.prototype.getBlock = function(number, callback) {\n  var self = this;\n\n  if (typeof number !== \"string\") {\n    number = to.hex(number);\n  }\n\n  // If we have a hex number or a block hash\n  if (number.indexOf(\"0x\") >= 0) {\n    var hash = number;\n\n    // block hash\n    if (hash.length > 40) {\n      this.data.blockHashes.get(to.hex(hash), function(err, blockIndex) {\n        if (err) {\n          return callback(err);\n        }\n        return self.data.blocks.get(blockIndex, callback);\n      });\n    } else {\n      // Block number\n      return this.data.blocks.get(to.number(hash), callback);\n    }\n  } else {\n    if (number === \"latest\" || number === \"pending\") {\n      return this.latestBlock(callback);\n    } else if (number === \"earliest\") {\n      return this.data.blocks.first(callback);\n    } else {\n      process.nextTick(callback, new Error(\"Invalid `blockNumber`: \\\"\" + number + \"\\\"\"));\n    }\n  }\n};\n\nBlockchainDouble.prototype.putBlock = function(block, logs, receipts, callback) {\n  var self = this;\n\n  // Lock in the state root for this block.\n  block.header.stateRoot = this.stateTrie.root;\n\n  this.data.blocks.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    var requests = [\n      self.data.blocks.push.bind(self.data.blocks, block),\n      self.data.blockLogs.push.bind(self.data.blockLogs, logs),\n      self.data.blockHashes.set.bind(self.data.blockHashes, to.hex(block.hash()), length)\n    ];\n\n    block.transactions.forEach(function(tx, index) {\n      var txHash = to.hex(tx.hash());\n      requests.push(\n        self.data.transactions.set.bind(self.data.transactions, txHash, tx),\n        self.data.transactionReceipts.set.bind(self.data.transactionReceipts, txHash, receipts[index])\n      );\n    });\n\n    async.parallel(requests, (err, result) => {\n      if (!err) {\n        self.emit(\"block\", block);\n      }\n      callback(err, result);\n    });\n  });\n};\n\nBlockchainDouble.prototype.popBlock = function(callback) {\n  var self = this;\n\n  this.data.blocks.last(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n    if (block == null) {\n      return callback(null, null);\n    }\n\n    var requests = [];\n    var blockHash = to.hex(block.hash());\n\n    block.transactions.forEach(function(tx) {\n      var txHash = to.hex(tx.hash());\n\n      requests.push(\n        self.data.transactions.del.bind(self.data.transactions, txHash),\n        self.data.transactionReceipts.del.bind(self.data.transactionReceipts, txHash)\n      );\n    });\n\n    requests.push(\n      self.data.blockLogs.pop.bind(self.data.blockLogs),\n      self.data.blockHashes.del.bind(self.data.blockHashes, blockHash),\n      self.data.blocks.pop.bind(self.data.blocks) // Do this one last in case anything relies on it.\n    );\n\n    async.series(requests, function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Set the root to the last available, which will \"roll back\" to the previous\n      // moment in time. Note that all the old data is still in the db, but it's now just junk data.\n      self.data.blocks.last(function(err, newLastBlock) {\n        if (err) {\n          return callback(err);\n        }\n        // using setStateRoot because in the future it will automatically take care\n        // of clearing the cache for us.\n        // note setStateRoot checks for checkpoints, and if there are any, it will fail.\n        // At time of writing this comment, the only time there could be a checkpoint\n        // is in the middle of a vm.runBlock call. Once asyncRequestProcessing is reenabled\n        // this will likely cause problems.\n        self.vm.stateManager.setStateRoot(newLastBlock.header.stateRoot, function(err) {\n          // remove this `._storageTries = {}` statement once https://github.com/ethereumjs/ethereumjs-vm/pull/445\n          // is in a release, probably in ejs-vm 2.6.1\n          if (!err) {\n            self.vm.stateManager._storageTries = {};\n          }\n          // Remember: Return block we popped off.\n          callback(err, block);\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.clearPendingTransactions = function() {\n  this.pending_transactions = [];\n};\n\n/**\n * createBlock\n *\n * Create a new block, where the parent's block is either the latest block\n * on the chain or the parent block passed in.\n *\n * @param  {Block}   parent   The block meant to be the parent block (optional)\n * @param  {Function} callback Callback function called after block is created\n * @return Block              The block created.\n */\nBlockchainDouble.prototype.createBlock = function(parent, emulateParent, callback) {\n  var self = this;\n\n  if (typeof parent === \"function\") {\n    callback = parent;\n    parent = null;\n    emulateParent = false;\n  } else if (typeof emulateParent === \"function\") {\n    callback = emulateParent;\n    emulateParent = false;\n  }\n\n  var block = new Block();\n\n  function getParent(callback) {\n    if (parent) {\n      return callback(null, parent);\n    } else {\n      self.latestBlock(callback);\n    }\n  }\n\n  getParent(function(err, parent) {\n    if (err) {\n      return callback(err);\n    }\n\n    block.header.gasLimit = self.blockGasLimit;\n\n    if (parent != null && emulateParent) {\n      block.header.number = parent.header.number;\n      block.header.timestamp = parent.header.timestamp;\n      block.header.parentHash = parent.header.parentHash;\n    } else {\n      var parentNumber = parent != null ? to.number(parent.header.number) : -1;\n\n      // Ensure we have the right block number for the VM.\n      block.header.number = to.hex(parentNumber + 1 + self.blockNumberAdjustment);\n\n      // Set the timestamp before processing txs\n      block.header.timestamp = to.hex(self.currentTime());\n\n      if (parent != null) {\n        block.header.parentHash = to.hex(parent.hash());\n      }\n    }\n\n    callback(null, block);\n  });\n};\n\nBlockchainDouble.prototype.getQueuedNonce = function(address, callback) {\n  var nonce = null;\n  var addressBuffer = to.buffer(address);\n  this.pending_transactions.forEach(function(tx) {\n    if (!tx.from.equals(addressBuffer)) {\n      return;\n    }\n\n    var pendingNonce = new BN(tx.nonce);\n    // If this is the first queued nonce for this address we found,\n    // or it's higher than the previous highest, note it.\n    if (nonce === null || pendingNonce.gt(nonce)) {\n      nonce = pendingNonce;\n    }\n  });\n\n  // If we found a queued transaction nonce, return one higher\n  // than the highest we found\n  if (nonce != null) {\n    return callback(null, nonce.iaddn(1).toArrayLike(Buffer));\n  }\n  this.stateTrie.get(addressBuffer, function(err, val) {\n    if (err) {\n      return callback(err);\n    }\n\n    var account = new Account(val);\n    // nonces are initiallized as an empty buffer, which isn't what we want.\n    callback(null, account.nonce.length === 0 ? Buffer.from([0]) : account.nonce);\n  });\n};\n\nBlockchainDouble.prototype.queueTransaction = function(tx) {\n  this.pending_transactions.push(tx);\n};\n\nBlockchainDouble.prototype.sortByPriceAndNonce = function() {\n  // Sorts transactions like I believe geth does.\n  // See the description of 'SortByPriceAndNonce' at\n  // https://github.com/ethereum/go-ethereum/blob/290e851f57f5d27a1d5f0f7ad784c836e017c337/core/types/transaction.go\n  var self = this;\n  var sortedByNonce = {};\n\n  self.pending_transactions.forEach((tx) => {\n    const from = tx.from.toString(\"hex\");\n    const arr = sortedByNonce[from];\n    if (arr) {\n      arr.push(tx);\n    } else {\n      sortedByNonce[from] = [tx];\n    }\n  });\n\n  var priceSort = function(a, b) {\n    return parseInt(to.hex(b.gasPrice), 16) - parseInt(to.hex(a.gasPrice), 16);\n  };\n  var nonceSort = function(a, b) {\n    return parseInt(to.hex(a.nonce), 16) - parseInt(to.hex(b.nonce), 16);\n  };\n\n  // Now sort each address by nonce\n  Object.keys(sortedByNonce).forEach((address) => {\n    sortedByNonce[address].sort(nonceSort);\n  });\n\n  // Initialise a heap, sorted by price, for the head transaction from each account.\n  var heap = new Heap(priceSort);\n  Object.keys(sortedByNonce).forEach((address) => {\n    heap.push(sortedByNonce[address].shift());\n  });\n\n  // Now reorder our transactions. Compare the next transactions from each account, and choose\n  // the one with the highest gas price.\n  const sortedTransactions = [];\n  while (heap.size() > 0) {\n    const best = heap.pop();\n    let address = best.from.toString(\"hex\");\n    if (sortedByNonce[address].length > 0) {\n      // Push on the next transaction from this account\n      heap.push(sortedByNonce[address].shift());\n    }\n    sortedTransactions.push(best);\n  }\n  self.pending_transactions = sortedTransactions;\n};\n\nBlockchainDouble.prototype.getReadyCall = function(tx, emulateParent, blockNumber, callback) {\n  const readyCall = (tx, err, parentBlock) => {\n    if (err) {\n      return callback(err);\n    }\n    // create a fake block with this fake transaction\n    this.createBlock(parentBlock, emulateParent, (err, newBlock) => {\n      if (err) {\n        return callback(err);\n      }\n\n      newBlock.transactions.push(tx);\n\n      // gas estimates and eth_calls aren't subject to block gas limits\n      newBlock.header.gasLimit = tx.gasLimit;\n\n      const runArgs = {\n        tx: tx,\n        block: newBlock,\n        skipBalance: true,\n        skipNonce: true\n      };\n\n      callback(null, parentBlock.header.stateRoot, runArgs);\n    });\n  };\n  // Delegate block selection\n  if (blockNumber === \"latest\") {\n    this.latestBlock(readyCall.bind(null, tx));\n  } else {\n    this.getBlock(blockNumber, readyCall.bind(null, tx));\n  }\n};\n\nBlockchainDouble.prototype.readyCall = function(tx, emulateParent, blockNumber, callback) {\n  this.getReadyCall(tx, emulateParent, blockNumber, (err, stateRoot, runArgs) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n    const stateTrie = this.createStateTrie(this.data.trie_db, stateRoot);\n    const vm = this.createVMFromStateTrie(stateTrie);\n    callback(null, vm, runArgs);\n  });\n};\n\nBlockchainDouble.prototype.processCall = function(tx, blockNumber, callback) {\n  this.readyCall(tx, true, blockNumber, async(err, vm, runArgs) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    const result = await vm.runTx(runArgs).catch((vmerr) => ({ vmerr }));\n    let vmerr = result.vmerr;\n    // This is a check that has been in there for awhile. I'm unsure if it's required, but it can't hurt.\n    if (vmerr && vmerr instanceof Error === false) {\n      vmerr = new Error(\"VM error: \" + vmerr);\n    }\n\n    // If we're given an error back directly, it's worse than a runtime error. Expose it and get out.\n    if (vmerr) {\n      return callback(vmerr, err);\n    }\n\n    // If no error, check for a runtime error. This can return null if no runtime error.\n    vmerr = RuntimeError.fromResults([tx], { results: [result] });\n\n    callback(vmerr, result);\n  });\n};\n\nBlockchainDouble.prototype.estimateGas = function(tx, blockNumber, callback) {\n  this.getReadyCall(tx, false, blockNumber, (err, stateRoot, runArgs) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n    const generateVM = () => {\n      const stateTrie = this.createStateTrie(this.data.trie_db, stateRoot);\n      return this.createVMFromStateTrie(stateTrie);\n    };\n    estimateGas(generateVM, runArgs, callback);\n  });\n};\n\n/**\n * processBlock\n *\n * Process the passed in block and included transactions\n *\n * @param  {VM} vm             the vm to use when running the block\n * @param  {Block} block       block to process\n * @param  {Boolean} commit    Whether or not changes should be committed to the state\n * trie and the block appended to the end of the chain.\n * @param  {Function} callback Callback function when transaction processing is completed.\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processBlock = async function(vm, block, commit, callback) {\n  var self = this;\n\n  if (typeof commit === \"function\") {\n    callback = commit;\n    commit = true;\n  }\n\n  const results = await vm\n    .runBlock({\n      block: block,\n      generate: true,\n      skipBlockValidation: true\n    })\n    .catch((vmerr) => ({ vmerr }));\n  let vmerr = results.vmerr;\n  // This is a check that has been in there for awhile. I'm unsure if it's required, but it can't hurt.\n  if (vmerr && vmerr instanceof Error === false) {\n    vmerr = new Error(\"VM error: \" + vmerr);\n  }\n\n  // If we're given an error back directly, it's worse than a runtime error. Expose it and get out.\n  if (vmerr) {\n    callback(vmerr);\n    return;\n  }\n  // If no error, check for a runtime error. This can return null if no runtime error.\n  vmerr = RuntimeError.fromResults(block.transactions, results);\n\n  // Note, even if we have an error, some transactions may still have succeeded.\n  // Process their logs if so, returning the error at the end.\n\n  var logs = [];\n  var receipts = [];\n\n  var totalBlockGasUsage = 0;\n\n  results.results.forEach(function(result) {\n    totalBlockGasUsage += to.number(result.gasUsed);\n  });\n\n  block.header.gasUsed = utils.toBuffer(to.hex(totalBlockGasUsage));\n\n  const txTrie = new Trie();\n  const rcptTrie = new Trie();\n  const promises = [];\n  const putInTrie = (trie, key, val) => promisify(trie.put.bind(trie))(key, val);\n\n  for (var v = 0; v < results.receipts.length; v++) {\n    var result = results.results[v];\n    var receipt = results.receipts[v];\n    var tx = block.transactions[v];\n    var txHash = tx.hash();\n    var txLogs = [];\n\n    // Only process the transaction's logs if it didn't error.\n    if (result.execResult.exceptionError === undefined) {\n      for (var i = 0; i < receipt.logs.length; i++) {\n        var receiptLog = receipt.logs[i];\n        var address = to.hex(receiptLog[0]);\n        var topics = [];\n\n        for (var j = 0; j < receiptLog[1].length; j++) {\n          topics.push(to.hex(receiptLog[1][j]));\n        }\n\n        var data = to.hex(receiptLog[2]);\n\n        var log = new Log({\n          logIndex: to.hex(i),\n          transactionIndex: to.hex(v),\n          transactionHash: txHash,\n          block: block,\n          address: address,\n          data: data,\n          topics: topics,\n          type: \"mined\"\n        });\n\n        logs.push(log);\n        txLogs.push(log);\n      }\n    }\n\n    let rcpt = new Receipt(\n      tx,\n      block,\n      txLogs,\n      result.gasUsed.toArrayLike(Buffer),\n      receipt.gasUsed,\n      result.createdAddress,\n      receipt.status,\n      to.hex(receipt.bitvector)\n    );\n    receipts.push(rcpt);\n\n    const rawReceipt = [receipt.status, receipt.gasUsed, receipt.bitvector, receipt.logs];\n    const rcptBuffer = utils.rlp.encode(rawReceipt);\n    const key = utils.rlp.encode(v);\n    promises.push(putInTrie(txTrie, key, tx.serialize()));\n    promises.push(putInTrie(rcptTrie, key, rcptBuffer));\n  }\n  await Promise.all(promises);\n\n  block.header.transactionsTrie = utils.toBuffer(txTrie.root);\n  block.header.receiptTrie = utils.toBuffer(rcptTrie.root);\n\n  if (commit) {\n    // Put that block on the end of the chain\n    self.putBlock(block, logs, receipts, done);\n  } else {\n    done();\n  }\n\n  function done(e) {\n    if (e) {\n      return callback(e);\n    }\n    // Note we return the vm err here too, if it exists.\n    callback(vmerr, block.transactions, results);\n  }\n};\n\n/**\n * processNextBlock\n *\n * Process the next block like a normal blockchain, pulling from the list of\n * pending transactions.\n *\n * @param  {number} timestamp at which the block is mined\n * @param  {Function} callback Callback when transaction processing is finished.\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processNextBlock = function(timestamp, callback) {\n  var self = this;\n\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = undefined;\n  }\n\n  self.sortByPriceAndNonce();\n\n  // Grab only the transactions that can fit within the block\n  var currentTransactions = [];\n  var totalGasLimit = 0;\n  var maxGasLimit = to.number(self.blockGasLimit);\n\n  while (self.pending_transactions.length > 0) {\n    var tx = self.pending_transactions[0];\n    var gasLimit = to.number(tx.gasLimit);\n\n    if (totalGasLimit + gasLimit <= maxGasLimit) {\n      totalGasLimit += gasLimit;\n      self.pending_transactions.shift();\n      currentTransactions.push(tx);\n    } else {\n      // Next one won't fit. Break.\n      break;\n    }\n  }\n\n  // Remember, we ensured transactions had a valid gas limit when they were queued (in the state manager).\n  // If we run into a case where we can't process any because one is higher than the gas limit,\n  // then it's a serious issue. This should never happen, but let's check anyway.\n  if (currentTransactions.length === 0 && self.pending_transactions.length > 0) {\n    // Error like geth.\n    var error = \"Unexpected error condition: next transaction exceeds block gas limit\";\n    return callback(error);\n  }\n\n  // Create a new block meant to be the end of the chain\n  this.createBlock(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    // Overwrite block timestamp\n    if (timestamp) {\n      self.data.blocks.last(function(err, last) {\n        if (err) {\n          // it is safe to ignore this error as we only use the result\n          // to log a warning to the console.\n          return;\n        }\n        if (last && to.number(last.header.timestamp) > timestamp) {\n          self.logger.log(\n            \"Waring: Setting the block timestamp (\" + timestamp + \") that is earlier than the parent block one.\"\n          );\n        }\n      });\n      block.header.timestamp = to.hex(timestamp);\n      self.setTime(new Date(timestamp * 1000));\n    }\n    // Add transactions to the block.\n    Array.prototype.push.apply(block.transactions, currentTransactions);\n\n    self.processBlock(self.vm, block, true, callback);\n  });\n};\n\n/**\n * processTransactionTrace\n *\n * Run a previously-run transaction in the same state in which it occurred at the time it was run.\n * This will return the vm-level trace output for debugging purposes.\n *\n * Strategy:\n *\n *  1. Find block where transaction occurred\n *  2. Set state root of that block\n *  3. Rerun every transaction in that block prior to and including the requested transaction\n *  4. Send trace results back.\n *\n * @param  {[type]}   tx       [description]\n * @param  {Function} callback [description]\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processTransactionTrace = async function(hash, params, callback) {\n  const self = this;\n  const targetHash = to.hex(hash);\n  let txHashCurrentlyProcessing = \"\";\n  let txCurrentlyProcessing = null;\n  let vm;\n\n  let storageStack = {\n    currentDepth: -1,\n    stack: []\n  };\n\n  let returnVal = {\n    gas: 0,\n    returnValue: \"\",\n    structLogs: []\n  };\n\n  function stepListener(event, next) {\n    // See these docs:\n    // https://github.com/ethereum/go-ethereum/wiki/Management-APIs\n\n    const gasLeft = to.number(event.gasLeft);\n    const totalGasUsedAfterThisStep = to.number(txCurrentlyProcessing.gasLimit) - gasLeft;\n    const gasUsedThisStep = totalGasUsedAfterThisStep - returnVal.gas;\n    returnVal.gas += gasUsedThisStep;\n\n    let memory = null;\n    if (!params.disableMemory) {\n      // Get memory and break it up into 32-byte words.\n      // Note we may possibly have to pad the final word.\n      memory = Buffer.from(event.memory).toString(\"hex\");\n      memory = memory.match(/.{1,64}/g) || [];\n\n      if (memory.length > 0) {\n        const lastItem = memory[memory.length - 1];\n        if (lastItem.length < 64) {\n          memory[memory.length - 1] = lastItem + new Array(64 - lastItem.length + 1).join(\"0\");\n        }\n      }\n    }\n\n    let stack = null;\n    if (!params.disableStack) {\n      stack = event.stack.map((item) => {\n        return to.rpcDataHexString(item, 64).replace(\"0x\", \"\"); // non-0x prefixed.\n      });\n    }\n\n    let structLog = {\n      depth: event.depth,\n      error: \"\",\n      gas: gasLeft,\n      gasCost: gasUsedThisStep,\n      memory,\n      op: event.opcode.name,\n      pc: event.pc,\n      stack,\n      storage: null\n    };\n\n    if (params.disableStorage) {\n      returnVal.structLogs.push(structLog);\n      next();\n    } else {\n      structLog = self.processStorageTrace(structLog, storageStack, event, vm, function(err, structLog) {\n        if (err) {\n          return next(err);\n        }\n        returnVal.structLogs.push(structLog);\n        next();\n      });\n    }\n  }\n\n  // #1 - get block via transaction receipt\n  this.getTransactionReceipt(targetHash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!receipt) {\n      return callback(new Error(\"Unknown transaction \" + targetHash));\n    }\n\n    let targetBlock = receipt.block;\n\n    // Get the parent of the target block\n    self.getBlock(targetBlock.header.parentHash, function(err, parent) {\n      if (err) {\n        return callback(err);\n      }\n\n      // #2 - Set state root of original block\n      var stateTrie = self.createStateTrie(self.data.trie_db, parent.header.stateRoot, {\n        // when forking we need to make sure we also copy over the forkBlockNumber,\n        // otherwise some operations will request data from the main chain at the\n        // latest block\n        forkBlockNumber: to.number(parent.header.number)\n      });\n      vm = self.createVMFromStateTrie(stateTrie);\n\n      // Prepare the \"next\" block with necessary transactions\n      self.createBlock(parent, false, function(err, block) {\n        if (err) {\n          return callback(err);\n        }\n\n        // make sure we use the same timestamp as the target block\n        block.header.timestamp = targetBlock.header.timestamp;\n\n        for (var i = 0; i < targetBlock.transactions.length; i++) {\n          var tx = targetBlock.transactions[i];\n          block.transactions.push(tx);\n\n          // After including the target transaction, that's all we need to do.\n          if (to.hex(tx.hash()) === targetHash) {\n            break;\n          }\n        }\n\n        function beforeTxListener(tx) {\n          txCurrentlyProcessing = tx;\n          txHashCurrentlyProcessing = to.hex(tx.hash());\n          if (txHashCurrentlyProcessing === targetHash) {\n            vm.on(\"step\", stepListener);\n          }\n        }\n\n        // afterTxListener cleans up everything.\n        function afterTxListener() {\n          if (txHashCurrentlyProcessing === targetHash) {\n            removeListeners();\n          }\n        }\n\n        function removeListeners() {\n          vm.removeListener(\"step\", stepListener);\n          vm.removeListener(\"beforeTx\", beforeTxListener);\n          vm.removeListener(\"afterTx\", afterTxListener);\n        }\n\n        // Listen to beforeTx and afterTx so we know when our target transaction\n        // is processing. These events will add the event listener for getting the trace data.\n        vm.on(\"beforeTx\", beforeTxListener);\n        vm.on(\"afterTx\", afterTxListener);\n\n        // Don't even let the vm try to flush the block's _cache to the stateTrie.\n        // When forking some of the data that the traced function may request will\n        // exist only on the main chain. Because we pretty much lie to the VM by\n        // telling it we DO have data in our Trie, when we really don't, it gets\n        // lost during the commit phase when it traverses the \"borrowed\" data's\n        // trie (as it may not have a valid root). Because this is a trace, and we\n        // don't need to commit the data, duck punching the `flush` method (the\n        // simplest method I could find) is fine.\n        // Remove this and you may see the infamous\n        // `Uncaught TypeError: Cannot read property 'pop' of undefined` error!\n        vm.stateManager._cache.flush = (cb) => cb();\n\n        // #3 - Process the block without committing the data.\n        self.processBlock(vm, block, false, function(err) {\n          // Ignore runtime errors, or else erroneous transactions can't be traced.\n          if (err && err.message.indexOf(\"VM Exception\") === 0) {\n            err = null;\n          }\n\n          // Just to be safe\n          removeListeners();\n\n          // #4 - send state results back\n          callback(err, returnVal);\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.processStorageTrace = function(structLog, storageStack, event, vm, callback) {\n  var name = event.opcode.name;\n\n  if (storageStack.currentDepth > event.depth) {\n    storageStack.stack.pop();\n  }\n  if (storageStack.currentDepth < event.depth) {\n    storageStack.stack.push({});\n  }\n\n  storageStack.currentDepth = event.depth;\n\n  var key;\n  var value;\n  switch (name) {\n    case \"SSTORE\":\n      {\n        const stack = event.stack;\n        const stackLength = stack.length;\n        key = to.rpcDataHexString(stack[stackLength - 1], 64).replace(\"0x\", \"\");\n        value = to.rpcDataHexString(stack[stackLength - 2], 64).replace(\"0x\", \"\");\n        // use Object.assign to prevent future steps from overwriting this step's storage values\n        structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n\n        callback(null, structLog);\n        // assign after callback because this storage change actually takes\n        // effect _after_ this opcode executes\n        storageStack.stack[storageStack.currentDepth][key] = value;\n      }\n      break;\n    case \"SLOAD\":\n      {\n        const stack = event.stack;\n        // this one's more fun, we need to get the value the contract is loading from current storage\n        key = to.rpcDataHexString(stack[stack.length - 1], 64).replace(\"0x\", \"\");\n\n        vm.stateManager.getContractStorage(event.address, Buffer.from(key, \"hex\"), function(err, result) {\n          if (err) {\n            return callback(err);\n          }\n\n          value = to.rpcDataHexString(result, 64).replace(\"0x\", \"\");\n          storageStack.stack[storageStack.currentDepth][key] = value;\n          // use Object.assign to prevent future steps from overwriting this step's storage values\n          structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n          callback(null, structLog);\n        });\n      }\n      break;\n    default:\n      // use Object.assign to prevent future steps from overwriting this step's storage values\n      structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n      callback(null, structLog);\n  }\n};\n\nBlockchainDouble.prototype.getAccount = function(address, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      // Finally, put the stateRoot back for good\n      trie.root = currentStateRoot;\n\n      if (err) {\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      callback(null, account);\n    });\n  });\n};\n\nBlockchainDouble.prototype.getNonce = function(address, number, callback) {\n  this.getAccount(address, number, function(err, account) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, account.nonce);\n  });\n};\n\nBlockchainDouble.prototype.getBalance = function(address, number, callback) {\n  this.getAccount(address, number, function(err, account) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, account.balance);\n  });\n};\n\n// Note! Storage values are returned RLP encoded!\nBlockchainDouble.prototype.getStorage = function(address, position, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      if (err != null) {\n        // Put the stateRoot back if there's an error\n        trie.root = currentStateRoot;\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      trie.root = account.stateRoot;\n\n      trie.get(utils.setLengthLeft(utils.toBuffer(position), 32), function(err, value) {\n        // Finally, put the stateRoot back for good\n        trie.root = currentStateRoot;\n\n        if (err != null) {\n          return callback(err);\n        }\n\n        callback(null, value);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.getCode = function(address, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      if (err != null) {\n        // Put the stateRoot back if there's an error\n        trie.root = currentStateRoot;\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      account.getCode(trie, function(err, code) {\n        // Finally, put the stateRoot back for good\n        trie.root = currentStateRoot;\n\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, code);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.getTransaction = function(hash, callback) {\n  hash = to.hex(hash);\n\n  this.data.transactions.get(hash, function(err, tx) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n    callback(null, tx);\n  });\n};\n\nBlockchainDouble.prototype.getTransactionReceipt = function(hash, callback) {\n  hash = to.hex(hash);\n  const pendingTxs = this.pending_transactions;\n\n  for (var i = 0; i < pendingTxs.length; i++) {\n    let pendingTxHash = to.hex(pendingTxs[i].hash());\n    if (hash === pendingTxHash) {\n      return callback(null, { tx: pendingTxs[i] });\n    }\n  }\n\n  this.data.transactionReceipts.get(hash, function(err, receipt) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(err, receipt);\n  });\n};\n\nBlockchainDouble.prototype.getBlockLogs = function(number, callback) {\n  var self = this;\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    self.data.blockLogs.get(effective, callback);\n  });\n};\n\nBlockchainDouble.prototype.getHeight = function(callback) {\n  this.data.blocks.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, length - 1);\n  });\n};\n\nBlockchainDouble.prototype.currentTime = function() {\n  return ((new Date().getTime() / 1000) | 0) + this.timeAdjustment;\n};\n\nBlockchainDouble.prototype.increaseTime = function(seconds) {\n  if (seconds < 0) {\n    seconds = 0;\n  }\n  this.timeAdjustment += seconds;\n  return this.timeAdjustment;\n};\n\nBlockchainDouble.prototype.setTime = function(date) {\n  var now = (new Date().getTime() / 1000) | 0;\n  var start = (date.getTime() / 1000) | 0;\n  this.timeAdjustment = start - now;\n};\n\nBlockchainDouble.prototype.setBlockNumber = function (number) {\n  var that = this;\n  if (number === undefined) {\n    that.blockNumberAdjustment = 0;\n    return;\n  }\n\n  this.data.blocks.last((err, maybeBlock) => {\n    if (maybeBlock === null) {\n      that.blockNumberAdjustment = number;\n    } else {\n      that.blockNumberAdjustment = number - to.number(maybeBlock.header.number);\n    }\n  });\n};\n\nBlockchainDouble.prototype.close = function (callback) {\n  this.data.close(callback);\n};\n\nmodule.exports = BlockchainDouble;\n","module.exports = require(\"merkle-patricia-tree\");","module.exports = require(\"fs\");","// var to = require(\"../utils/to\");\nvar Transaction = require(\"../utils/transaction\");\nvar Common = require(\"ethereumjs-common\").default;\nvar ethUtil = require(\"ethereumjs-util\");\n\nconst decode = function(json, done) {\n  const options = {\n    hash: json.hash,\n    nonce: json.nonce,\n    value: json.value,\n    to: json.to,\n    from: json.from,\n    gasLimit: json.gas || json.gasLimit,\n    gasPrice: json.gasPrice,\n    data: json.data,\n    v: json.v,\n    r: json.r,\n    s: json.s\n  };\n\n  const sigV = ethUtil.bufferToInt(options.v);\n  let chainId = Math.floor((sigV - 35) / 2);\n  if (chainId < 0) {\n    chainId = 0;\n  }\n\n  const commonOptions = {\n    name: \"ganache\",\n    chainId: 1,\n    networkId: 1,\n    comment: \"Local test network\"\n  };\n\n  let hardfork = \"istanbul\";\n  if (json._options) {\n    hardfork = json._options.hardfork;\n    commonOptions.chainId = json._options.chainId;\n    commonOptions.networkId = json._options.networkId;\n  }\n\n  const common = Common.forCustomChain(\n    \"mainnet\", // TODO needs to match chain id\n    commonOptions,\n    hardfork\n  );\n  // databases generated before ganache-core@2.3.2 didn't have a `_type` and\n  // and were always fake signed. So if _type is undefined it is \"fake\" (even\n  // if we have a valid signature that can generate the tx's `from`).\n  const type = json._type === undefined ? Transaction.types.fake : json._type;\n  const tx = Transaction.fromJSON(options, type, common);\n\n  // Commenting this out because we don't want to throw if the json.hash we\n  // put in is different that the tx.hash() calculation we now have. There\n  // may have been bug fixes to the way transactions are hashed in future\n  // versions of ganache-core, but we still want tobe able to read in\n  // transactions from previously saved databases!\n  // if (to.hex(tx.hash()) !== json.hash) {\n  //   const e = new Error(\n  //     \"DB consistency check: Decoded transaction hash \" +\n  //       \"didn't match encoded hash. Expected: \" +\n  //       json.hash +\n  //       \"; actual: \" +\n  //       to.hex(tx.hash())\n  //   );\n  //   return done(e);\n  // }\n\n  done(null, tx);\n};\n\nconst encode = function(tx, done) {\n  const encoded = tx.encode();\n  done(null, encoded);\n};\n\nmodule.exports = {\n  encode,\n  decode\n};\n","module.exports = require(\"web3-core-helpers\");","module.exports = require(\"web3-core-method\");","module.exports = require(\"web3-net\");","module.exports = require(\"web3-eth-personal\");","var inherits = require(\"util\").inherits;\n\n// raised when the transaction is rejected prior to running it in the EVM.\nfunction TXRejectedError(message) {\n  // Why not just Error.apply(this, [message])? See\n  // https://gist.github.com/justmoon/15511f92e5216fa2624b#anti-patterns\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n}\n\ninherits(TXRejectedError, Error);\n\nmodule.exports = TXRejectedError;\n","var to = require(\"./to\");\n\nmodule.exports = {\n  toJSON: function(block, includeFullTransactions) {\n    return {\n      number: to.rpcQuantityHexString(block.header.number),\n      hash: to.hex(block.hash()),\n      parentHash: to.hex(block.header.parentHash), // common.hash\n      mixHash: to.hex(block.header.mixHash),\n      nonce: to.rpcDataHexString(to.hex(block.header.nonce), 16),\n      sha3Uncles: to.hex(block.header.uncleHash),\n      logsBloom: to.hex(block.header.bloom),\n      transactionsRoot: to.hex(block.header.transactionsTrie),\n      stateRoot: to.hex(block.header.stateRoot),\n      receiptsRoot: to.hex(block.header.receiptTrie),\n      miner: to.hex(block.header.coinbase),\n      difficulty: to.rpcQuantityHexString(block.header.difficulty),\n      totalDifficulty: to.rpcQuantityHexString(block.header.difficulty), // TODO: Figure out what to do here.\n      extraData: to.rpcDataHexString(block.header.extraData),\n      size: to.hex(1000), // TODO: Do something better here\n      gasLimit: to.rpcQuantityHexString(block.header.gasLimit),\n      gasUsed: to.rpcQuantityHexString(block.header.gasUsed),\n      timestamp: to.rpcQuantityHexString(block.header.timestamp),\n      transactions: block.transactions.map(function(tx) {\n        if (includeFullTransactions) {\n          return tx.toJsonRpc(block);\n        } else {\n          return to.hex(tx.hash());\n        }\n      }),\n      uncles: [] // block.uncleHeaders.map(function(uncleHash) {return to.hex(uncleHash)})\n    };\n  }\n};\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nconst Provider = require(\"./lib/provider\");\nconst Server = require(\"./lib/server\");\n\n// This interface exists so as not to cause breaking changes.\nmodule.exports = {\n  server: function(options) {\n    return Server.create(options);\n  },\n  provider: function(options) {\n    return new Provider(options);\n  },\n  _webpacked: true\n};\n","module.exports = require(\"web3-provider-engine\");","module.exports = require(\"web3-provider-engine/subproviders/subscriptions\");","var Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\n\ninherits(RequestFunnel, Subprovider);\n\nmodule.exports = RequestFunnel;\n\n// See if any payloads for the specified methods are marked as external.\n// If they are external, and match the method list, process them one at\n// a time.\nfunction RequestFunnel() {\n  // We use an object here for O(1) lookups (speed).\n  this.methods = {\n    eth_call: true,\n    eth_getStorageAt: true,\n    eth_sendTransaction: true,\n    eth_sendRawTransaction: true,\n\n    // Ensure block filter and filter changes are process one at a time\n    // as well so filter requests that come in after a transaction get\n    // processed once that transaction has finished processing.\n    eth_newBlockFilter: true,\n    eth_getFilterChanges: true,\n    eth_getFilterLogs: true\n  };\n  this.queue = [];\n  this.isWorking = false;\n}\n\nRequestFunnel.prototype.handleRequest = function(payload, next, end) {\n  if (payload.external !== true || this.methods[payload.method] !== true) {\n    return next();\n  }\n\n  this.queue.push([payload, next]);\n\n  if (this.isWorking === false) {\n    this.processNext();\n  }\n};\n\nRequestFunnel.prototype.processNext = function() {\n  var self = this;\n\n  if (this.queue.length === 0) {\n    this.isWorking = false;\n    return;\n  }\n\n  this.isWorking = true;\n\n  var item = this.queue.shift();\n  var next = item[1];\n\n  next(function(error, request, cb) {\n    if (error) {\n      return cb(error);\n    }\n    cb();\n    self.processNext();\n  });\n};\n","// It's unforutnate we have to have this subprovider, but it's because\n// we instamine, and web3 isn't written in a way that supports instamining\n// (i.e., it sets up the filter after the transaction has been processed).\n// This block filter will ensure that each block filter will always see\n// the change from the last block to the current block.\n//\n// Note: An added benefit of this is that it shaves off a signifcant\n// amount of time from tests that use web3 and block filters.\n\nvar Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\nvar async = require(\"async\");\nvar to = require(\"../utils/to\");\n\ninherits(DelayedBlockFilter, Subprovider);\n\nmodule.exports = DelayedBlockFilter;\n\nfunction DelayedBlockFilter() {\n  this.watching = {};\n}\n\nDelayedBlockFilter.prototype.handleRequest = function(payload, next, end) {\n  if (payload.method === \"eth_newBlockFilter\") {\n    return this.handleNewBlockFilter(payload, next, end);\n  }\n  if (payload.method === \"eth_getFilterChanges\") {\n    return this.handleGetFilterChanges(payload, next, end);\n  }\n\n  next();\n};\n\nDelayedBlockFilter.prototype.handleNewBlockFilter = function(payload, next, end) {\n  var self = this;\n\n  // Let this filter process and add it to our watch list.\n  next(function(err, result, cb) {\n    if (err) {\n      return cb();\n    }\n    self.watching[result] = true;\n    cb();\n  });\n};\n\nDelayedBlockFilter.prototype.handleGetFilterChanges = function(payload, next, end) {\n  var self = this;\n  var filterId = payload.params[0];\n\n  if (!this.watching[filterId]) {\n    return next();\n  }\n\n  // Get the changes, and then alter the result.\n  next(function(err, result, cb) {\n    if (err) {\n      return cb();\n    }\n\n    var currentBlockHash;\n    var previousBlockHash;\n    var blockNumber;\n\n    async.series(\n      [\n        function(c) {\n          // If we have a result, use it.\n          if (result.length !== 0) {\n            currentBlockHash = result[0];\n            c();\n          } else {\n            // Otherwise, get the current block number.\n            self.emitPayload(\n              {\n                method: \"eth_blockNumber\"\n              },\n              function(err, res) {\n                if (err) {\n                  return c(err);\n                }\n                blockNumber = to.number(res.result);\n                c();\n              }\n            );\n          }\n        },\n        function(c) {\n          // If we got a block number above, meaning, we didn't get a block hash,\n          // skip this step.\n          if (blockNumber) {\n            return c();\n          }\n\n          // If not skipped, then we got a block hash, and we need to get a block number from it.\n          self.emitPayload(\n            {\n              method: \"eth_getBlockByHash\",\n              params: [currentBlockHash, false]\n            },\n            function(err, res) {\n              if (err) {\n                return c(err);\n              }\n              blockNumber = to.number(res.result.number);\n              c();\n            }\n          );\n        },\n        function(c) {\n          // If we're at block 0, return no changes. See final function below.\n          blockNumber = to.number(blockNumber);\n          if (blockNumber === 0) {\n            previousBlockHash = undefined;\n            return c();\n          }\n\n          // If at this point, we do have a block number, so let's subtract one\n          // from it and get the block hash of the block before it.\n          blockNumber = blockNumber - 1;\n          self.emitPayload(\n            {\n              method: \"eth_getBlockByNumber\",\n              params: [blockNumber, false]\n            },\n            function(err, res) {\n              if (err) {\n                return c(err);\n              }\n              previousBlockHash = res.result.hash;\n              c();\n            }\n          );\n        }\n      ],\n      function(err) {\n        if (err) {\n          // Unfortunately the subprovider code doesn't let us return an error\n          // through the callback cb(). So we'll just ignore it.... (famous last words).\n        }\n\n        // If we got the previous block, use it. Otherwise do nothing.\n        // Then stop watching because we only want on getFilterChanges to react this way.\n        if (previousBlockHash) {\n          result[0] = previousBlockHash;\n        }\n\n        delete self.watching[filterId];\n        cb();\n      }\n    );\n  });\n};\n","var Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\n\ninherits(GethDefaults, Subprovider);\n\nmodule.exports = GethDefaults;\n\nfunction GethDefaults() {}\n\n// Massage eth_estimateGas requests, setting default data (e.g., from) if\n// not specified. This is here specifically to make the testrpc\n// react like Geth.\nGethDefaults.prototype.handleRequest = function(payload, next, end) {\n  if (payload.method !== \"eth_estimateGas\" && payload.method !== \"eth_call\") {\n    return next();\n  }\n\n  var params = payload.params[0];\n\n  if (params.from == null) {\n    this.emitPayload(\n      {\n        method: \"eth_coinbase\"\n      },\n      function(err, result) {\n        if (err) {\n          return end(err);\n        }\n\n        var coinbase = result.result;\n\n        params.from = coinbase;\n        next();\n      }\n    );\n  } else {\n    next();\n  }\n};\n","var utils = require(\"ethereumjs-util\");\nvar inherits = require(\"util\").inherits;\nvar StateManager = require(\"../statemanager.js\");\nvar to = require(\"../utils/to\");\nvar TXRejectedError = require(\"../utils/txrejectederror\");\n\nvar blockHelper = require(\"../utils/block_helper\");\nvar pkg = require(\"../../package.json\");\nconst { BlockOutOfRangeError } = require(\"../utils/errorhelper\");\n\nvar Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\n\nconst maxSafeInt = \"0x\" + Number.MAX_SAFE_INTEGER.toString(16);\n\ninherits(GethApiDouble, Subprovider);\n\nfunction GethApiDouble(options, provider) {\n  var self = this;\n\n  this.state = options.state || new StateManager(options, provider);\n  this.options = options;\n  this.initialized = false;\n\n  this.initialization_error = null;\n  this.post_initialization_callbacks = [];\n\n  this.state.initialize(function(err) {\n    if (err) {\n      self.initialization_error = err;\n    }\n    self.initialized = true;\n\n    var callbacks = self.post_initialization_callbacks;\n    self.post_initialization_callbacks = [];\n\n    callbacks.forEach(function(callback) {\n      setImmediate(function() {\n        callback(self.initialization_error, self.state);\n      });\n    });\n  });\n}\n\nGethApiDouble.prototype.waitForInitialization = function(callback) {\n  var self = this;\n  if (self.initialized === false) {\n    self.post_initialization_callbacks.push(callback);\n  } else {\n    callback(self.initialization_error, self.state);\n  }\n};\n\n// Function to not pass methods through until initialization is finished\nGethApiDouble.prototype.handleRequest = function(payload, next, end) {\n  var self = this;\n\n  if (self.initialization_error != null) {\n    return end(self.initialization_error);\n  }\n\n  if (self.initialized === false) {\n    self.waitForInitialization(self.getDelayedHandler(payload, next, end));\n    return;\n  }\n\n  var method = self[payload.method];\n\n  if (method == null) {\n    return end(new Error(\"Method \" + payload.method + \" not supported.\"));\n  }\n\n  var params = payload.params || [];\n  var args = [].concat(params);\n\n  var addedBlockParam = false;\n\n  if (self.requiresDefaultBlockParameter(payload.method) && args.length < method.length - 1) {\n    args.push(\"latest\");\n    addedBlockParam = true;\n  }\n\n  args.push(end);\n\n  // avoid crash by checking to make sure that we haven't specified too many arguments\n  if (\n    args.length > method.length ||\n    (method.minLength !== undefined && args.length < method.minLength) ||\n    (method.minLength === undefined && args.length < method.length)\n  ) {\n    var errorMessage = `Incorrect number of arguments. Method '${payload.method}' requires `;\n    if (method.minLength) {\n      errorMessage += `between ${method.minLength - 1} and ${method.length - 1} arguments. `;\n    } else {\n      errorMessage += `exactly ${method.length - 1} arguments. `;\n    }\n\n    if (addedBlockParam) {\n      errorMessage += \"Including the implicit block argument, r\";\n    } else {\n      // new sentence, capitalize it.\n      errorMessage += \"R\";\n    }\n    errorMessage += `equest specified ${args.length - 1} arguments: ${JSON.stringify(args)}.`;\n\n    return end(new Error(errorMessage));\n  }\n\n  method.apply(self, args);\n};\n\nGethApiDouble.prototype.getDelayedHandler = function(payload, next, end) {\n  var self = this;\n  return function(err, state) {\n    if (err) {\n      end(err);\n    }\n    self.handleRequest(payload, next, end);\n  };\n};\n\nGethApiDouble.prototype.requiresDefaultBlockParameter = function(method) {\n  // object for O(1) lookup.\n  var methods = {\n    eth_getBalance: true,\n    eth_getCode: true,\n    eth_getTransactionCount: true,\n    eth_getStorageAt: true,\n    eth_call: true,\n    eth_estimateGas: true\n  };\n\n  return methods[method] === true;\n};\n\n// Handle individual requests.\n\nGethApiDouble.prototype.eth_accounts = function(callback) {\n  callback(null, Object.keys(this.state.accounts));\n};\n\nGethApiDouble.prototype.eth_blockNumber = function(callback) {\n  this.state.blockNumber(function(err, result) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, to.hex(result));\n  });\n};\n\nGethApiDouble.prototype.eth_chainId = function(callback) {\n  callback(null, to.hex(1337));\n};\n\nGethApiDouble.prototype.eth_coinbase = function(callback) {\n  callback(null, this.state.coinbase);\n};\n\nGethApiDouble.prototype.eth_mining = function(callback) {\n  callback(null, this.state.is_mining);\n};\n\nGethApiDouble.prototype.eth_hashrate = function(callback) {\n  callback(null, \"0x0\");\n};\n\nGethApiDouble.prototype.eth_gasPrice = function(callback) {\n  callback(null, utils.addHexPrefix(this.state.gasPrice()));\n};\n\nGethApiDouble.prototype.eth_getBalance = function(address, blockNumber, callback) {\n  this.state.getBalance(address, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getCode = function(address, blockNumber, callback) {\n  this.state.getCode(address, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getBlockByNumber = function(blockNumber, includeFullTransactions, callback) {\n  this.state.blockchain.getBlock(blockNumber, function(err, block) {\n    if (err) {\n      if (err instanceof BlockOutOfRangeError) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(null, blockHelper.toJSON(block, includeFullTransactions));\n  });\n};\n\nGethApiDouble.prototype.eth_getBlockByHash = function(txHash, includeFullTransactions, callback) {\n  this.eth_getBlockByNumber.apply(this, arguments);\n};\n\nGethApiDouble.prototype.eth_getBlockTransactionCountByNumber = function(blockNumber, callback) {\n  this.state.blockchain.getBlock(blockNumber, function(err, block) {\n    if (err) {\n      if (err instanceof BlockOutOfRangeError) {\n        // block doesn't exist\n        return callback(null, null);\n      }\n      return callback(err);\n    }\n    callback(null, to.rpcQuantityHexString(block.transactions.length));\n  });\n};\n\nGethApiDouble.prototype.eth_getBlockTransactionCountByHash = function(blockHash, callback) {\n  this.eth_getBlockTransactionCountByNumber.apply(this, arguments);\n};\n\nGethApiDouble.prototype.eth_getTransactionReceipt = function(hash, callback) {\n  this.state.getTransactionReceipt(hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    var result = null;\n\n    if (receipt && receipt.block) {\n      result = receipt.toJSON();\n    }\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByHash = function(hash, callback) {\n  this.state.getTransactionReceipt(hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    var result = null;\n\n    if (receipt) {\n      // if there is no block then the transaction is still pending\n      if (!receipt.block) {\n        // assemble the block object with null values for pending transactions\n        receipt.block = {\n          transactions: [],\n          hash: () => {\n            return null;\n          },\n          header: { number: null }\n        };\n\n        result = receipt.tx.toJsonRpc(receipt.block);\n      } else {\n        result = receipt.tx.toJsonRpc(receipt.block);\n      }\n    }\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByBlockHashAndIndex = function(hashOrNumber, index, callback) {\n  index = to.number(index);\n\n  this.state.getBlock(hashOrNumber, function(err, block) {\n    if (err) {\n      // block doesn't exist by that hash\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    if (index >= block.transactions.length) {\n      return callback(new Error(\"Transaction at index \" + to.hex(index) + \" does not exist in block.\"));\n    }\n\n    var tx = block.transactions[index];\n    var result = tx.toJsonRpc(block);\n\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByBlockNumberAndIndex = function(hashOrNumber, index, callback) {\n  this.eth_getTransactionByBlockHashAndIndex(hashOrNumber, index, callback);\n};\n\nGethApiDouble.prototype.eth_getTransactionCount = function(address, blockNumber, callback) {\n  this.state.getTransactionCount(address, blockNumber, (err, count) => {\n    if (err instanceof BlockOutOfRangeError) {\n      return callback(null, null);\n    }\n    return callback(err, count);\n  });\n};\n\nGethApiDouble.prototype.eth_sign = function(address, dataToSign, callback) {\n  var result;\n  var error;\n\n  try {\n    result = this.state.sign(address, dataToSign);\n  } catch (e) {\n    error = e;\n  }\n\n  callback(error, result);\n};\n\nGethApiDouble.prototype.eth_signTypedData = function(address, typedDataToSign, callback) {\n  var result;\n  var error;\n\n  try {\n    result = this.state.signTypedData(address, typedDataToSign);\n  } catch (e) {\n    error = e;\n  }\n\n  callback(error, result);\n};\n\nGethApiDouble.prototype.eth_sendTransaction = function(txData, callback) {\n  this.state.queueTransaction(\"eth_sendTransaction\", txData, null, callback);\n};\n\nGethApiDouble.prototype.eth_sendRawTransaction = function(rawTx, callback) {\n  let data;\n  if (rawTx) {\n    data = to.buffer(rawTx);\n  }\n\n  if (data === undefined) {\n    throw new TXRejectedError(\"rawTx must be a string, JSON-encoded Buffer, or Buffer.\");\n  }\n\n  this.state.queueRawTransaction(data, callback);\n};\n\nGethApiDouble.prototype._setCallGasLimit = function(txData) {\n  // if the caller didn't specify a gas limit make sure we set one\n  if (!txData.gas && !txData.gasLimit) {\n    const globalCallGasLimit = this.options.callGasLimit;\n    if (globalCallGasLimit != null) {\n      // if the user configured a global `callGasLimit` use it\n      txData.gas = globalCallGasLimit;\n    } else {\n      // otherwise, set a very high gas limit. We'd use Infinity, or some VM flag to ignore gasLimit checks like\n      // geth does, but the VM doesn't currently support that for `runTx`.\n      // https://github.com/ethereumjs/ethereumjs-vm/blob/4bbb6e394a344717890d618a6be1cf67b8e5b74d/lib/runTx.ts#L71\n      txData.gas = maxSafeInt;\n    }\n  }\n};\nGethApiDouble.prototype.eth_call = function(txData, blockNumber, callback) {\n  this._setCallGasLimit(txData);\n  this.state.queueTransaction(\"eth_call\", txData, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_estimateGas = function(txData, blockNumber, callback) {\n  this._setCallGasLimit(txData);\n  this.state.queueTransaction(\"eth_estimateGas\", txData, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getStorageAt = function(address, position, blockNumber, callback) {\n  this.state.queueStorage(address, position, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_newBlockFilter = function(callback) {\n  var filterId = utils.addHexPrefix(utils.intToHex(this.state.latestFilterId));\n  this.state.latestFilterId += 1;\n  callback(null, filterId);\n};\n\nGethApiDouble.prototype.eth_getFilterChanges = function(filterId, callback) {\n  var blockHash = this.state\n    .latestBlock()\n    .hash()\n    .toString(\"hex\");\n  // Mine a block after each request to getFilterChanges so block filters work.\n  this.state.mine();\n  callback(null, [blockHash]);\n};\n\nGethApiDouble.prototype.eth_getLogs = function(filter, callback) {\n  this.state.getLogs(filter, callback);\n};\n\nGethApiDouble.prototype.eth_uninstallFilter = function(filterId, callback) {\n  callback(null, true);\n};\n\nGethApiDouble.prototype.eth_protocolVersion = function(callback) {\n  callback(null, \"63\");\n};\n\nGethApiDouble.prototype.bzz_hive = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.bzz_info = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.shh_version = function(callback) {\n  callback(null, \"2\");\n};\n\nGethApiDouble.prototype.eth_getCompilers = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.eth_syncing = function(callback) {\n  callback(null, false);\n};\n\nGethApiDouble.prototype.net_listening = function(callback) {\n  callback(null, true);\n};\n\nGethApiDouble.prototype.net_peerCount = function(callback) {\n  callback(null, 0);\n};\n\nGethApiDouble.prototype.web3_clientVersion = function(callback) {\n  callback(null, \"EthereumJS TestRPC/v\" + pkg.version + \"/ethereum-js\");\n};\n\nGethApiDouble.prototype.web3_sha3 = function(string, callback) {\n  callback(null, to.hex(utils.keccak256(string)));\n};\n\nGethApiDouble.prototype.net_version = function(callback) {\n  // net_version returns a string containing a base 10 integer.\n  callback(null, this.state.net_version + \"\");\n};\n\nGethApiDouble.prototype.miner_start = function(threads, callback) {\n  if (!callback && typeof threads === \"function\") {\n    callback = threads;\n    threads = null;\n  }\n\n  this.state.startMining(function(err) {\n    callback(err, true);\n  });\n};\n\n// indicate that `miner_start` only requires one argument (the callback)\nGethApiDouble.prototype.miner_start.minLength = 1;\n\nGethApiDouble.prototype.miner_stop = function(callback) {\n  this.state.stopMining(function(err) {\n    callback(err, true);\n  });\n};\n\nGethApiDouble.prototype.rpc_modules = function(callback) {\n  // returns the availible api modules and versions\n  callback(null, { eth: \"1.0\", net: \"1.0\", rpc: \"1.0\", web3: \"1.0\", evm: \"1.0\", personal: \"1.0\" });\n};\n\nGethApiDouble.prototype.personal_listAccounts = function(callback) {\n  callback(null, Object.keys(this.state.personal_accounts));\n};\n\nGethApiDouble.prototype.personal_newAccount = function(password, callback) {\n  var account = this.state.createAccount({ generate: true });\n  this.state.accounts[account.address.toLowerCase()] = account;\n  this.state.personal_accounts[account.address.toLowerCase()] = true;\n  this.state.account_passwords[account.address.toLowerCase()] = password;\n  callback(null, account.address);\n};\n\nGethApiDouble.prototype.personal_importRawKey = function(rawKey, password, callback) {\n  var account = this.state.createAccount({ secretKey: rawKey });\n  this.state.accounts[account.address.toLowerCase()] = account;\n  this.state.personal_accounts[account.address.toLowerCase()] = true;\n  this.state.account_passwords[account.address.toLowerCase()] = password;\n  callback(null, account.address);\n};\n\nGethApiDouble.prototype.personal_lockAccount = function(address, callback) {\n  var account = this.state.personal_accounts[address.toLowerCase()];\n  if (account !== true) {\n    var error = \"Account not found\";\n    return callback(error);\n  }\n  delete this.state.unlocked_accounts[address.toLowerCase()];\n  callback(null, true);\n};\n\nGethApiDouble.prototype.personal_unlockAccount = function(address, password, duration, callback) {\n  // FIXME handle duration\n  var account = this.state.personal_accounts[address.toLowerCase()];\n  if (account !== true) {\n    var accountError = \"Account not found\";\n    return callback(accountError);\n  }\n\n  var storedPassword = this.state.account_passwords[address.toLowerCase()];\n  if (storedPassword !== undefined && storedPassword !== password) {\n    var passwordError = \"Invalid password\";\n    return callback(passwordError);\n  }\n\n  this.state.unlocked_accounts[address.toLowerCase()] = true;\n  callback(null, true);\n};\n\nGethApiDouble.prototype.personal_sendTransaction = function(txData, password, callback) {\n  if (txData.from == null) {\n    var error = \"Sender not found\";\n    callback(error);\n    return;\n  }\n\n  var from = utils.addHexPrefix(txData.from).toLowerCase();\n\n  var self = this;\n  self.personal_unlockAccount(from, password, null, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.state.queueTransaction(\"eth_sendTransaction\", txData, null, function(err, ret) {\n      self.state.unlocked_accounts[from.toLowerCase()] = false;\n      callback(err, ret);\n    });\n  });\n};\n\n/* Functions for testing purposes only. */\n\nGethApiDouble.prototype.evm_snapshot = function(callback) {\n  this.state.snapshot(callback);\n};\n\nGethApiDouble.prototype.evm_revert = function(snapshotId, callback) {\n  this.state.revert(snapshotId, callback);\n};\n\nGethApiDouble.prototype.evm_increaseTime = function(seconds, callback) {\n  callback(null, this.state.blockchain.increaseTime(seconds));\n};\n\nGethApiDouble.prototype.evm_setTime = function(date, callback) {\n  callback(null, this.state.blockchain.setTime(date));\n};\n\n\nGethApiDouble.prototype.evm_mineBlockNumber = function (number, callback) {\n  var self = this;\n  this.state.blockchain.setBlockNumber(number)\n  this.state.processBlock(undefined, function (err) {\n    if (err) {\n      return callback(err);\n    }\n    self.state.blockchain.setBlockNumber(undefined)\n    callback(err, \"0x0\");\n  });\n}\n\nGethApiDouble.prototype.evm_mine = function (timestamp, callback) {\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = undefined;\n  }\n  this.state.processBlock(timestamp, function(err) {\n    if (err) {\n      return callback(err);\n    }\n    callback(err, \"0x0\");\n  });\n};\n\n// indicate that `evm_mine` only requires one argument (the callback)\nGethApiDouble.prototype.evm_mine.minLength = 1;\n\nGethApiDouble.prototype.debug_traceTransaction = function(txHash, params, callback) {\n  if (typeof params === \"function\") {\n    callback = params;\n    params = [];\n  }\n\n  this.state.queueTransactionTrace(txHash, params, callback);\n};\n\n/*\n  RPC AUDIT:\n  TODO ETH: eth_getUncleCountByBlockHash, eth_getUncleCountByBlockNumber, eth_getUncleByBlockHashAndIndex,\n        eth_getUncleByBlockNumberAndIndex, eth_getWork, eth_submitWork, eth_submitHashrate\n\n  TODO DB: db_putString, db_getString, db_putHex, db_getHex\n\n  TODO WHISPER: shh_post, shh_newIdentity, shh_hasIdentity, shh_newGroup, shh_addToGroup,\n        shh_newFilter, shh_uninstallFilter, shh_getFilterChanges, shh_getMessages\n*/\n\n/**\n * Returns the number of uncles in a block from a block matching the given block hash.\n *\n * @param {DATA, 32 Bytes} hash - hash of a block.\n * @callback callback\n * @param {error} err - Error Object\n * @param {QUANTITY} result - integer of the number of uncles in this block.\n */\nGethApiDouble.prototype.eth_getUncleCountByBlockHash = function(hash, callback) {\n  callback(null, \"0x0\");\n};\n\n/**\n * Returns the number of uncles in a block from a block matching the given block number.\n *\n * @param {QUANTITY} blockNumber -\n *  ^integer of a block number, or the string \"latest\", \"earliest\" or \"pending\". Ex: '0xe8', // 232\n * @callback callback\n * @param {error} err - Error Object\n * @param {QUANTITY} result - integer of the number of uncles in this block.\n */\nGethApiDouble.prototype.eth_getUncleCountByBlockNumber = function(blockNumber, callback) {\n  callback(null, \"0x0\");\n};\n\n/**\n * Returns information about a uncle of a block by hash and uncle index position.\n *\n * @param {DATA, 32 Bytes} hash - hash of a block\n * @param {QUANTITY} index - the uncle's index position.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Object} result - A block object,\n */\nGethApiDouble.prototype.eth_getUncleByBlockHashAndIndex = function(hash, index, callback) {\n  callback(null, {});\n};\n\n/**\n * Returns information about a uncle of a block by number and uncle index position.\n *\n * @param {QUANTITY} blockNumber -\n * ^a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the default block parameter.\n * @param {QUANTITY} uncleIndex - the uncle's index position.\n * @callback callback\n * @param {error} err - Error object\n * @param {Object} resutl - A block object,\n */\nGethApiDouble.prototype.eth_getUncleByBlockNumberAndIndex = function(blockNumber, uncleIndex, callback) {\n  callback(null, {});\n};\n\n/**\n * Returns: An Array with the following elements\n * 1: DATA, 32 Bytes - current block header pow-hash\n * 2: DATA, 32 Bytes - the seed hash used for the DAG.\n * 3: DATA, 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty.\n *\n * @param {QUANTITY} filterId - A filter id\n * @callback callback\n * @param {error} err - Error object\n * @param {Array} result - the hash of the current block, the seedHash, and the boundary condition to be met (\"target\").\n */\nGethApiDouble.prototype.eth_getWork = function(filterId, callback) {\n  callback(null, []);\n};\n\n/**\n * Used for submitting a proof-of-work solution\n *\n * @param {DATA, 8 Bytes} nonce - The nonce found (64 bits)\n * @param {DATA, 32 Bytes} powHash - The header's pow-hash (256 bits)\n * @param {DATA, 32 Bytes} digest - The mix digest (256 bits)\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if the provided solution is valid, otherwise false.\n */\nGethApiDouble.prototype.eth_submitWork = function(nonce, powHash, digest, callback) {\n  callback(null, false);\n};\n\n/**\n * Used for submitting mining hashrate.\n *\n * @param {String} hashRate - a hexadecimal string representation (32 bytes) of the hash rate\n * @param {String} clientID - A random hexadecimal(32 bytes) ID identifying the client\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if submitting went through succesfully and false otherwise.\n */\nGethApiDouble.prototype.eth_submitHashrate = function(hashRate, clientID, callback) {\n  callback(null, false);\n};\n\n/**\n * Stores a string in the local database.\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @param {String} value - String to store.\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if the value was stored, otherwise false.\n */\nGethApiDouble.prototype.db_putString = function(dbName, key, value, callback) {\n  callback(null, false);\n};\n\n/**\n * Returns string from the local database\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @callback callback\n * @param {error} - Error Object\n * @param {String} result - The previously stored string.\n */\nGethApiDouble.prototype.db_getString = function(dbName, key, callback) {\n  callback(null, \"\");\n};\n\n/**\n * Stores binary data in the local database.\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @param {DATA} data - Data to store.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the value was stored, otherwise false.\n */\nGethApiDouble.prototype.db_putHex = function(dbName, key, data, callback) {\n  callback(null, false);\n};\n\n/**\n * Returns binary data from the local database\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA} result - The previously stored data.\n */\nGethApiDouble.prototype.db_getHex = function(dbName, key, callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Sends a whisper message.\n *\n * @param {DATA, 60 Bytes} from - (optional) The identity of the sender.\n * @param {DATA, 60 Bytes} to -\n *  ^(optional) The identity of the receiver. When present whisper will encrypt the message so that\n *  only the receiver can decrypt it.\n * @param {Array of DATA} topics - Array of DATA topics, for the receiver to identify messages.\n * @param {DATA} payload - The payload of the message.\n * @param {QUANTITY} priority - The integer of the priority in a range from ... (?).\n * @param {QUANTITY} ttl - integer of the time to live in seconds.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the message was sent, otherwise false.\n */\nGethApiDouble.prototype.shh_post = function(from, to, topics, payload, priority, ttl, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates new whisper identity in the client.\n *\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA, 60 Bytes} result - the address of the new identiy.\n */\nGethApiDouble.prototype.shh_newIdentity = function(callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Checks if the client hold the private keys for a given identity.\n *\n * @param {DATA, 60 Bytes} address - The identity address to check.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the client holds the privatekey for that identity, otherwise false.\n */\nGethApiDouble.prototype.shh_hasIdentity = function(address, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates a new group.\n *\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA, 60 Bytes} result - the address of the new group.\n */\nGethApiDouble.prototype.shh_newGroup = function(callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Adds a whisper identity to the group\n *\n * @param {DATA, 60 Bytes} - The identity address to add to a group.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the identity was successfully added to the group, otherwise false.\n */\nGethApiDouble.prototype.shh_addToGroup = function(address, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates filter to notify, when client receives whisper message matching the filter options.\n *\n * @param {DATA, 60 Bytes} to -\n * ^(optional) Identity of the receiver. When present it will try to decrypt any incoming message\n *  if the client holds the private key to this identity.\n * @param {Array of DATA} topics - Array of DATA topics which the incoming message's topics should match.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the identity was successfully added to the group, otherwise false.\n */\nGethApiDouble.prototype.shh_newFilter = function(to, topics, callback) {\n  callback(null, false);\n};\n\n/**\n * Uninstalls a filter with given id. Should always be called when watch is no longer needed.\n * Additonally Filters timeout when they aren't requested with shh_getFilterChanges for a period of time.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - true if the filter was successfully uninstalled, otherwise false.\n */\nGethApiDouble.prototype.shh_uninstallFilter = function(id, callback) {\n  callback(null, false);\n};\n\n/**\n * Polling method for whisper filters. Returns new messages since the last call of this method.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Array} result - More Info: https://github.com/ethereum/wiki/wiki/JSON-RPC#shh_getfilterchanges\n */\nGethApiDouble.prototype.shh_getFilterChanges = function(id, callback) {\n  callback(null, []);\n};\n\n/**\n * Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Array} result - See: shh_getFilterChanges\n */\nGethApiDouble.prototype.shh_getMessages = function(id, callback) {\n  callback(null, false);\n};\n\nmodule.exports = GethApiDouble;\n","var Account = require(\"ethereumjs-account\").default;\nvar RuntimeError = require(\"./utils/runtimeerror\");\nvar Transaction = require(\"./utils/transaction\");\nvar utils = require(\"ethereumjs-util\");\nvar seedrandom = require(\"seedrandom\");\nvar bip39 = require(\"bip39\");\nvar wallet = require(\"ethereumjs-wallet\");\nvar hdkey = require(\"ethereumjs-wallet/hdkey\");\nvar async = require(\"async\");\nvar BlockchainDouble = require(\"./blockchain_double.js\");\nvar ForkedBlockchain = require(\"./utils/forkedblockchain.js\");\nvar Web3 = require(\"web3\");\nvar fs = require(\"fs\");\nvar sigUtil = require(\"eth-sig-util\");\nvar _ = require(\"lodash\");\nconst { BlockOutOfRangeError } = require(\"./utils/errorhelper\");\nconst BN = utils.BN;\n\nconst ZERO_BUFFER = Buffer.from([0]);\n\nvar to = require(\"./utils/to\");\nvar random = require(\"./utils/random\");\nvar TXRejectedError = require(\"./utils/txrejectederror\");\n\nfunction StateManager(options, provider) {\n  this.options = options = this._applyDefaultOptions(options || {});\n\n  if (options.fork) {\n    this.blockchain = new ForkedBlockchain(options);\n  } else {\n    this.blockchain = new BlockchainDouble(options);\n  }\n\n  this.vm = this.blockchain.vm;\n  this.stateTrie = this.blockchain.stateTrie;\n\n  this.accounts = {};\n  this.secure = !!options.secure;\n  this.account_passwords = {};\n  this.personal_accounts = {};\n  this.total_accounts = options.total_accounts;\n  this.coinbase = null;\n\n  this.latest_filter_id = 1;\n\n  // This queue manages actions that shouldn't be run in parallel.\n  // The action_processing flag ensures new actions are queued instead of\n  // run immediately.\n  this.action_queue = [];\n  this.action_processing = false;\n\n  this.snapshots = [];\n  this.logger = options.logger;\n  this.net_version = options.network_id;\n  this.mnemonic = options.mnemonic;\n  this.wallet = hdkey.fromMasterSeed(bip39.mnemonicToSeed(this.mnemonic));\n  this.wallet_hdpath = options.hdPath;\n\n  this.gasPriceVal = to.rpcQuantityHexString(options.gasPrice);\n\n  this.is_mining = true;\n  this.blockTime = options.blockTime;\n  this.is_mining_on_interval = !!options.blockTime;\n  this.mining_interval_timeout = null;\n\n  this._provider = provider;\n}\n\nconst defaultOptions = {\n  total_accounts: 10,\n  gasPrice: \"0x77359400\", // 2 gwei\n  default_balance_ether: 100,\n  unlocked_accounts: [],\n  hdPath: \"m/44'/60'/0'/0/\"\n};\n\nStateManager.prototype._applyDefaultOptions = function(options) {\n  // do this so that we can use the same seed on our next run and get the same\n  // results without explicitly setting a seed up front\n  if (!options.seed) {\n    options.seed = random.randomAlphaNumericString(10, seedrandom());\n  }\n\n  // generate a randomized default mnemonic\n  if (!options.mnemonic) {\n    let randomBytes = random.randomBytes(16, seedrandom(options.seed));\n    options.mnemonic = bip39.entropyToMnemonic(randomBytes.toString(\"hex\"));\n  }\n\n  if (!options.fork && !options.network_id) {\n    options.network_id = new Date().getTime();\n  }\n\n  // We want this function to mutate the options object so that we can report\n  // our settings back to our consumer application (e.g., ganache)\n  return _.merge(options, defaultOptions, Object.assign({}, options));\n};\n\nStateManager.prototype.initialize = function(callback) {\n  var self = this;\n\n  var accounts = [];\n\n  let defaultBalanceWei = to.hex(Web3.utils.toWei(self.options.default_balance_ether.toString(), \"ether\"));\n\n  if (self.options.accounts) {\n    accounts = self.options.accounts.map(self.createAccount.bind(self));\n  } else {\n    if (!self.total_accounts) {\n      return callback(\n        new Error(\"Cannot initialize chain: either options.accounts or options.total_accounts must be specified\")\n      );\n    }\n\n    for (var i = 0; i < self.total_accounts; i++) {\n      accounts.push(\n        self.createAccount({\n          index: i,\n          balance: defaultBalanceWei\n        })\n      );\n    }\n  }\n\n  self.coinbase = to.hex(accounts[0].address);\n  self.accounts = {};\n\n  accounts.forEach(function(data) {\n    self.accounts[data.address] = data;\n    self.personal_accounts[data.address.toLowerCase()] = true;\n  });\n\n  // Turn array into object, mostly for speed purposes.\n  // No need for caller to specify private keys.\n  self.unlocked_accounts = self.options.unlocked_accounts.reduce(function(obj, address) {\n    // If it doesn't have a hex prefix, must be a number (either a string or number type).\n    if ((address + \"\").indexOf(\"0x\") !== 0) {\n      let idx = parseInt(address);\n      let account = accounts[idx];\n      if (!account) {\n        throw new Error(`Account at index ${idx} not found. Max index available is ${accounts.length - 1}.`);\n      }\n      address = account.address.toLowerCase();\n    }\n\n    obj[address.toLowerCase()] = true; // can be any value\n    return obj;\n  }, {});\n\n  if (!self.secure) {\n    accounts.forEach(function(data) {\n      self.unlocked_accounts[data.address.toLowerCase()] = data;\n    });\n  }\n\n  if (self.options.account_keys_path) {\n    const fileData = {\n      addresses: {},\n      private_keys: {}\n    };\n    accounts.forEach(function(account) {\n      fileData.private_keys[account.address] = account.secretKey.toString(\"hex\");\n      fileData.addresses[account.address] = account;\n    });\n    const json = JSON.stringify(fileData);\n    fs.writeFileSync(self.options.account_keys_path, json, \"utf8\");\n  }\n\n  self.blockchain.initialize(accounts, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    // If the user didn't pass a specific version id in, then use the\n    // forked blockchain's version (if it exists) or create our own.\n    if (!self.net_version) {\n      self.net_version = self.blockchain.forkVersion;\n    }\n\n    if (self.is_mining_on_interval) {\n      self.mineOnInterval();\n    }\n    callback();\n  });\n};\n\nStateManager.prototype._minerCancellationToken = null;\nStateManager.prototype.mineOnInterval = function() {\n  // cancel the a previous miner's timeout\n  clearTimeout(this.mining_interval_timeout);\n\n  // make sure a pending eth_mine doesn't come back and execute mineOnInterval\n  // again...\n  if (this._minerCancellationToken !== null) {\n    this._minerCancellationToken.cancelled = true;\n  }\n\n  // if mining was stopped `mineOnInterval` shouldn't start mining again\n  if (!this.is_mining) {\n    this.logger.log(\"Warning: mineOnInterval called when miner was stopped\");\n    return;\n  }\n\n  const cancellationToken = { cancelled: false };\n  this._minerCancellationToken = cancellationToken;\n\n  const timeout = (this.mining_interval_timeout = setTimeout(\n    this._provider.send.bind(this._provider),\n    this.blockTime * 1000,\n    { method: \"evm_mine\" },\n    () => {\n      if (!cancellationToken.cancelled) {\n        this.mineOnInterval.bind(this)();\n      }\n    }\n  ));\n\n  // Ensure this won't keep a node process open.\n  if (typeof timeout.unref === \"function\") {\n    timeout.unref();\n  }\n};\n\nStateManager.prototype.createAccount = function(opts, i) {\n  var secretKey;\n\n  if (opts.generate) {\n    secretKey = wallet.generate().getPrivateKey();\n  } else if (opts.secretKey) {\n    secretKey = utils.toBuffer(to.hex(opts.secretKey));\n  } else {\n    var index = typeof opts.index === \"undefined\" ? i : opts.index;\n    var acct = this.wallet.derivePath(this.wallet_hdpath + index); // index is a number\n    secretKey = acct.getWallet().getPrivateKey(); // Buffer\n  }\n\n  var publicKey = utils.privateToPublic(secretKey);\n  var address = utils.publicToAddress(publicKey);\n\n  var account = new Account();\n\n  account.balance = to.hex(opts.balance);\n\n  var data = {\n    secretKey: secretKey,\n    publicKey: publicKey,\n    address: to.hex(address).toLowerCase(),\n    account: account\n  };\n\n  return data;\n};\n\nStateManager.prototype.blockNumber = function(callback) {\n  return this.blockchain.getHeight(callback);\n};\n\nStateManager.prototype.gasPrice = function() {\n  return this.gasPriceVal;\n};\n\nStateManager.prototype.getBalance = function(address, number, callback) {\n  this.blockchain.getBalance(address, number, function(err, balance) {\n    if (balance) {\n      balance = to.rpcQuantityHexString(balance);\n    }\n    callback(err, balance);\n  });\n};\n\nStateManager.prototype.getTransactionCount = function(address, number, callback) {\n  this.blockchain.getNonce(address, number, function(err, nonce) {\n    if (nonce) {\n      nonce = to.rpcQuantityHexString(nonce);\n    }\n    callback(err, nonce);\n  });\n};\n\nStateManager.prototype.getCode = function(address, number, callback) {\n  this.blockchain.getCode(address, number, function(err, code) {\n    if (code) {\n      code = to.hex(code);\n    }\n    callback(err, code);\n  });\n};\n\nStateManager.prototype.queueRawTransaction = function(data, callback) {\n  const tx = new Transaction(data, Transaction.types.signed, this.blockchain.vm.opts.common);\n  // use toLowerCase() to properly handle from addresses meant to be validated.\n  const from = to.hex(tx.from).toLowerCase();\n  this._queueTransaction(\"eth_sendRawTransaction\", tx, from, null, callback);\n};\n\nStateManager.prototype.queueStorage = function(address, position, block, callback) {\n  this.action_queue.push({\n    method: \"eth_getStorageAt\",\n    address: utils.addHexPrefix(address),\n    position: utils.addHexPrefix(position),\n    block: block,\n    callback: callback\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.queueTransaction = function(method, txJsonRpc, blockNumber, callback) {\n  // use toLowerCase() to properly handle from addresses meant to be validated.\n  const from = txJsonRpc.from ? to.hex(txJsonRpc.from).toLowerCase() : null;\n\n  if (from == null) {\n    callback(new TXRejectedError(\"from not found; is required\"));\n    return;\n  }\n\n  // Error checks. It's possible to JSON.stringify a Buffer to JSON.\n  // we actually now handle this \"properly\" (not sure about spec), but for\n  // legacy reasons we don't allow it.\n  if (txJsonRpc.to && typeof txJsonRpc.to !== \"string\") {\n    return callback(new TXRejectedError(\"Invalid to address\"));\n  }\n\n  const isKnownAccount = this.accounts.hasOwnProperty(from);\n\n  if (method === \"eth_sendTransaction\" && !this.unlocked_accounts.hasOwnProperty(from)) {\n    const msg = isKnownAccount ? \"signer account is locked\" : \"sender account not recognized\";\n    return callback(new TXRejectedError(msg));\n  }\n\n  let type = Transaction.types.none;\n  if (!isKnownAccount || method === \"eth_call\" || method === \"eth_estimateGas\") {\n    type |= Transaction.types.fake;\n  }\n\n  let tx;\n  try {\n    tx = Transaction.fromJSON(txJsonRpc, type, this.blockchain.vm.opts.common);\n    this._setTransactionDefaults(tx, method === \"eth_sendTransaction\");\n  } catch (e) {\n    callback(e);\n    return;\n  }\n  this._queueTransaction(method, tx, from, blockNumber, callback);\n};\n\nStateManager.prototype._setTransactionDefaults = function(tx, isTransaction) {\n  if (isTransaction && tx.gasLimit.length === 0) {\n    tx.gasLimit = utils.toBuffer(this.blockchain.defaultTransactionGasLimit);\n  }\n\n  if (tx.gasPrice.length === 0) {\n    tx.gasPrice = utils.toBuffer(this.gasPriceVal);\n  }\n\n  if (tx.value.length === 0) {\n    tx.value = Buffer.from([0]);\n  }\n\n  if (tx.to.length === 0 || tx.to.equals(ZERO_BUFFER)) {\n    tx.to = Buffer.allocUnsafe(0);\n  }\n};\n\nStateManager.prototype._queueTransaction = function(method, tx, from, blockNumber, callback) {\n  if (!(tx instanceof Transaction)) {\n    throw new TXRejectedError(\"tx must be of type Transaction\");\n  }\n\n  // If the transaction has a higher gas limit than the block gas limit, error.\n  if (\n    (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") &&\n    to.number(tx.gasLimit) > to.number(this.blockchain.blockGasLimit)\n  ) {\n    return callback(new TXRejectedError(\"Exceeds block gas limit\"));\n  }\n\n  this.action_queue.push({\n    method,\n    from,\n    tx,\n    callback,\n    blockNumber\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.queueTransactionTrace = function(txHash, params, callback) {\n  this.action_queue.push({\n    method: \"debug_traceTransaction\",\n    hash: to.hex(txHash),\n    params: params,\n    callback: callback\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.processNextAction = function(override) {\n  var self = this;\n\n  if (override !== true) {\n    if (this.action_processing === true || this.action_queue.length === 0) {\n      return;\n    }\n  }\n\n  var queued = this.action_queue.shift();\n\n  // Set the flag that we're currently processing something.\n  this.action_processing = true;\n\n  var intermediary = function(err, result) {\n    queued.callback(err, result);\n\n    if (self.action_queue.length > 0) {\n      self.processNextAction(true);\n    } else {\n      self.action_processing = false;\n    }\n  };\n\n  if (typeof queued.method === \"function\") {\n    var result = queued.method();\n    return intermediary(null, result);\n  } else if (queued.method === \"eth_getStorageAt\") {\n    this.blockchain.getStorage(queued.address, queued.position, queued.block, function(err, result) {\n      if (err) {\n        return intermediary(err);\n      }\n\n      if (result) {\n        result = utils.rlp.decode(result);\n      }\n\n      result = to.hex(result || 0);\n      intermediary(null, result);\n    });\n  } else if (queued.method === \"debug_traceTransaction\") {\n    this.blockchain.processTransactionTrace(queued.hash, queued.params, intermediary);\n  } else if (queued.method === \"eth_sendTransaction\" || queued.method === \"eth_sendRawTransaction\") {\n    this.processTransaction(queued.from, queued.tx, intermediary);\n  } else if (queued.method === \"eth_call\") {\n    this.processCall(queued.from, queued.tx, queued.blockNumber, intermediary);\n  } else if (queued.method === \"eth_estimateGas\") {\n    this.processGasEstimate(queued.from, queued.tx, queued.blockNumber, intermediary);\n  }\n};\n\nStateManager.prototype.sign = function(address, dataToSign) {\n  var account = this.accounts[to.hex(address).toLowerCase()];\n\n  if (!account) {\n    throw new Error(\"cannot sign data; no private key\");\n  }\n\n  var secretKey = account.secretKey;\n  var msg = to.buffer(dataToSign, \"hex\");\n  var msgHash = utils.hashPersonalMessage(msg);\n  var sgn = utils.ecsign(msgHash, Buffer.from(secretKey));\n  // ethereumjs-utils changed the behavior of toRpcSig so that the `v` value\n  // output by `toRpcSig` is always `sgn.v - 27` (basically `0` or `1`). In\n  // order to avoid a breaking change in Ganache at this time we are calculating\n  // a chain ID that will always a) validate the v, and b) generate an output v\n  // of `0` or `1`, like it used to.\n  const v = sgn.v - 27;\n  const chainId = (v - 35) / 2;\n  return utils.toRpcSig(v, sgn.r, sgn.s, chainId);\n};\n\nStateManager.prototype.signTypedData = function(address, typedDataToSign) {\n  var account = this.accounts[to.hex(address).toLowerCase()];\n  if (!account) {\n    throw new Error(\"cannot sign data; no private key\");\n  }\n\n  if (!typedDataToSign.types) {\n    throw new Error(\"cannot sign data; types missing\");\n  }\n\n  if (!typedDataToSign.types.EIP712Domain) {\n    throw new Error(\"cannot sign data; EIP712Domain definition missing\");\n  }\n\n  if (!typedDataToSign.domain) {\n    throw new Error(\"cannot sign data; domain missing\");\n  }\n\n  if (!typedDataToSign.primaryType) {\n    throw new Error(\"cannot sign data; primaryType missing\");\n  }\n\n  if (!typedDataToSign.message) {\n    throw new Error(\"cannot sign data; message missing\");\n  }\n\n  return sigUtil.signTypedData_v4(account.secretKey, { data: typedDataToSign });\n};\n\nStateManager.prototype.printTransactionReceipt = function(txHash, error, callback) {\n  var self = this;\n\n  self.blockchain.getTransactionReceipt(txHash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.latestBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      receipt = receipt.toJSON();\n\n      self.logger.log(\"\");\n      self.logger.log(\"  Transaction: \" + txHash);\n\n      if (receipt.contractAddress != null) {\n        self.logger.log(\"  Contract created: \" + receipt.contractAddress);\n      }\n\n      self.logger.log(\"  Gas usage: \" + parseInt(receipt.gasUsed, 16));\n      self.logger.log(\"  Block Number: \" + parseInt(receipt.blockNumber, 16));\n      self.logger.log(\"  Block Time: \" + new Date(to.number(block.header.timestamp) * 1000).toString());\n\n      if (error) {\n        self.logger.log(\"  Runtime Error: \" + error.error);\n        if (error.reason) {\n          self.logger.log(\"  Revert reason: \" + error.reason);\n        }\n      }\n\n      self.logger.log(\"\");\n\n      callback(null, txHash);\n    });\n  });\n};\n\nStateManager.prototype.processBlock = function(timestamp, callback) {\n  var self = this;\n\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = null;\n  }\n\n  self.blockchain.processNextBlock(timestamp, function(runtimeError, transactions, vmOutput) {\n    if (runtimeError && runtimeError instanceof RuntimeError === false) {\n      // This is bad. Get out.\n      return callback(runtimeError, transactions, vmOutput);\n    }\n\n    // TODO: Can we refactor printTransactionReceipt so it's synchronous?\n    // We technically have the raw vm receipts (though they're not full receipts here...).\n    async.eachSeries(\n      transactions,\n      function(tx, finishedPrinting) {\n        var hash = to.hex(tx.hash());\n        var error = runtimeError == null ? { results: {} } : runtimeError;\n        self.printTransactionReceipt(hash, error.results[hash], finishedPrinting);\n      },\n      callback(runtimeError, transactions, vmOutput)\n    );\n  });\n};\n\nStateManager.prototype.processBlocks = function(totalBlocks, callback) {\n  var self = this;\n\n  if (typeof totalBlocks === \"function\") {\n    callback = totalBlocks;\n    totalBlocks = null;\n  }\n\n  // Note: VM errors (errors that the VM directly returns) trump all runtime errors.\n  var runtimeError = null;\n  var amountProcessed = 0;\n\n  async.whilst(\n    function() {\n      var shouldContinue;\n\n      if (totalBlocks == null) {\n        shouldContinue = self.blockchain.pending_transactions.length > 0;\n      } else {\n        shouldContinue = amountProcessed < totalBlocks;\n      }\n\n      return shouldContinue;\n    },\n    function(done) {\n      self.processBlock(function(err, transactions, vmOutput) {\n        amountProcessed += 1;\n\n        if (err) {\n          if (err instanceof RuntimeError === false) {\n            // This is bad. Get out.\n            return done(err);\n          }\n\n          // We must have a RuntimeError. Merge results if we've found\n          // other runtime errors during this execution.\n          if (runtimeError == null) {\n            runtimeError = err;\n          } else {\n            runtimeError.combine(err);\n          }\n        }\n\n        // Note we don't quit on runtime errors. We keep processing transactions.\n        done();\n      });\n    },\n    function(err) {\n      // Remember: vm errors trump runtime errors\n      callback(err || runtimeError);\n    }\n  );\n};\n\nStateManager.prototype.processCall = function(from, tx, blockNumber, callback) {\n  var self = this;\n\n  function next(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.processCall(tx, blockNumber, function(err, results) {\n      if (err) {\n        if (err instanceof BlockOutOfRangeError) {\n          // block doesn't exist\n          return callback(null, null);\n        }\n        return callback(err);\n      }\n\n      var result = \"0x\";\n      if (!results.error && results.execResult.returnValue) {\n        result = to.hex(results.execResult.returnValue);\n      } else if (results.error) {\n        self.logger.log(`Error processing call: ${results.error}`);\n      }\n\n      return callback(null, result);\n    });\n  }\n\n  // `eth_call` should never need to validate an existing nonce\n  if (tx.nonce.length === 0) {\n    self.createTransactionWithCorrectNonce(tx, from, next);\n  } else {\n    next(null, tx);\n  }\n};\n\nStateManager.prototype.processGasEstimate = function(from, tx, blockNumber, callback) {\n  var self = this;\n\n  function next(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.estimateGas(tx, blockNumber, function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n      var result = \"0x\";\n      if (!results.error) {\n        result = to.hex(results.gasEstimate);\n      } else {\n        self.logger.log(`Error calculating gas estimate: ${results.error}`);\n      }\n      return callback(null, result);\n    });\n  }\n\n  // `eth_estimateGas` should never need to validate an existing nonce\n  if (tx.nonce.length === 0) {\n    self.createTransactionWithCorrectNonce(tx, from, next);\n  } else {\n    next(null, tx);\n  }\n};\n\nStateManager.prototype.processTransaction = function(from, tx, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(tx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.queueTransaction(tx);\n\n    var txHash = to.hex(tx.hash());\n\n    // If we're not currently mining or we're mining on an interval,\n    // only queue the transaction, don't process it.\n    if (self.is_mining === false || self.is_mining_on_interval) {\n      return callback(null, txHash);\n    }\n\n    self.processBlocks(function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, txHash);\n    });\n  });\n};\n\nStateManager.prototype.getTransactionReceipt = function(hash, callback) {\n  this.blockchain.getTransactionReceipt(hash, function(err, receipt) {\n    if (err && err.notFound) {\n      // Return null if the receipt's not found.\n      return callback(null, null);\n    }\n    callback(err, receipt);\n  });\n};\n\nStateManager.prototype.getBlock = function(hashOrNumber, callback) {\n  this.blockchain.getBlock(hashOrNumber, callback);\n};\n\nStateManager.prototype.getLogs = function(filter, callback) {\n  var self = this;\n\n  // filter.address may be a single address or an array\n  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getlogs\n  var expectedAddress = filter.address && (Array.isArray(filter.address) ? filter.address : [filter.address]);\n  expectedAddress =\n    expectedAddress &&\n    expectedAddress.map(function(a) {\n      return a.toLowerCase();\n    });\n  var expectedTopics = filter.topics || [];\n\n  async.parallel(\n    {\n      fromBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, filter.fromBlock || \"latest\"),\n      toBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, filter.toBlock || \"latest\"),\n      latestBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, \"latest\")\n    },\n    function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n      var fromBlock = results.fromBlock;\n      var toBlock = results.toBlock;\n      var latestBlock = results.latestBlock;\n\n      if (toBlock > latestBlock) {\n        toBlock = latestBlock;\n      }\n\n      var logs = [];\n      var current = fromBlock;\n\n      async.whilst(\n        function() {\n          return current <= toBlock;\n        },\n        function(finished) {\n          self.blockchain.getBlockLogs(current, function(err, blockLogs) {\n            if (err) {\n              return finished(err);\n            }\n\n            // Filter logs that match the address\n            var filtered = !expectedAddress\n              ? blockLogs\n              : blockLogs.filter(function(log) {\n                return expectedAddress.indexOf(log.address.toLowerCase()) > -1;\n              });\n\n            // Now filter based on topics.\n            filtered = filtered.filter(function(log) {\n              var keep = true;\n              for (var i = 0; i < expectedTopics.length; i++) {\n                var expectedTopic = expectedTopics[i];\n                var logTopic = log.topics[i];\n                if (expectedTopic == null) {\n                  continue;\n                }\n                var isMatch = Array.isArray(expectedTopic)\n                  ? expectedTopic.includes(logTopic)\n                  : expectedTopic === logTopic;\n                if (i >= log.topics.length || !isMatch) {\n                  keep = false;\n                  break;\n                }\n              }\n              return keep;\n            });\n\n            logs.push.apply(logs, filtered);\n\n            current += 1;\n            finished();\n          });\n        },\n        function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          logs = logs.map(function(log) {\n            return log.toJSON();\n          });\n\n          callback(err, logs);\n        }\n      );\n    }\n  );\n};\n\n// Note: Snapshots have 1-based ids.\nStateManager.prototype.snapshot = function(callback) {\n  var self = this;\n\n  this.blockchain.getHeight(function(err, blockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.snapshots.push({\n      blockNumber: blockNumber,\n      timeAdjustment: self.blockchain.timeAdjustment\n    });\n\n    self.logger.log(\"Saved snapshot #\" + self.snapshots.length);\n\n    callback(null, to.hex(self.snapshots.length));\n  });\n};\n\nStateManager.prototype.revert = function(snapshotId, callback) {\n  var self = this;\n\n  if (snapshotId === null || snapshotId === undefined) {\n    callback(new Error(\"invalid snapshotId\"));\n    return;\n  }\n  // Convert from hex.\n  try {\n    snapshotId = utils.bufferToInt(snapshotId);\n  } catch (e) {\n    callback(e);\n    return;\n  }\n\n  this.logger.log(\"Reverting to snapshot #\" + snapshotId);\n\n  if (snapshotId > this.snapshots.length || snapshotId <= 0) {\n    // the snapshot doesn't exist now, or it has already been reverted\n    callback(null, false);\n    return false;\n  }\n\n  // Convert to zero based.\n  snapshotId = snapshotId - 1;\n  var timeAdjustment = this.snapshots[snapshotId].timeAdjustment;\n\n  // Loop through each snapshot with a higher id than the current one.\n  async.whilst(\n    function() {\n      return self.snapshots.length > snapshotId;\n    },\n    function(nextSnapshot) {\n      var snapshot = self.snapshots.pop();\n\n      // For each snapshot, asynchronously pop off the blocks it represents.\n      async.during(\n        function(doneWithTest) {\n          self.blockchain.getHeight(function(err, blockNumber) {\n            if (err) {\n              return doneWithTest(err);\n            }\n\n            doneWithTest(null, blockNumber > snapshot.blockNumber);\n          });\n        },\n        function(nextBlock) {\n          self.blockchain.popBlock(function(err) {\n            if (err) {\n              return nextBlock(err);\n            }\n            nextBlock();\n          });\n        },\n        nextSnapshot\n      );\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Pending transactions are removed when you revert.\n      self.blockchain.clearPendingTransactions();\n      // The time adjustment is restored to its prior state\n      self.blockchain.timeAdjustment = timeAdjustment;\n\n      callback(null, true);\n    }\n  );\n};\n\nStateManager.prototype.hasContractCode = function(address, callback) {\n  this.vm.stateManager.getContractCode(address, function(err, result) {\n    if (err != null) {\n      callback(err, false);\n    } else {\n      callback(null, true);\n    }\n  });\n};\n\nStateManager.prototype.startMining = function(callback) {\n  if (this.is_mining) {\n    process.nextTick(callback);\n    this.logger.log(\"Warning: startMining called when miner was already started\");\n    return;\n  }\n\n  this.is_mining = true;\n\n  if (this.is_mining_on_interval) {\n    this.mineOnInterval();\n    process.nextTick(callback);\n  } else {\n    this.processBlocks(callback);\n  }\n};\n\nStateManager.prototype.stopMining = function(callback) {\n  if (this.is_mining) {\n    if (this._minerCancellationToken) {\n      this._minerCancellationToken.cancelled = true;\n      this._minerCancellationToken = null;\n    }\n    this.is_mining = false;\n    clearTimeout(this.mining_interval_timeout);\n    this.mining_interval_timeout = null;\n  } else {\n    this.logger.log(\"Warning: stopMining called when miner was already stopped\");\n  }\n  callback && process.nextTick(callback);\n};\n\nStateManager.prototype.isUnlocked = function(address) {\n  return this.unlocked_accounts[address.toLowerCase()] != null;\n};\n\nStateManager.prototype.createTransactionWithCorrectNonce = function(tx, from, callback) {\n  // account for transactions waiting in the tx queue\n  this.blockchain.getQueuedNonce(from, (err, expectedNonce) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const validateNonce = (tx, expectedNonce) => {\n      if (tx.validateNonce(expectedNonce)) {\n        return Promise.resolve(tx);\n      } else {\n        const expected = new BN(expectedNonce).toString(10);\n        const actual = new BN(tx.nonce).toString(10);\n        return Promise.reject(\n          new TXRejectedError(\n            `the tx doesn't have the correct nonce. account has nonce of: ${expected} tx has nonce of: ${actual}`\n          )\n        );\n      }\n    };\n    const done = (tx) => callback(null, tx);\n\n    if (tx.isSigned()) {\n      validateNonce(tx, expectedNonce)\n        .then(done)\n        .catch(callback);\n    } else {\n      const sign = (tx) => {\n        // we need to sign transactions if they haven't been signed already\n        // but we never sign fake transactions\n        if (!tx.isFake() && !tx.isSigned()) {\n          const account = this.accounts[from];\n          if (account) {\n            tx.sign(account.secretKey);\n          }\n        }\n        return Promise.resolve(tx);\n      };\n\n      // Validate the tx's nonce and then sign the transaction.\n      // By signing this transaction now we ensure all future calls to tx.hash()\n      // return the same signed transaction hash. It's sort of an unintuitive\n      // quirk of etheremjs-tx that:\n      //   tx.hash(includeSignature);\n      //   tx.sign(secretKey);\n      //   tx.hash(includeSignature);\n      // will produce different hashes.\n      if (tx.nonce.length === 0) {\n        // Since this transaction is unsigned and the nonce was not defined\n        // we can go ahead and change the nonce and not worry about\n        // invalidating the tx hash the client may be expecting (automatic nonce\n        // calculation should have been expected by the client in this case).\n        tx.nonce = expectedNonce;\n        sign(tx).then(done);\n      } else {\n        validateNonce(tx, expectedNonce)\n          .then(sign)\n          .then(done)\n          .catch(callback);\n      }\n    }\n  });\n};\nmodule.exports = StateManager;\n","module.exports = require(\"ethereumjs-abi\");","module.exports = require(\"assert\");","module.exports = require(\"seedrandom\");","module.exports = require(\"bip39\");","module.exports = require(\"safe-buffer\");","module.exports = require(\"randombytes\");","module.exports = require(\"scrypt.js\");","module.exports = require(\"uuid/v4\");","module.exports = require(\"bs58check\");","'use strict';\n\nvar HDKey = require('hdkey');\nvar Wallet = require('./index.js');\n\nfunction EthereumHDKey() {}\n\n/*\n * Horrible wrapping.\n */\nfunction fromHDKey(hdkey) {\n  var ret = new EthereumHDKey();\n  ret._hdkey = hdkey;\n  return ret;\n}\n\nEthereumHDKey.fromMasterSeed = function (seedBuffer) {\n  return fromHDKey(HDKey.fromMasterSeed(seedBuffer));\n};\n\nEthereumHDKey.fromExtendedKey = function (base58key) {\n  return fromHDKey(HDKey.fromExtendedKey(base58key));\n};\n\nEthereumHDKey.prototype.privateExtendedKey = function () {\n  if (!this._hdkey.privateExtendedKey) {\n    throw new Error('This is a public key only wallet');\n  }\n  return this._hdkey.privateExtendedKey;\n};\n\nEthereumHDKey.prototype.publicExtendedKey = function () {\n  return this._hdkey.publicExtendedKey;\n};\n\nEthereumHDKey.prototype.derivePath = function (path) {\n  return fromHDKey(this._hdkey.derive(path));\n};\n\nEthereumHDKey.prototype.deriveChild = function (index) {\n  return fromHDKey(this._hdkey.deriveChild(index));\n};\n\nEthereumHDKey.prototype.getWallet = function () {\n  if (this._hdkey._privateKey) {\n    return Wallet.fromPrivateKey(this._hdkey._privateKey);\n  } else {\n    return Wallet.fromPublicKey(this._hdkey._publicKey, true);\n  }\n};\n\nmodule.exports = EthereumHDKey;","module.exports = require(\"hdkey\");","module.exports = require(\"ethereumjs-vm\");","module.exports = require(\"heap\");","var LevelUpArrayAdapter = require(\"./database/leveluparrayadapter\");\nvar LevelUpObjectAdapter = require(\"./database/levelupobjectadapter\");\nvar levelup = require(\"levelup\");\nvar encode = require(\"encoding-down\");\nvar filedown = require(\"./database/filedown\");\nvar cachedown = require(\"cachedown\");\nvar txserializer = require(\"./database/txserializer\");\nvar blockserializer = require(\"./database/blockserializer\");\nvar bufferserializer = require(\"./database/bufferserializer\");\nvar BlockLogsSerializer = require(\"./database/blocklogsserializer\");\nvar ReceiptSerializer = require(\"./database/receiptserializer\");\nvar tmp = require(\"tmp\");\n\nfunction Database(options) {\n  this.options = options;\n  this.directory = null;\n}\n\nDatabase.prototype.initialize = function(callback) {\n  var self = this;\n\n  function getDir(cb) {\n    if (self.options.db_path) {\n      cb(null, self.options.db_path);\n    } else {\n      tmp.dir(cb);\n    }\n  }\n\n  getDir(function(err, directory) {\n    if (err) {\n      return callback(err);\n    }\n    const levelupOptions = { valueEncoding: \"json\" };\n    if (self.options.db) {\n      const store = self.options.db;\n      levelup(store, levelupOptions, finishInitializing);\n    } else {\n      self.directory = directory;\n      const store = encode(cachedown(directory, filedown).maxSize(100), levelupOptions);\n      levelup(store, {}, finishInitializing);\n    }\n  });\n\n  function finishInitializing(err, db) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db = db;\n\n    // Blocks, keyed by array index (not necessarily by block number) (0-based)\n    self.blocks = new LevelUpArrayAdapter(\"blocks\", self.db, blockserializer);\n\n    // Logs triggered in each block, keyed by block id (ids in the blocks array; not necessarily block number) (0-based)\n    self.blockLogs = new LevelUpArrayAdapter(\"blockLogs\", self.db, new BlockLogsSerializer(self));\n\n    // Block hashes -> block ids (ids in the blocks array; not necessarily block number) for quick lookup\n    self.blockHashes = new LevelUpObjectAdapter(\"blockHashes\", self.db);\n\n    // Transaction hash -> transaction objects\n    self.transactions = new LevelUpObjectAdapter(\"transactions\", self.db, txserializer);\n\n    // Transaction hash -> transaction receipts\n    self.transactionReceipts = new LevelUpObjectAdapter(\"transactionReceipts\", self.db, new ReceiptSerializer(self));\n\n    self.trie_db = new LevelUpObjectAdapter(\"trie_db\", self.db, bufferserializer, bufferserializer);\n\n    callback();\n  }\n};\n\nDatabase.prototype.close = function(callback) {\n  callback();\n};\n\nmodule.exports = Database;\n","var Sublevel = require(\"level-sublevel\");\nconst { LevelUpOutOfRangeError, BlockOutOfRangeError } = require(\"../utils/errorhelper\");\n\n// Level up adapter that looks like an array. Doesn't support inserts.\n\nfunction LevelUpArrayAdapter(name, db, serializer) {\n  this.db = Sublevel(db);\n  this.db = this.db.sublevel(name);\n  this.name = name;\n  this.serializer = serializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n}\n\nLevelUpArrayAdapter.prototype.length = function(callback) {\n  this.db.get(\"length\", function(err, result) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, 0);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(null, result);\n  });\n};\n\nLevelUpArrayAdapter.prototype._get = function(key, callback) {\n  var self = this;\n  this.db.get(key, function(err, val) {\n    if (err) {\n      return callback(err);\n    }\n    self.serializer.decode(val, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype._put = function(key, value, callback) {\n  var self = this;\n  this.serializer.encode(value, function(err, encoded) {\n    if (err) {\n      return callback(err);\n    }\n    self.db.put(key, encoded, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.get = function(index, callback) {\n  var self = this;\n\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n    if (index >= length) {\n      // index out of range\n      let RangeError =\n        self.name === \"blocks\"\n          ? new BlockOutOfRangeError(index, length)\n          : new LevelUpOutOfRangeError(self.name, index, length);\n      return callback(RangeError);\n    }\n    self._get(index, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.push = function(val, callback) {\n  var self = this;\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    // TODO: Do this in atomic batch.\n    self._put(length + \"\", val, function(err) {\n      if (err) {\n        return callback(err);\n      }\n      self.db.put(\"length\", length + 1, callback);\n    });\n  });\n};\n\nLevelUpArrayAdapter.prototype.pop = function(callback) {\n  var self = this;\n\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    var newLength = length - 1;\n\n    // TODO: Do this in atomic batch.\n    self._get(newLength + \"\", function(err, val) {\n      if (err) {\n        return callback(err);\n      }\n      self.db.del(newLength + \"\", function(err) {\n        if (err) {\n          return callback(err);\n        }\n        self.db.put(\"length\", newLength, function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, val);\n        });\n      });\n    });\n  });\n};\n\nLevelUpArrayAdapter.prototype.last = function(callback) {\n  var self = this;\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (length === 0) {\n      return callback(null, null);\n    }\n\n    self._get(length - 1 + \"\", callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.first = function(callback) {\n  this._get(\"0\", callback);\n};\n\nmodule.exports = LevelUpArrayAdapter;\n","var Sublevel = require(\"level-sublevel\");\nvar async = require(\"async\");\n\nfunction LevelUpObjectAdapter(name, db, valueserializer, keyserializer, options) {\n  this.db = Sublevel(db, options);\n  this.db = this.db.sublevel(name);\n  this.name = name;\n  this.valueserializer = valueserializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n  this.keyserializer = keyserializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n}\n\nLevelUpObjectAdapter.prototype.get = function(key, options, callback) {\n  var self = this;\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db.get(encodedKey, function(err, val) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.valueserializer.decode(val, function(err, decodedValue) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, decodedValue);\n      });\n    });\n  });\n};\n\nLevelUpObjectAdapter.prototype.put = function(key, value, options, callback) {\n  var self = this;\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.valueserializer.encode(value, function(err, encoded) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.db.put(encodedKey, encoded, callback);\n    });\n  });\n};\n\nLevelUpObjectAdapter.prototype.set = LevelUpObjectAdapter.prototype.put;\n\nLevelUpObjectAdapter.prototype.del = function(key, callback) {\n  var self = this;\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db.del(encodedKey, callback);\n  });\n};\n\nLevelUpObjectAdapter.prototype.batch = function(array, options, callback) {\n  var self = this;\n\n  async.each(\n    array,\n    function(item, finished) {\n      if (item.type === \"put\") {\n        self.put(item.key, item.value, options, finished);\n      } else if (item.type === \"del\") {\n        self.del(item.key, finished);\n      } else {\n        finished(new Error(\"Unknown batch type\", item.type));\n      }\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    }\n  );\n};\n\nLevelUpObjectAdapter.prototype.isOpen = function() {\n  return true;\n};\n\nmodule.exports = LevelUpObjectAdapter;\n","module.exports = require(\"levelup\");","module.exports = require(\"encoding-down\");","var util = require(\"util\");\nvar AbstractLevelDOWN = require(\"abstract-leveldown\").AbstractLevelDOWN;\nvar async = require(\"async\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\nutil.inherits(FileDown, AbstractLevelDOWN);\n\nfunction FileDown(location) {\n  this.location = location;\n  AbstractLevelDOWN.call(this, location);\n}\n\nFileDown.prototype._open = function(options, callback) {\n  var self = this;\n  callback(null, self);\n};\n\nFileDown.prototype._put = function(key, value, options, callback) {\n  fs.writeFile(path.join(this.location, key), value, \"utf8\", callback);\n};\n\nFileDown.prototype._get = function(key, options, callback) {\n  fs.readFile(path.join(this.location, key), \"utf8\", function(err, data) {\n    if (err) {\n      return callback(new Error(\"NotFound\"));\n    }\n    callback(null, data);\n  });\n};\n\nFileDown.prototype._del = function(key, options, callback) {\n  fs.unlink(path.join(this.location, key), function(err) {\n    // Ignore when we try to delete a file that doesn't exist.\n    // I'm not sure why this happens. Worth looking into.\n    if (err) {\n      if (err.message.indexOf(\"ENOENT\") >= 0) {\n        return callback();\n      } else {\n        return callback(err);\n      }\n    }\n    callback();\n  });\n};\n\nFileDown.prototype._batch = function(array, options, callback) {\n  var self = this;\n  async.each(\n    array,\n    function(item, finished) {\n      if (item.type === \"put\") {\n        self.put(item.key, item.value, options, finished);\n      } else if (item.type === \"del\") {\n        self.del(item.key, options, finished);\n      } else {\n        finished(new Error(\"Unknown batch type\", item.type));\n      }\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    }\n  );\n};\n\nmodule.exports = function(location) {\n  return new FileDown(location);\n};\n","module.exports = require(\"abstract-leveldown\");","module.exports = require(\"path\");","module.exports = require(\"cachedown\");","var txserializer = require(\"./txserializer\");\nvar async = require(\"async\");\nvar Block = require(\"ethereumjs-block\");\n\nmodule.exports = {\n  encode: function(block, done) {\n    var encoded = block.toJSON(true);\n\n    async.map(\n      block.transactions,\n      function(tx, finished) {\n        txserializer.encode(tx, finished);\n      },\n      function(err, transactions) {\n        if (err) {\n          return done(err);\n        }\n        encoded.transactions = transactions;\n        done(null, encoded);\n      }\n    );\n  },\n  decode: function(json, done) {\n    var transactions = json.transactions;\n    json.transactions = [];\n\n    var block = new Block(json);\n\n    async.eachSeries(\n      transactions,\n      function(txJson, finished) {\n        txserializer.decode(txJson, function(err, tx) {\n          if (err) {\n            return finished(err);\n          }\n          block.transactions.push(tx);\n          finished();\n        });\n      },\n      function(err) {\n        if (err) {\n          return done(err);\n        }\n\n        done(null, block);\n      }\n    );\n  }\n};\n","var utils = require(\"ethereumjs-util\");\nvar to = require(\"../utils/to\");\n\nmodule.exports = {\n  encode: function(val, cb) {\n    var hex = to.hex(val);\n    cb(null, hex);\n  },\n  decode: function(json, cb) {\n    cb(null, utils.toBuffer(json));\n  }\n};\n","var Log = require(\"../utils/log\");\nvar async = require(\"async\");\n\nfunction BlockLogsSerializer(database) {\n  this.database = database;\n}\n\nBlockLogsSerializer.prototype.encode = function(logs, done) {\n  logs = logs.map(function(log) {\n    return log.toJSON();\n  });\n\n  done(null, logs);\n};\n\nBlockLogsSerializer.prototype.decode = function(json, done) {\n  var self = this;\n\n  if (json.length === 0) {\n    return done(null, []);\n  }\n\n  this.database.blockHashes.get(json[0].blockHash, function(err, blockIndex) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blocks.get(blockIndex, function(err, block) {\n      if (err) {\n        return done(err);\n      }\n\n      async.map(\n        json,\n        function(log, finished) {\n          finished(\n            null,\n            new Log({\n              block: block,\n              logIndex: log.logIndex,\n              transactionIndex: log.transactionIndex,\n              transactionHash: log.transactionHash,\n              address: log.address,\n              data: log.data,\n              topics: log.topics,\n              type: log.type\n            })\n          );\n        },\n        function(err, logs) {\n          if (err) {\n            return done(err);\n          }\n          done(null, logs);\n        }\n      );\n    });\n  });\n};\n\nmodule.exports = BlockLogsSerializer;\n","var Receipt = require(\"../utils/receipt\");\nvar async = require(\"async\");\n\nfunction ReceiptSerializer(database) {\n  this.database = database;\n}\n\nReceiptSerializer.prototype.encode = function(receipt, done) {\n  done(null, receipt.toJSON());\n};\n\nReceiptSerializer.prototype.decode = function(json, done) {\n  var self = this;\n  // Make sure we can handle mixed/upper-case transaction hashes\n  // it doesn't seem possible to record a transaction hash that isn't\n  // already lower case, as that's the way ganache generates them, however\n  // I don't think it will hurt anything to normalize here anyway.\n  // If you can figure out how to test this please feel free to add a test!\n  var txHash = json.transactionHash.toLowerCase();\n\n  this.database.transactions.get(json.transactionHash, function(err, tx) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blockHashes.get(json.blockHash, function(err, blockIndex) {\n      if (err) {\n        return done(err);\n      }\n\n      async.parallel(\n        {\n          block: self.database.blocks.get.bind(self.database.blocks, blockIndex),\n          logs: self.database.blockLogs.get.bind(self.database.blockLogs, blockIndex)\n        },\n        function(err, result) {\n          if (err) {\n            return done(err);\n          }\n\n          done(\n            null,\n            new Receipt(\n              tx,\n              result.block,\n              result.logs.filter((log) => log.transactionHash.toLowerCase() === txHash),\n              json.gasUsed,\n              json.cumulativeGasUsed,\n              json.contractAddress,\n              json.status,\n              json.logsBloom\n            )\n          );\n        }\n      );\n    });\n  });\n};\n\nmodule.exports = ReceiptSerializer;\n","module.exports = require(\"tmp\");","const estimateGas = require(\"./guestimation\");\nconst binSearch = require(\"./binSearch\");\n\nmodule.exports = async(generateVM, runArgs, callback) => {\n  const vm = generateVM();\n  estimateGas(vm, runArgs, async(err, result) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    await binSearch(generateVM, runArgs, result, callback);\n  });\n};\n","const RuntimeError = require(\"../runtimeerror\");\n\nconst { BN } = require(\"ethereumjs-util\");\nconst bn = (val = 0) => new BN(val);\nconst STIPEND = bn(2300);\n\nconst check = (set) => (opname) => set.has(opname);\nconst isCall = check(new Set([\"CALL\", \"DELEGATECALL\", \"STATICCALL\", \"CALLCODE\"]));\nconst isCallOrCallcode = check(new Set([\"CALL\", \"CALLCODE\"]));\nconst isCreate = check(new Set([\"CREATE\", \"CREATE2\"]));\nconst isTerminator = check(new Set([\"STOP\", \"RETURN\", \"REVERT\", \"INVALID\", \"SELFDESTRUCT\"]));\n\nmodule.exports = async(vm, runArgs, callback) => {\n  const steps = stepTracker();\n  vm.on(\"step\", steps.collect);\n\n  const Context = (index, fee) => {\n    const base = index === 0;\n    let start = index;\n    let stop = 0;\n    let cost = bn();\n    let sixtyFloorths = bn();\n    const op = steps.ops[index];\n    const next = steps.ops[index + 1];\n    const intermediateCost = op.gasLeft.sub(next.gasLeft);\n    const callingFee = fee || bn();\n    let compositeContext = false;\n\n    function addGas(val) {\n      // Add to our current context, but accounted for in sixtyfloorths\n      if (sixtyFloorths.gtn(0)) {\n        if (val.gte(sixtyFloorths)) {\n          sixtyFloorths = bn();\n        } else {\n          sixtyFloorths.isub(val);\n        }\n      }\n      cost.iadd(val);\n    }\n\n    return {\n      start: () => start,\n      stop: () => stop,\n      setStart: (val) => {\n        start = val;\n        compositeContext = true;\n      },\n      setStop: (val) => {\n        stop = val;\n      },\n      getCost: () => ({ cost, sixtyFloorths }),\n      transfer: (ctx) => {\n        const values = ctx.getCost();\n        addGas(values.cost);\n        sixtyFloorths.iadd(values.sixtyFloorths);\n      },\n      addSixtyFloorth: (sixtyFloorth) => {\n        sixtyFloorths.iadd(sixtyFloorth);\n      },\n      addRange: (fee = bn()) => {\n        // only occurs on stack increasing ops\n        addGas(steps.ops[base || compositeContext ? start : start + 1].gasLeft.sub(steps.ops[stop].gasLeft).add(fee));\n      },\n      finalizeRange: () => {\n        let range;\n        // if we have a composite context and we are NOT at the final terminator\n        if (compositeContext && stop !== steps.ops.length - 1) {\n          range = steps.ops[start].gasLeft.sub(steps.ops[stop - 1].gasLeft);\n          addGas(range);\n          const tail = steps.ops[stop - 1].gasLeft.sub(steps.ops[stop].gasLeft);\n          range = tail.add(intermediateCost);\n        } else {\n          range = steps.ops[start].gasLeft.sub(steps.ops[stop].gasLeft);\n        }\n        range.isub(callingFee);\n        addGas(range);\n        if (isCallOrCallcode(op.opcode.name) && !op.stack[op.stack.length - 3].isZero()) {\n          cost.iadd(sixtyFloorths);\n          const innerCost = next.gasLeft.sub(steps.ops[stop - 1].gasLeft);\n          if (innerCost.gt(STIPEND)) {\n            sixtyFloorths = cost.divn(63);\n          } else if (innerCost.lte(STIPEND)) {\n            sixtyFloorths = STIPEND.sub(innerCost);\n          }\n        } else if (stop !== steps.ops.length - 1) {\n          cost.iadd(sixtyFloorths);\n          sixtyFloorths = cost.divn(63);\n        }\n      }\n    };\n  };\n\n  const getTotal = () => {\n    const sysops = steps.systemOps;\n    const ops = steps.ops;\n    const opIndex = (cursor) => sysops[cursor].index;\n    const stack = [];\n    let cursor = 0;\n    let context = Context(0);\n    while (cursor < sysops.length) {\n      const currentIndex = opIndex(cursor);\n      const current = ops[currentIndex];\n      const name = current.opcode.name;\n      if (isCall(name) || isCreate(name)) {\n        if (steps.isPrecompile(currentIndex)) {\n          context.setStop(currentIndex + 1);\n          context.addRange();\n          context.setStart(currentIndex + 1);\n          context.addSixtyFloorth(STIPEND);\n        } else {\n          context.setStop(currentIndex);\n          context.addRange(bn(current.opcode.fee));\n          stack.push(context);\n          context = Context(currentIndex, bn(current.opcode.fee)); // setup next context\n        }\n      } else if (isTerminator(name)) {\n        // only on the last operation\n        context.setStop(currentIndex + 1 < steps.ops.length ? currentIndex + 1 : currentIndex);\n        context.finalizeRange();\n        const ctx = stack.pop();\n        if (ctx) {\n          ctx.transfer(context);\n          context = ctx;\n          context.setStart(currentIndex + 1);\n        } else {\n          break;\n        }\n      } else {\n        throw new Error(\"INVALID OPCODE\");\n      }\n      cursor++;\n    }\n    const gas = context.getCost();\n    return gas.cost.add(gas.sixtyFloorths);\n  };\n\n  const result = await vm.runTx(runArgs).catch((vmerr) => ({ vmerr }));\n  const vmerr = result.vmerr;\n  if (vmerr) {\n    return callback(vmerr);\n  } else if (result.execResult.exceptionError) {\n    const vmerr = RuntimeError.fromResults([runArgs.tx], { results: [result] });\n    return callback(vmerr, result);\n  } else if (steps.done()) {\n    const estimate = result.gasUsed;\n    result.gasEstimate = estimate;\n  } else {\n    const actualUsed = steps.ops[0].gasLeft.sub(steps.ops[steps.ops.length - 1].gasLeft);\n    const sixtyFloorths = getTotal().sub(actualUsed);\n    result.gasEstimate = result.gasUsed.add(sixtyFloorths);\n  }\n  callback(vmerr, result);\n};\n\nconst stepTracker = () => {\n  const sysOps = [];\n  const allOps = [];\n  const preCompile = new Set();\n  let preCompileCheck = false;\n  let precompileCallDepth = 0;\n  return {\n    collect: (info) => {\n      if (preCompileCheck) {\n        if (info.depth === precompileCallDepth) {\n          // If the current depth is unchanged.\n          // we record its position.\n          preCompile.add(allOps.length - 1);\n        }\n        // Reset the flag immediately here\n        preCompileCheck = false;\n      }\n      if (isCall(info.opcode.name)) {\n        info.stack = info.stack.map((val) => val.clone());\n        preCompileCheck = true;\n        precompileCallDepth = info.depth;\n        sysOps.push({ index: allOps.length, depth: info.depth, name: info.opcode.name });\n      } else if (isCreate(info.opcode.name) || isTerminator(info.opcode.name)) {\n        sysOps.push({ index: allOps.length, depth: info.depth, name: info.opcode.name });\n      }\n      // This goes last so we can use the length for the index ^\n      allOps.push(info);\n    },\n    isPrecompile: (index) => preCompile.has(index),\n    done: () => !allOps.length || sysOps.length < 2 || !isTerminator(allOps[allOps.length - 1].opcode.name),\n    ops: allOps,\n    systemOps: sysOps\n  };\n};\n","const { BN } = require(\"ethereumjs-util\");\nconst hexToBn = (val = 0) => new BN(parseInt(\"0x\" + val.toString(\"hex\"), 16));\nconst MULTIPLE = 64 / 63;\n\nmodule.exports = async function binSearch(generateVM, runArgs, result, callback) {\n  const MAX = hexToBn(runArgs.block.header.gasLimit);\n  const gasRefund = result.execResult.gasRefund;\n  const startingGas = gasRefund ? result.gasEstimate.add(gasRefund) : result.gasEstimate;\n  const range = { lo: startingGas, hi: startingGas };\n  const isEnoughGas = async(gas) => {\n    const vm = generateVM(); // Generate fresh VM\n    runArgs.tx.gasLimit = gas.toBuffer();\n    const result = await vm.runTx(runArgs).catch((vmerr) => ({ vmerr }));\n    return !result.vmerr && !result.execResult.exceptionError;\n  };\n\n  if (!(await isEnoughGas(range.hi))) {\n    do {\n      range.hi = range.hi.muln(MULTIPLE);\n    } while (!(await isEnoughGas(range.hi)));\n    while (range.lo.addn(1).lt(range.hi)) {\n      const mid = range.lo.add(range.hi).divn(2);\n      if (await isEnoughGas(mid)) {\n        range.hi = mid;\n      } else {\n        range.lo = mid;\n      }\n    }\n    if (range.hi.gte(MAX)) {\n      if (!(await isEnoughGas(range.hi))) {\n        return callback(new Error(\"gas required exceeds allowance or always failing transaction\"));\n      }\n    }\n  }\n\n  result.gasEstimate = range.hi;\n  callback(null, result);\n};\n","var BlockchainDouble = require(\"../blockchain_double.js\");\nvar Account = require(\"ethereumjs-account\").default;\nvar Block = require(\"ethereumjs-block\");\nvar Log = require(\"./log.js\");\nvar Receipt = require(\"./receipt.js\");\nvar utils = require(\"ethereumjs-util\");\nvar ForkedStorageTrie = require(\"./forkedstoragetrie.js\");\nvar Web3 = require(\"web3\");\nvar to = require(\"./to.js\");\nvar Transaction = require(\"./transaction\");\nvar async = require(\"async\");\nconst BN = utils.BN;\n\nvar inherits = require(\"util\").inherits;\n\ninherits(ForkedBlockchain, BlockchainDouble);\n\nconst httpReg = /^https?:/i;\nconst protocolReg = /^[A-Za-z][A-Za-z0-9+\\-.]*:/;\nconst validProtocolReg = /^(?:http|ws)s?:/i;\n\nfunction ForkedBlockchain(options) {\n  this.options = options || {};\n\n  if (options.fork == null || (typeof options.fork === \"string\" && options.fork.trim().length === 0)) {\n    throw new Error(\"ForkedBlockchain must be passed a fork parameter.\");\n  }\n\n  this.forkVersion = null;\n\n  if (typeof options.fork === \"string\") {\n    if (options.fork.indexOf(\"@\") >= 0) {\n      const split = options.fork.split(\"@\", 2);\n      options.fork = split[0];\n      options.fork_block_number = parseInt(split[1]);\n    }\n\n    let fork;\n    if (!protocolReg.test(options.fork)) {\n      // we don't have a protocol at all, assume ws\n      options.fork = \"ws://\" + options.fork;\n      fork = new Web3.providers.WebsocketProvider(options.fork);\n    } else if (validProtocolReg.test(options.fork)) {\n      if (httpReg.test(options.fork)) {\n        fork = new Web3.providers.HttpProvider(options.fork);\n      } else {\n        fork = new Web3.providers.WebsocketProvider(options.fork);\n      }\n    } else {\n      throw new Error(`Invalid scheme for fork url: ${options.fork}. Supported schemes are: http, https, ws, and wss.`);\n    }\n\n    this.fork = fork;\n  } else {\n    this.fork = options.fork;\n  }\n  this.forkBlockNumber = options.fork_block_number;\n\n  this.time = options.time;\n  this.storageTrieCache = {};\n\n  BlockchainDouble.call(this, options);\n\n  this.createVMFromStateTrie = function() {\n    var vm = BlockchainDouble.prototype.createVMFromStateTrie.apply(this, arguments);\n    this.patchVM(vm);\n    return vm;\n  };\n\n  this.web3 = new Web3(this.fork);\n}\n\nForkedBlockchain.prototype.initialize = function(accounts, callback) {\n  var self = this;\n\n  this.web3.eth.net.getId(function(err, version) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.forkVersion = version;\n\n    BlockchainDouble.prototype.initialize.call(self, accounts, callback);\n  });\n};\nForkedBlockchain.prototype.patchVM = function(vm) {\n  const trie = vm.stateManager._trie;\n  const lookupAccount = this.getLookupAccount(trie);\n  // Unfortunately forking requires a bit of monkey patching, but it gets the job done.\n  vm.stateManager._cache._lookupAccount = lookupAccount;\n  vm.stateManager._lookupStorageTrie = this.getLookupStorageTrie(trie, lookupAccount);\n};\n\n/**\n * @param db\n * @param root\n * @param options Allows overriding the options passed to the ForkedStorageTrie,\n * like `forkBlockNumber` (required for tracing transactions)\n */\nForkedBlockchain.prototype.createStateTrie = function(db, root, options) {\n  options = Object.assign(\n    {\n      fork: this.fork,\n      forkBlockNumber: this.forkBlockNumber,\n      blockchain: this\n    },\n    options\n  );\n  // never allow the forkBlockNumber to go beyond our root forkBlockNumber\n  if (options.forkBlockNumber > this.forkBlockNumber) {\n    options.forkBlockNumber = this.forkBlockNumber;\n  }\n  return new ForkedStorageTrie(db, root, options);\n};\n\nForkedBlockchain.prototype.createGenesisBlock = function(callback) {\n  var self = this;\n  var blockNumber = this.forkBlockNumber || \"latest\";\n\n  self.web3.eth.getBlock(blockNumber, function(err, json) {\n    if (err) {\n      return callback(err);\n    }\n\n    // If no start time was passed, set the time to where we forked from.\n    // We only want to do this if a block was explicitly passed. If a block\n    // number wasn't passed, then we're using the last block and the current time.\n    if (!self.time && self.forkBlockNumber) {\n      self.time = self.options.time = new Date(to.number(json.timestamp) * 1000);\n      self.setTime(self.time);\n    }\n\n    blockNumber = json.number;\n\n    // Update the relevant block numbers\n    self.forkBlockNumber = self.options.fork_block_number = blockNumber;\n    self.stateTrie.forkBlockNumber = self.stateTrie.options.forkBlockNumber = blockNumber;\n\n    self.createBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      block.header.number = utils.toBuffer(to.number(json.number) + 1);\n      block.header.parentHash = utils.toBuffer(json.hash);\n\n      callback(null, block);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getLookupStorageTrie = function(stateTrie, lookupAccount) {\n  lookupAccount = lookupAccount || this.getLookupAccount(stateTrie);\n  return (address, callback) => {\n    const storageTrie = stateTrie.copy();\n    storageTrie.address = address;\n    lookupAccount(address, (err, account) => {\n      if (err) {\n        return callback(err);\n      }\n\n      storageTrie.root = account.stateRoot;\n      callback(null, storageTrie);\n    });\n  };\n};\n\nForkedBlockchain.prototype.isFallbackBlock = function(value, callback) {\n  var self = this;\n\n  self.getEffectiveBlockNumber(value, function(err, number) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, number <= to.number(self.forkBlockNumber));\n  });\n};\n\nForkedBlockchain.prototype.isBlockHash = function(value) {\n  const isHash = typeof value === \"string\" && value.indexOf(\"0x\") === 0 && value.length > 42;\n  return isHash || (Buffer.isBuffer(value) && value.byteLength > 20);\n};\n\nForkedBlockchain.prototype.isFallbackBlockHash = function(value, callback) {\n  var self = this;\n\n  if (!this.isBlockHash(value)) {\n    return callback(null, false);\n  }\n\n  if (Buffer.isBuffer(value)) {\n    value = to.hex(value);\n  }\n\n  self.data.blockHashes.get(value, function(err, blockIndex) {\n    if (err) {\n      if (err.notFound) {\n        // If the block isn't found in our database, then it must be a fallback block.\n        return callback(null, true);\n      } else {\n        return callback(err);\n      }\n    }\n    callback(null, false);\n  });\n};\n\nForkedBlockchain.prototype.getFallbackBlock = function(numberOrHash, cb) {\n  var self = this;\n\n  if (Buffer.isBuffer(numberOrHash)) {\n    // When tracing a transaction the VM sometimes ask for a block numbers as\n    // buffers instead of numbers.\n    numberOrHash = to.rpcDataHexString(numberOrHash);\n  }\n  if (typeof numberOrHash === \"string\" && numberOrHash.length !== 66) {\n    numberOrHash = to.number(numberOrHash);\n  }\n\n  self.web3.eth.getBlock(numberOrHash, true, function(err, json) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (json == null) {\n      return cb(new Error(\"Block not found\"));\n    }\n\n    var block = new Block();\n\n    block.header.parentHash = utils.toBuffer(json.parentHash);\n    block.header.uncleHash = utils.toBuffer(json.sha3Uncles);\n    block.header.coinbase = utils.toBuffer(json.miner);\n    block.header.stateRoot = utils.toBuffer(json.stateRoot); // Should we include the following three?\n    block.header.transactionsTrie = utils.toBuffer(json.transactionsRoot);\n    block.header.receiptTrie = utils.toBuffer(json.receiptsRoot);\n    block.header.bloom = utils.toBuffer(json.logsBloom);\n    block.header.difficulty = utils.toBuffer(\"0x\" + json.totalDifficulty.toString(16)); // BigNumber\n    block.header.number = utils.toBuffer(json.number);\n    block.header.gasLimit = utils.toBuffer(json.gasLimit);\n    block.header.gasUsed = utils.toBuffer(json.gasUsed);\n    block.header.timestamp = utils.toBuffer(json.timestamp);\n    block.header.extraData = utils.toBuffer(json.extraData);\n\n    (json.transactions || []).forEach(function(txJson, index) {\n      block.transactions.push(\n        Transaction.fromJSON(txJson, Transaction.types.real, null, self.forkVersion, self.options.hardfork)\n      );\n    });\n\n    // Fake block. Let's do the worst.\n    // TODO: Attempt to fill out all block data so as to produce the same hash! (can we?)\n    block.hash = function() {\n      return utils.toBuffer(json.hash);\n    };\n\n    cb(null, block);\n  });\n};\n\nForkedBlockchain.prototype.getBlock = function(number, callback) {\n  let checkFn;\n  const isBlockHash = this.isBlockHash(number);\n  if (isBlockHash) {\n    checkFn = this.isFallbackBlockHash;\n  } else {\n    checkFn = this.isFallbackBlock;\n  }\n  checkFn.call(this, number, (err, isFallback) => {\n    if (err) {\n      return callback(err);\n    }\n    if (isFallback) {\n      return this.getFallbackBlock(number, callback);\n    }\n\n    const getBlock = BlockchainDouble.prototype.getBlock.bind(this);\n    if (isBlockHash) {\n      getBlock(number, callback);\n    } else {\n      this.getRelativeBlockNumber(number, (err, number) => {\n        if (err) {\n          return callback(err);\n        }\n        getBlock(number, callback);\n      });\n    }\n  });\n};\n\nForkedBlockchain.prototype.getStorage = function(address, key, number, callback) {\n  this.getLookupStorageTrie(this.stateTrie)(address, (err, trie) => {\n    if (err) {\n      return callback(err);\n    }\n    this.getEffectiveBlockNumber(number, (err, number) => {\n      if (err) {\n        return callback(err);\n      }\n      trie.get(utils.setLengthLeft(utils.toBuffer(key), 32), number, callback);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getCode = function(address, number, callback) {\n  var self = this;\n\n  if (typeof number === \"function\") {\n    callback = number;\n    number = \"latest\";\n  }\n\n  if (!number) {\n    number = \"latest\";\n  }\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    number = effective;\n\n    self.stateTrie.keyExists(address, function(err, exists) {\n      if (err) {\n        return callback(err);\n      }\n      // If we've stored the value and we're looking at one of our stored blocks,\n      // get it from our stored data.\n      if (exists && number > to.number(self.forkBlockNumber)) {\n        BlockchainDouble.prototype.getCode.call(self, address, number, callback);\n      } else {\n        self.stateTrie.keyIsDeleted(address, (err, deleted) => {\n          if (err) {\n            return callback(err);\n          }\n          if (deleted) {\n            return callback(null, Buffer.allocUnsafe(0));\n          }\n          // Else, we need to fetch it from web3. If our number is greater than\n          // the fork, let's just use \"latest\".\n          if (number > to.number(self.forkBlockNumber)) {\n            number = \"latest\";\n          }\n\n          self.fetchCodeFromFallback(address, number, function(err, code) {\n            if (code) {\n              code = utils.toBuffer(code);\n            }\n            callback(err, code);\n          });\n        });\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype.getLookupAccount = function(trie) {\n  return (address, callback) => {\n    // If the account doesn't exist in our state trie, get it off the wire.\n    trie.keyExists(address, (err, exists) => {\n      if (err) {\n        return callback(err);\n      }\n      if (exists) {\n        trie.get(address, (err, data) => {\n          if (err) {\n            return callback(err);\n          }\n          const account = new Account(data);\n          callback(null, account);\n        });\n      } else {\n        this.fetchAccountFromFallback(address, to.number(trie.forkBlockNumber), callback);\n      }\n    });\n  };\n};\n\nForkedBlockchain.prototype.getAccount = function(address, number, callback) {\n  var self = this;\n\n  if (typeof number === \"function\") {\n    callback = number;\n    number = \"latest\";\n  }\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    number = effective;\n\n    // If the account doesn't exist in our state trie, get it off the wire.\n    self.stateTrie.keyExists(address, function(err, exists) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (exists && number > to.number(self.forkBlockNumber)) {\n        BlockchainDouble.prototype.getAccount.call(self, address, number, function(err, acc) {\n          if (err) {\n            return callback(err);\n          }\n          callback(null, acc);\n        });\n      } else {\n        self.fetchAccountFromFallback(address, number, callback);\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype.getTransaction = function(hash, callback) {\n  var self = this;\n  BlockchainDouble.prototype.getTransaction.call(this, hash, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n    if (tx != null) {\n      return callback(null, tx);\n    }\n\n    self.web3.eth.getTransaction(hash, function(err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (result) {\n        result = Transaction.fromJSON(result, Transaction.types.signed, null, self.forkVersion, self.options.hardfork);\n      }\n\n      callback(null, result);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getTransactionReceipt = function(hash, callback) {\n  var self = this;\n  BlockchainDouble.prototype.getTransactionReceipt.call(this, hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n    if (receipt) {\n      return callback(null, receipt);\n    }\n\n    self.web3.eth.getTransactionReceipt(hash, function(err, receiptJson) {\n      if (err) {\n        return callback(err);\n      }\n      if (!receiptJson) {\n        return callback();\n      }\n\n      async.parallel(\n        {\n          tx: self.getTransaction.bind(self, hash),\n          block: self.getBlock.bind(self, receiptJson.blockNumber)\n        },\n        function(err, result) {\n          if (err) {\n            return callback(err);\n          }\n\n          var logs = receiptJson.logs.map(function(log) {\n            log.block = result.block;\n            return new Log(log);\n          });\n\n          var receipt = new Receipt(\n            result.tx,\n            result.block,\n            logs,\n            receiptJson.gasUsed,\n            receiptJson.cumulativeGasUsed,\n            receiptJson.contractAddress,\n            receiptJson.status,\n            to.hex(receiptJson.logsBloom)\n          );\n\n          callback(null, receipt);\n        }\n      );\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchAccountFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  async.parallel(\n    {\n      code: this.fetchCodeFromFallback.bind(this, address, blockNumber),\n      balance: this.fetchBalanceFromFallback.bind(this, address, blockNumber),\n      nonce: this.fetchNonceFromFallback.bind(this, address, blockNumber)\n    },\n    function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n\n      var code = results.code;\n      var balance = results.balance;\n      var nonce = results.nonce;\n\n      var account = new Account({\n        nonce: nonce,\n        balance: balance\n      });\n\n      // This puts the code on the trie, keyed by the hash of the code.\n      // It does not actually link an account to code in the trie.\n      account.setCode(self.stateTrie, utils.toBuffer(code), function(err) {\n        if (err) {\n          return callback(err);\n        }\n        callback(null, account);\n      });\n    }\n  );\n};\n\nForkedBlockchain.prototype.fetchCodeFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getCode(address, safeBlockNumber, function(err, code) {\n      if (err) {\n        return callback(err);\n      }\n\n      code = \"0x\" + utils.toBuffer(code).toString(\"hex\");\n      callback(null, code);\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchBalanceFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getBalance(address, safeBlockNumber, function(err, balance) {\n      if (err) {\n        return callback(err);\n      }\n\n      balance = \"0x\" + new BN(balance).toString(16);\n      callback(null, balance);\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchNonceFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getTransactionCount(address, safeBlockNumber, function(err, nonce) {\n      if (err) {\n        return callback(err);\n      }\n\n      nonce = \"0x\" + self.web3.utils.toBN(nonce).toString(16);\n      callback(null, nonce);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getHeight = function(callback) {\n  this.latestBlock(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, to.number(block.header.number));\n  });\n};\n\nForkedBlockchain.prototype.getRelativeBlockNumber = function(number, callback) {\n  var self = this;\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, effective - to.number(self.forkBlockNumber) - 1);\n  });\n};\n\nForkedBlockchain.prototype.getSafeFallbackBlockNumber = function(blockNumber, callback) {\n  var forkBlockNumber = to.number(this.forkBlockNumber);\n\n  if (blockNumber == null) {\n    return callback(null, forkBlockNumber);\n  }\n\n  this.getEffectiveBlockNumber(blockNumber, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    if (effective > forkBlockNumber) {\n      effective = forkBlockNumber;\n    }\n\n    callback(null, effective);\n  });\n};\n\nForkedBlockchain.prototype.getBlockLogs = function(number, callback) {\n  var self = this;\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.getRelativeBlockNumber(effective, function(err, relative) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (relative < 0) {\n        self.getBlock(number, function(err, block) {\n          if (err) {\n            return callback(err);\n          }\n\n          self.web3.currentProvider.send(\n            {\n              jsonrpc: \"2.0\",\n              method: \"eth_getLogs\",\n              params: [\n                {\n                  fromBlock: to.hex(number),\n                  toBlock: to.hex(number)\n                }\n              ],\n              id: new Date().getTime()\n            },\n            function(err, res) {\n              if (err) {\n                return callback(err);\n              }\n\n              var logs = res.result.map(function(log) {\n                // To make this result masquerade as the right information.\n                log.block = block;\n                return new Log(log);\n              });\n\n              callback(null, logs);\n            }\n          );\n        });\n      } else {\n        BlockchainDouble.prototype.getBlockLogs.call(self, relative, callback);\n      }\n    });\n  });\n};\n\nmodule.exports = ForkedBlockchain;\n","const Sublevel = require(\"level-sublevel\");\nconst MerklePatriciaTree = require(\"merkle-patricia-tree\");\nconst BaseTrie = require(\"merkle-patricia-tree/baseTrie\");\nconst checkpointInterface = require(\"merkle-patricia-tree/checkpoint-interface\");\nvar utils = require(\"ethereumjs-util\");\nvar inherits = require(\"util\").inherits;\nvar Web3 = require(\"web3\");\nvar to = require(\"./to.js\");\n\ninherits(ForkedStorageBaseTrie, BaseTrie);\n\nfunction ForkedStorageBaseTrie(db, root, options) {\n  BaseTrie.call(this, db, root);\n  this._deleted = Sublevel(this.db).sublevel(\"deleted\");\n\n  this.options = options;\n  this.address = options.address;\n  this.forkBlockNumber = options.forkBlockNumber;\n  this.blockchain = options.blockchain;\n  this.fork = options.fork;\n  this.web3 = new Web3(this.fork);\n}\n\n// Note: This overrides a standard method whereas the other methods do not.\nForkedStorageBaseTrie.prototype.get = function(key, blockNumber, callback) {\n  var self = this;\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  key = utils.toBuffer(key);\n\n  // If the account/key doesn't exist in our state trie, get it off the wire.\n  this.keyExists(key, function(err, exists) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (exists) {\n      // TODO: just because we have the key doesn't mean we're at the right\n      // block number/root to send it. We need to check the block number\n      // before using the data in our own trie.\n      MerklePatriciaTree.prototype.get.call(self, key, function(err, r) {\n        callback(err, r);\n      });\n    } else {\n      self.keyIsDeleted(key, (err, deleted) => {\n        if (err) {\n          return callback(err);\n        }\n\n        if (deleted) {\n          // it was deleted. return nothing.\n          callback(null, Buffer.allocUnsafe(0));\n          return;\n        }\n\n        // If this is the main trie, get the whole account.\n        if (self.address == null) {\n          self.blockchain.fetchAccountFromFallback(key, blockNumber, function(err, account) {\n            if (err) {\n              return callback(err);\n            }\n\n            callback(null, account.serialize());\n          });\n        } else {\n          if (to.number(blockNumber) > to.number(self.forkBlockNumber)) {\n            blockNumber = self.forkBlockNumber;\n          }\n          self.web3.eth.getStorageAt(to.rpcDataHexString(self.address), to.rpcDataHexString(key), blockNumber, function(\n            err,\n            value\n          ) {\n            if (err) {\n              return callback(err);\n            }\n\n            value = utils.rlp.encode(value);\n\n            callback(null, value);\n          });\n        }\n      });\n    }\n  });\n};\n\nForkedStorageBaseTrie.prototype.keyExists = function(key, callback) {\n  key = utils.toBuffer(key);\n  this.findPath(key, (err, node, remainder, stack) => {\n    const exists = node && remainder.length === 0;\n    callback(err, exists);\n  });\n};\n\nForkedStorageBaseTrie.prototype.keyIsDeleted = function(key, callback) {\n  let rpcKey = to.rpcDataHexString(key);\n  if (this.address) {\n    rpcKey = `${to.rpcDataHexString(this.address)};${rpcKey}`;\n  }\n  this._deleted.get(rpcKey, (_, result) => {\n    callback(null, result === 1);\n  });\n};\n\nconst originalDelete = ForkedStorageBaseTrie.prototype.del;\nForkedStorageBaseTrie.prototype.del = function(key, callback) {\n  let rpcKey = to.rpcDataHexString(key);\n  if (this.address) {\n    rpcKey = `${to.rpcDataHexString(this.address)};${rpcKey}`;\n  }\n  this._deleted.put(rpcKey, 1, () => {\n    originalDelete.call(this, key, callback);\n  });\n};\n\nForkedStorageBaseTrie.prototype.copy = function() {\n  return new ForkedStorageBaseTrie(this.db, this.root, this.options);\n};\n\ninherits(ForkedStorageTrie, ForkedStorageBaseTrie);\n\nfunction ForkedStorageTrie(db, root, options) {\n  ForkedStorageBaseTrie.call(this, db, root, options);\n  checkpointInterface(this);\n}\n\nForkedStorageTrie.prove = MerklePatriciaTree.prove;\nForkedStorageTrie.verifyProof = MerklePatriciaTree.verifyProof;\n\nmodule.exports = ForkedStorageTrie;\n","module.exports = require(\"merkle-patricia-tree/baseTrie\");","module.exports = require(\"merkle-patricia-tree/checkpoint-interface\");","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar core = require('web3-core');\nvar helpers = require('web3-core-helpers');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar Method = require('web3-core-method');\nvar utils = require('web3-utils');\nvar Net = require('web3-net');\n\nvar ENS = require('web3-eth-ens');\nvar Personal = require('web3-eth-personal');\nvar BaseContract = require('web3-eth-contract');\nvar Iban = require('web3-eth-iban');\nvar Accounts = require('web3-eth-accounts');\nvar abi = require('web3-eth-abi');\n\nvar getNetworkType = require('./getNetworkType.js');\nvar formatter = helpers.formatters;\n\n\nvar blockCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\n\nvar transactionFromBlockCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\n\nvar uncleCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\n\nvar getBlockTransactionCountCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\n\nvar uncleCountCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\n\n\nvar Eth = function Eth() {\n    var _this = this;\n\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n\n    // overwrite setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function () {\n        setProvider.apply(_this, arguments);\n        _this.net.setProvider.apply(_this, arguments);\n        _this.personal.setProvider.apply(_this, arguments);\n        _this.accounts.setProvider.apply(_this, arguments);\n        _this.Contract.setProvider(_this.currentProvider, _this.accounts);\n    };\n\n\n    var defaultAccount = null;\n    var defaultBlock = 'latest';\n    var transactionBlockTimeout = 50;\n    var transactionConfirmationBlocks = 24;\n    var transactionPollingTimeout = 750;\n    var defaultChain, defaultHardfork, defaultCommon;\n\n    Object.defineProperty(this, 'defaultCommon', {\n        get: function () {\n            return defaultCommon;\n        },\n        set: function (val) {\n            defaultCommon = val;\n\n            // also set on the Contract object\n            _this.Contract.defaultCommon = defaultCommon;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultCommon = defaultCommon;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultHardfork', {\n        get: function () {\n            return defaultHardfork;\n        },\n        set: function (val) {\n            defaultHardfork = val;\n\n            // also set on the Contract object\n            _this.Contract.defaultHardfork = defaultHardfork;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultHardfork = defaultHardfork;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultChain', {\n        get: function () {\n            return defaultChain;\n        },\n        set: function (val) {\n            defaultChain = val;\n\n            // also set on the Contract object\n            _this.Contract.defaultChain = defaultChain;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultChain = defaultChain;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'transactionPollingTimeout', {\n        get: function () {\n            return transactionPollingTimeout;\n        },\n        set: function (val) {\n            transactionPollingTimeout = val;\n\n            // also set on the Contract object\n            _this.Contract.transactionPollingTimeout = transactionPollingTimeout;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.transactionPollingTimeout = transactionPollingTimeout;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'transactionConfirmationBlocks', {\n        get: function () {\n            return transactionConfirmationBlocks;\n        },\n        set: function (val) {\n            transactionConfirmationBlocks = val;\n\n            // also set on the Contract object\n            _this.Contract.transactionConfirmationBlocks = transactionConfirmationBlocks;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.transactionConfirmationBlocks = transactionConfirmationBlocks;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'transactionBlockTimeout', {\n        get: function () {\n            return transactionBlockTimeout;\n        },\n        set: function (val) {\n            transactionBlockTimeout = val;\n\n            // also set on the Contract object\n            _this.Contract.transactionBlockTimeout = transactionBlockTimeout;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.transactionBlockTimeout = transactionBlockTimeout;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultAccount', {\n        get: function () {\n            return defaultAccount;\n        },\n        set: function (val) {\n            if(val) {\n                defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\n            }\n\n            // also set on the Contract object\n            _this.Contract.defaultAccount = defaultAccount;\n            _this.personal.defaultAccount = defaultAccount;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultAccount = defaultAccount;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultBlock', {\n        get: function () {\n            return defaultBlock;\n        },\n        set: function (val) {\n            defaultBlock = val;\n            // also set on the Contract object\n            _this.Contract.defaultBlock = defaultBlock;\n            _this.personal.defaultBlock = defaultBlock;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultBlock = defaultBlock;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n\n\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions;\n\n    // add net\n    this.net = new Net(this.currentProvider);\n    // add chain detection\n    this.net.getNetworkType = getNetworkType.bind(this);\n\n    // add accounts\n    this.accounts = new Accounts(this.currentProvider);\n\n    // add personal\n    this.personal = new Personal(this.currentProvider);\n    this.personal.defaultAccount = this.defaultAccount;\n\n    // create a proxy Contract type for this instance, as a Contract's provider\n    // is stored as a class member rather than an instance variable. If we do\n    // not create this proxy type, changing the provider in one instance of\n    // web3-eth would subsequently change the provider for _all_ contract\n    // instances!\n    var self = this;\n    var Contract = function Contract() {\n        BaseContract.apply(this, arguments);\n\n        // when Eth.setProvider is called, call packageInit\n        // on all contract instances instantiated via this Eth\n        // instances. This will update the currentProvider for\n        // the contract instances\n        var _this = this;\n        var setProvider = self.setProvider;\n        self.setProvider = function() {\n          setProvider.apply(self, arguments);\n          core.packageInit(_this, [self.currentProvider]);\n        };\n    };\n\n    Contract.setProvider = function() {\n        BaseContract.setProvider.apply(this, arguments);\n    };\n\n    // make our proxy Contract inherit from web3-eth-contract so that it has all\n    // the right functionality and so that instanceof and friends work properly\n    Contract.prototype = Object.create(BaseContract.prototype);\n    Contract.prototype.constructor = Contract;\n\n    // add contract\n    this.Contract = Contract;\n    this.Contract.defaultAccount = this.defaultAccount;\n    this.Contract.defaultBlock = this.defaultBlock;\n    this.Contract.transactionBlockTimeout = this.transactionBlockTimeout;\n    this.Contract.transactionConfirmationBlocks = this.transactionConfirmationBlocks;\n    this.Contract.transactionPollingTimeout = this.transactionPollingTimeout;\n    this.Contract.setProvider(this.currentProvider, this.accounts);\n\n    // add IBAN\n    this.Iban = Iban;\n\n    // add ABI\n    this.abi = abi;\n\n    // add ENS\n    this.ens = new ENS(this);\n\n    var methods = [\n        new Method({\n            name: 'getNodeInfo',\n            call: 'web3_clientVersion'\n        }),\n        new Method({\n            name: 'getProtocolVersion',\n            call: 'eth_protocolVersion',\n            params: 0\n        }),\n        new Method({\n            name: 'getCoinbase',\n            call: 'eth_coinbase',\n            params: 0\n        }),\n        new Method({\n            name: 'isMining',\n            call: 'eth_mining',\n            params: 0\n        }),\n        new Method({\n            name: 'getHashrate',\n            call: 'eth_hashrate',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'isSyncing',\n            call: 'eth_syncing',\n            params: 0,\n            outputFormatter: formatter.outputSyncingFormatter\n        }),\n        new Method({\n            name: 'getGasPrice',\n            call: 'eth_gasPrice',\n            params: 0,\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: 'getAccounts',\n            call: 'eth_accounts',\n            params: 0,\n            outputFormatter: utils.toChecksumAddress\n        }),\n        new Method({\n            name: 'getBlockNumber',\n            call: 'eth_blockNumber',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getBalance',\n            call: 'eth_getBalance',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: 'getStorageAt',\n            call: 'eth_getStorageAt',\n            params: 3,\n            inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getBlock',\n            call: blockCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],\n            outputFormatter: formatter.outputBlockFormatter\n        }),\n        new Method({\n            name: 'getUncle',\n            call: uncleCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n            outputFormatter: formatter.outputBlockFormatter,\n\n        }),\n        new Method({\n            name: 'getBlockTransactionCount',\n            call: getBlockTransactionCountCall,\n            params: 1,\n            inputFormatter: [formatter.inputBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getBlockUncleCount',\n            call: uncleCountCall,\n            params: 1,\n            inputFormatter: [formatter.inputBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getTransaction',\n            call: 'eth_getTransactionByHash',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: 'getTransactionFromBlock',\n            call: transactionFromBlockCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatter.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getTransactionCount',\n            call: 'eth_getTransactionCount',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'sendSignedTransaction',\n            call: 'eth_sendRawTransaction',\n            params: 1,\n            inputFormatter: [null]\n        }),\n        new Method({\n            name: 'signTransaction',\n            call: 'eth_signTransaction',\n            params: 1,\n            inputFormatter: [formatter.inputTransactionFormatter]\n        }),\n        new Method({\n            name: 'sendTransaction',\n            call: 'eth_sendTransaction',\n            params: 1,\n            inputFormatter: [formatter.inputTransactionFormatter]\n        }),\n        new Method({\n            name: 'sign',\n            call: 'eth_sign',\n            params: 2,\n            inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\n            transformPayload: function (payload) {\n                payload.params.reverse();\n                return payload;\n            }\n        }),\n        new Method({\n            name: 'call',\n            call: 'eth_call',\n            params: 2,\n            inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'estimateGas',\n            call: 'eth_estimateGas',\n            params: 1,\n            inputFormatter: [formatter.inputCallFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'submitWork',\n            call: 'eth_submitWork',\n            params: 3\n        }),\n        new Method({\n            name: 'getWork',\n            call: 'eth_getWork',\n            params: 0\n        }),\n        new Method({\n            name: 'getPastLogs',\n            call: 'eth_getLogs',\n            params: 1,\n            inputFormatter: [formatter.inputLogFormatter],\n            outputFormatter: formatter.outputLogFormatter\n        }),\n        new Method({\n            name: 'getChainId',\n            call: 'eth_chainId',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n\n        // subscriptions\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    // TODO rename on RPC side?\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatter.outputBlockFormatter\n                },\n                'pendingTransactions': {\n                    subscriptionName: 'newPendingTransactions', // replace subscription with this name\n                    params: 0\n                },\n                'logs': {\n                    params: 1,\n                    inputFormatter: [formatter.inputLogFormatter],\n                    outputFormatter: formatter.outputLogFormatter,\n                    // DUBLICATE, also in web3-eth-contract\n                    subscriptionHandler: function (output) {\n                        if(output.removed) {\n                            this.emit('changed', output);\n                        } else {\n                            this.emit('data', output);\n                        }\n\n                        if (_.isFunction(this.callback)) {\n                            this.callback(null, output, this);\n                        }\n                    }\n                },\n                'syncing': {\n                    params: 0,\n                    outputFormatter: formatter.outputSyncingFormatter,\n                    subscriptionHandler: function (output) {\n                        var _this = this;\n\n                        // fire TRUE at start\n                        if(this._isSyncing !== true) {\n                            this._isSyncing = true;\n                            this.emit('changed', _this._isSyncing);\n\n                            if (_.isFunction(this.callback)) {\n                                this.callback(null, _this._isSyncing, this);\n                            }\n\n                            setTimeout(function () {\n                                _this.emit('data', output);\n\n                                if (_.isFunction(_this.callback)) {\n                                    _this.callback(null, output, _this);\n                                }\n                            }, 0);\n\n                            // fire sync status\n                        } else {\n                            this.emit('data', output);\n                            if (_.isFunction(_this.callback)) {\n                                this.callback(null, output, this);\n                            }\n\n                            // wait for some time before fireing the FALSE\n                            clearTimeout(this._isSyncingTimeout);\n                            this._isSyncingTimeout = setTimeout(function () {\n                                if(output.currentBlock > output.highestBlock - 200) {\n                                    _this._isSyncing = false;\n                                    _this.emit('changed', _this._isSyncing);\n\n                                    if (_.isFunction(_this.callback)) {\n                                        _this.callback(null, _this._isSyncing, _this);\n                                    }\n                                }\n                            }, 500);\n                        }\n                    }\n                }\n            }\n        })\n    ];\n\n    methods.forEach(function(method) {\n        method.attachToObject(_this);\n        method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)\n        method.defaultBlock = _this.defaultBlock;\n        method.defaultAccount = _this.defaultAccount;\n        method.transactionBlockTimeout = _this.transactionBlockTimeout;\n        method.transactionConfirmationBlocks = _this.transactionConfirmationBlocks;\n        method.transactionPollingTimeout = _this.transactionPollingTimeout;\n    });\n\n};\n\ncore.addProviders(Eth);\n\n\nmodule.exports = Eth;\n\n","module.exports = require(\"web3-core-subscriptions\");","module.exports = require(\"web3-eth-ens\");","module.exports = require(\"web3-eth-contract\");","module.exports = require(\"web3-eth-iban\");","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file accounts.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n'use strict';\n\nvar _ = require('underscore');\nvar core = require('web3-core');\nvar Method = require('web3-core-method');\nvar Promise = require('any-promise');\nvar Account = require('eth-lib/lib/account');\nvar Hash = require('eth-lib/lib/hash');\nvar RLP = require('eth-lib/lib/rlp');// jshint ignore:line\nvar Bytes = require('eth-lib/lib/bytes');// jshint ignore:line\nvar cryp = (typeof global === 'undefined') ? require('crypto-browserify') : require('crypto');\nvar scrypt = require('@web3-js/scrypt-shim');\nvar uuid = require('uuid');\nvar utils = require('web3-utils');\nvar helpers = require('web3-core-helpers');\nvar Transaction = require('ethereumjs-tx').Transaction;\nvar Common = require('ethereumjs-common').default;\n\n\nvar isNot = function(value) {\n    return (_.isUndefined(value) || _.isNull(value));\n};\n\nvar Accounts = function Accounts() {\n    var _this = this;\n\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n\n    // remove unecessary core functions\n    delete this.BatchRequest;\n    delete this.extend;\n\n    var _ethereumCall = [\n        new Method({\n            name: 'getNetworkId',\n            call: 'net_version',\n            params: 0,\n            outputFormatter: parseInt\n        }),\n        new Method({\n            name: 'getChainId',\n            call: 'eth_chainId',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getGasPrice',\n            call: 'eth_gasPrice',\n            params: 0\n        }),\n        new Method({\n            name: 'getTransactionCount',\n            call: 'eth_getTransactionCount',\n            params: 2,\n            inputFormatter: [function(address) {\n                if (utils.isAddress(address)) {\n                    return address;\n                } else {\n                    throw new Error('Address ' + address + ' is not a valid address to get the \"transactionCount\".');\n                }\n            }, function() {\n                return 'latest';\n            }]\n        })\n    ];\n    // attach methods to this._ethereumCall\n    this._ethereumCall = {};\n    _.each(_ethereumCall, function(method) {\n        method.attachToObject(_this._ethereumCall);\n        method.setRequestManager(_this._requestManager);\n    });\n\n\n    this.wallet = new Wallet(this);\n};\n\nAccounts.prototype._addAccountFunctions = function(account) {\n    var _this = this;\n\n    // add sign functions\n    account.signTransaction = function signTransaction(tx, callback) {\n        return _this.signTransaction(tx, account.privateKey, callback);\n    };\n    account.sign = function sign(data) {\n        return _this.sign(data, account.privateKey);\n    };\n\n    account.encrypt = function encrypt(password, options) {\n        return _this.encrypt(account.privateKey, password, options);\n    };\n\n\n    return account;\n};\n\nAccounts.prototype.create = function create(entropy) {\n    return this._addAccountFunctions(Account.create(entropy || utils.randomHex(32)));\n};\n\nAccounts.prototype.privateKeyToAccount = function privateKeyToAccount(privateKey) {\n    return this._addAccountFunctions(Account.fromPrivate(privateKey));\n};\n\nAccounts.prototype.signTransaction = function signTransaction(tx, privateKey, callback) {\n    var _this = this,\n        error = false,\n        transactionOptions = {},\n        result,\n        hasTxSigningOptions = !!(tx && ((tx.chain && tx.hardfork) || tx.common));\n\n    callback = callback || function() {\n    };\n\n    if (!tx) {\n        error = new Error('No transaction object given!');\n\n        callback(error);\n        return Promise.reject(error);\n    }\n\n    function signed(tx) {\n        if (tx.common && (tx.chain && tx.hardfork)) {\n            error = new Error(\n                'Please provide the ethereumjs-common object or the chain and hardfork property but not all together.'\n            );\n        }\n\n        if ((tx.chain && !tx.hardfork) || (tx.hardfork && !tx.chain)) {\n            error = new Error(\n                'When specifying chain and hardfork, both values must be defined. ' +\n                'Received \"chain\": ' + tx.chain + ', \"hardfork\": ' + tx.hardfork\n            );\n        }\n\n        if (!tx.gas && !tx.gasLimit) {\n            error = new Error('\"gas\" is missing');\n        }\n\n        if (tx.nonce < 0 ||\n            tx.gas < 0 ||\n            tx.gasPrice < 0 ||\n            tx.chainId < 0) {\n            error = new Error('Gas, gasPrice, nonce or chainId is lower than 0');\n        }\n\n        if (error) {\n            callback(error);\n            return Promise.reject(error);\n        }\n\n        try {\n            var transaction = helpers.formatters.inputCallFormatter(_.clone(tx));\n            transaction.to = transaction.to || '0x';\n            transaction.data = transaction.data || '0x';\n            transaction.value = transaction.value || '0x';\n            transaction.chainId = utils.numberToHex(transaction.chainId);\n\n            // Because tx has no ethereumjs-tx signing options we use fetched vals.\n            if (!hasTxSigningOptions) {\n                transactionOptions.common = Common.forCustomChain(\n                    'mainnet',\n                    {\n                        name: 'custom-network',\n                        networkId: transaction.networkId,\n                        chainId: transaction.chainId\n                    },\n                    'petersburg'\n                );\n\n                delete transaction.networkId;\n            } else {\n                if (transaction.common) {\n                    transactionOptions.common = Common.forCustomChain(\n                        transaction.common.baseChain || 'mainnet',\n                        {\n                            name: transaction.common.customChain.name || 'custom-network',\n                            networkId: transaction.common.customChain.networkId,\n                            chainId: transaction.common.customChain.chainId\n                        },\n                        transaction.common.hardfork || 'petersburg'\n                    );\n\n                    delete transaction.common;\n                }\n\n                if (transaction.chain) {\n                    transactionOptions.chain = transaction.chain;\n                    delete transaction.chain;\n                }\n\n                if (transaction.hardfork) {\n                    transactionOptions.hardfork = transaction.hardfork;\n                    delete transaction.hardfork;\n                }\n            }\n\n            if (privateKey.startsWith('0x')) {\n                privateKey = privateKey.substring(2);\n            }\n\n            var ethTx = new Transaction(transaction, transactionOptions);\n\n            ethTx.sign(Buffer.from(privateKey, 'hex'));\n\n            var validationResult = ethTx.validate(true);\n\n            if (validationResult !== '') {\n                throw new Error('Signer Error: ' + validationResult);\n            }\n\n            var rlpEncoded = ethTx.serialize().toString('hex');\n            var rawTransaction = '0x' + rlpEncoded;\n            var transactionHash = utils.keccak256(rawTransaction);\n\n            return {\n                messageHash: '0x' + Buffer.from(ethTx.hash(false)).toString('hex'),\n                v: '0x' + Buffer.from(ethTx.v).toString('hex'),\n                r: '0x' + Buffer.from(ethTx.r).toString('hex'),\n                s: '0x' + Buffer.from(ethTx.s).toString('hex'),\n                rawTransaction: rawTransaction,\n                transactionHash: transactionHash\n            };\n\n        } catch (e) {\n            callback(e);\n            return Promise.reject(e);\n        }\n\n        callback(null, result);\n        return result;\n    }\n\n\n    // Resolve immediately if nonce, chainId, price and signing options are provided\n    if (tx.nonce !== undefined && tx.chainId !== undefined && tx.gasPrice !== undefined && hasTxSigningOptions) {\n        return Promise.resolve(signed(tx));\n    }\n\n    // Otherwise, get the missing info from the Ethereum Node\n    return Promise.all([\n        isNot(tx.chainId) ? _this._ethereumCall.getChainId() : tx.chainId,\n        isNot(tx.gasPrice) ? _this._ethereumCall.getGasPrice() : tx.gasPrice,\n        isNot(tx.nonce) ? _this._ethereumCall.getTransactionCount(_this.privateKeyToAccount(privateKey).address) : tx.nonce,\n        isNot(hasTxSigningOptions) ? _this._ethereumCall.getNetworkId() : 1\n    ]).then(function(args) {\n        if (isNot(args[0]) || isNot(args[1]) || isNot(args[2]) || isNot(args[3])) {\n            throw new Error('One of the values \"chainId\", \"networkId\", \"gasPrice\", or \"nonce\" couldn\\'t be fetched: ' + JSON.stringify(args));\n        }\n        return signed(_.extend(tx, {chainId: args[0], gasPrice: args[1], nonce: args[2], networkId: args[3]}));\n    });\n};\n\n/* jshint ignore:start */\nAccounts.prototype.recoverTransaction = function recoverTransaction(rawTx) {\n    var values = RLP.decode(rawTx);\n    var signature = Account.encodeSignature(values.slice(6, 9));\n    var recovery = Bytes.toNumber(values[6]);\n    var extraData = recovery < 35 ? [] : [Bytes.fromNumber((recovery - 35) >> 1), '0x', '0x'];\n    var signingData = values.slice(0, 6).concat(extraData);\n    var signingDataHex = RLP.encode(signingData);\n    return Account.recover(Hash.keccak256(signingDataHex), signature);\n};\n/* jshint ignore:end */\n\nAccounts.prototype.hashMessage = function hashMessage(data) {\n    var message = utils.isHexStrict(data) ? utils.hexToBytes(data) : data;\n    var messageBuffer = Buffer.from(message);\n    var preamble = '\\x19Ethereum Signed Message:\\n' + message.length;\n    var preambleBuffer = Buffer.from(preamble);\n    var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);\n    return Hash.keccak256s(ethMessage);\n};\n\nAccounts.prototype.sign = function sign(data, privateKey) {\n    var hash = this.hashMessage(data);\n    var signature = Account.sign(hash, privateKey);\n    var vrs = Account.decodeSignature(signature);\n    return {\n        message: data,\n        messageHash: hash,\n        v: vrs[0],\n        r: vrs[1],\n        s: vrs[2],\n        signature: signature\n    };\n};\n\nAccounts.prototype.recover = function recover(message, signature, preFixed) {\n    var args = [].slice.apply(arguments);\n\n\n    if (_.isObject(message)) {\n        return this.recover(message.messageHash, Account.encodeSignature([message.v, message.r, message.s]), true);\n    }\n\n    if (!preFixed) {\n        message = this.hashMessage(message);\n    }\n\n    if (args.length >= 4) {\n        preFixed = args.slice(-1)[0];\n        preFixed = _.isBoolean(preFixed) ? !!preFixed : false;\n\n        return this.recover(message, Account.encodeSignature(args.slice(1, 4)), preFixed); // v, r, s\n    }\n    return Account.recover(message, signature);\n};\n\n// Taken from https://github.com/ethereumjs/ethereumjs-wallet\nAccounts.prototype.decrypt = function(v3Keystore, password, nonStrict) {\n    /* jshint maxcomplexity: 10 */\n\n    if (!_.isString(password)) {\n        throw new Error('No password given.');\n    }\n\n    var json = (_.isObject(v3Keystore)) ? v3Keystore : JSON.parse(nonStrict ? v3Keystore.toLowerCase() : v3Keystore);\n\n    if (json.version !== 3) {\n        throw new Error('Not a valid V3 wallet');\n    }\n\n    var derivedKey;\n    var kdfparams;\n    if (json.crypto.kdf === 'scrypt') {\n        kdfparams = json.crypto.kdfparams;\n\n        // FIXME: support progress reporting callback\n        derivedKey = scrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n    } else if (json.crypto.kdf === 'pbkdf2') {\n        kdfparams = json.crypto.kdfparams;\n\n        if (kdfparams.prf !== 'hmac-sha256') {\n            throw new Error('Unsupported parameters to PBKDF2');\n        }\n\n        derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n    } else {\n        throw new Error('Unsupported key derivation scheme');\n    }\n\n    var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');\n\n    var mac = utils.sha3(Buffer.concat([derivedKey.slice(16, 32), ciphertext])).replace('0x', '');\n    if (mac !== json.crypto.mac) {\n        throw new Error('Key derivation failed - possibly wrong password');\n    }\n\n    var decipher = cryp.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));\n    var seed = '0x' + Buffer.concat([decipher.update(ciphertext), decipher.final()]).toString('hex');\n\n    return this.privateKeyToAccount(seed);\n};\n\nAccounts.prototype.encrypt = function(privateKey, password, options) {\n    /* jshint maxcomplexity: 20 */\n    var account = this.privateKeyToAccount(privateKey);\n\n    options = options || {};\n    var salt = options.salt || cryp.randomBytes(32);\n    var iv = options.iv || cryp.randomBytes(16);\n\n    var derivedKey;\n    var kdf = options.kdf || 'scrypt';\n    var kdfparams = {\n        dklen: options.dklen || 32,\n        salt: salt.toString('hex')\n    };\n\n    if (kdf === 'pbkdf2') {\n        kdfparams.c = options.c || 262144;\n        kdfparams.prf = 'hmac-sha256';\n        derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n    } else if (kdf === 'scrypt') {\n        // FIXME: support progress reporting callback\n        kdfparams.n = options.n || 8192; // 2048 4096 8192 16384\n        kdfparams.r = options.r || 8;\n        kdfparams.p = options.p || 1;\n        derivedKey = scrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n    } else {\n        throw new Error('Unsupported kdf');\n    }\n\n    var cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n    if (!cipher) {\n        throw new Error('Unsupported cipher');\n    }\n\n    var ciphertext = Buffer.concat([cipher.update(Buffer.from(account.privateKey.replace('0x', ''), 'hex')), cipher.final()]);\n\n    var mac = utils.sha3(Buffer.concat([derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex')])).replace('0x', '');\n\n    return {\n        version: 3,\n        id: uuid.v4({random: options.uuid || cryp.randomBytes(16)}),\n        address: account.address.toLowerCase().replace('0x', ''),\n        crypto: {\n            ciphertext: ciphertext.toString('hex'),\n            cipherparams: {\n                iv: iv.toString('hex')\n            },\n            cipher: options.cipher || 'aes-128-ctr',\n            kdf: kdf,\n            kdfparams: kdfparams,\n            mac: mac.toString('hex')\n        }\n    };\n};\n\n\n// Note: this is trying to follow closely the specs on\n// http://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html\n\nfunction Wallet(accounts) {\n    this._accounts = accounts;\n    this.length = 0;\n    this.defaultKeyName = 'web3js_wallet';\n}\n\nWallet.prototype._findSafeIndex = function(pointer) {\n    pointer = pointer || 0;\n    if (_.has(this, pointer)) {\n        return this._findSafeIndex(pointer + 1);\n    } else {\n        return pointer;\n    }\n};\n\nWallet.prototype._currentIndexes = function() {\n    var keys = Object.keys(this);\n    var indexes = keys\n        .map(function(key) {\n            return parseInt(key);\n        })\n        .filter(function(n) {\n            return (n < 9e20);\n        });\n\n    return indexes;\n};\n\nWallet.prototype.create = function(numberOfAccounts, entropy) {\n    for (var i = 0; i < numberOfAccounts; ++i) {\n        this.add(this._accounts.create(entropy).privateKey);\n    }\n    return this;\n};\n\nWallet.prototype.add = function(account) {\n\n    if (_.isString(account)) {\n        account = this._accounts.privateKeyToAccount(account);\n    }\n    if (!this[account.address]) {\n        account = this._accounts.privateKeyToAccount(account.privateKey);\n        account.index = this._findSafeIndex();\n\n        this[account.index] = account;\n        this[account.address] = account;\n        this[account.address.toLowerCase()] = account;\n\n        this.length++;\n\n        return account;\n    } else {\n        return this[account.address];\n    }\n};\n\nWallet.prototype.remove = function(addressOrIndex) {\n    var account = this[addressOrIndex];\n\n    if (account && account.address) {\n        // address\n        this[account.address].privateKey = null;\n        delete this[account.address];\n        // address lowercase\n        this[account.address.toLowerCase()].privateKey = null;\n        delete this[account.address.toLowerCase()];\n        // index\n        this[account.index].privateKey = null;\n        delete this[account.index];\n\n        this.length--;\n\n        return true;\n    } else {\n        return false;\n    }\n};\n\nWallet.prototype.clear = function() {\n    var _this = this;\n    var indexes = this._currentIndexes();\n\n    indexes.forEach(function(index) {\n        _this.remove(index);\n    });\n\n    return this;\n};\n\nWallet.prototype.encrypt = function(password, options) {\n    var _this = this;\n    var indexes = this._currentIndexes();\n\n    var accounts = indexes.map(function(index) {\n        return _this[index].encrypt(password, options);\n    });\n\n    return accounts;\n};\n\n\nWallet.prototype.decrypt = function(encryptedWallet, password) {\n    var _this = this;\n\n    encryptedWallet.forEach(function(keystore) {\n        var account = _this._accounts.decrypt(keystore, password);\n\n        if (account) {\n            _this.add(account);\n        } else {\n            throw new Error('Couldn\\'t decrypt accounts. Password wrong?');\n        }\n    });\n\n    return this;\n};\n\nWallet.prototype.save = function(password, keyName) {\n    localStorage.setItem(keyName || this.defaultKeyName, JSON.stringify(this.encrypt(password)));\n\n    return true;\n};\n\nWallet.prototype.load = function(password, keyName) {\n    var keystore = localStorage.getItem(keyName || this.defaultKeyName);\n\n    if (keystore) {\n        try {\n            keystore = JSON.parse(keystore);\n        } catch (e) {\n\n        }\n    }\n\n    return this.decrypt(keystore || [], password);\n};\n\nif (!storageAvailable('localStorage')) {\n    delete Wallet.prototype.save;\n    delete Wallet.prototype.load;\n}\n\n/**\n * Checks whether a storage type is available or not\n * For more info on how this works, please refer to MDN documentation\n * https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\n *\n * @method storageAvailable\n * @param {String} type the type of storage ('localStorage', 'sessionStorage')\n * @returns {Boolean} a boolean indicating whether the specified storage is available or not\n */\nfunction storageAvailable(type) {\n    var storage;\n    try {\n        storage = window[type];\n        var x = '__storage_test__';\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    } catch (e) {\n        return e && (\n                // everything except Firefox\n            e.code === 22 ||\n            // Firefox\n            e.code === 1014 ||\n            // test name field too, because code might not be present\n            // everything except Firefox\n            e.name === 'QuotaExceededError' ||\n            // Firefox\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n            // acknowledge QuotaExceededError only if there's something already stored\n            (storage && storage.length !== 0);\n    }\n}\n\n\nmodule.exports = Accounts;\n","module.exports = require(\"any-promise\");","module.exports = require(\"eth-lib/lib/account\");","module.exports = require(\"eth-lib/lib/hash\");","module.exports = require(\"eth-lib/lib/rlp\");","module.exports = require(\"eth-lib/lib/bytes\");","module.exports = require(\"crypto-browserify\");","module.exports = require(\"@web3-js/scrypt-shim\");","module.exports = require(\"uuid\");","module.exports = require(\"web3-eth-abi\");","/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file getNetworkType.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar getNetworkType = function (callback) {\n    var _this = this,\n        id;\n\n\n    return this.net.getId()\n        .then(function (givenId) {\n\n            id = givenId;\n\n            return _this.getBlock(0);\n        })\n        .then(function (genesis) {\n            var returnValue = 'private';\n\n            if (genesis.hash === '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3' &&\n                id === 1) {\n                returnValue = 'main';\n            }\n            if (genesis.hash === '0cd786a2425d16f152c658316c423e6ce1181e15c3295826d7c9904cba9ce303' &&\n                id === 2) {\n                returnValue = 'morden';\n            }\n            if (genesis.hash === '0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d' &&\n                id === 3) {\n                returnValue = 'ropsten';\n            }\n            if (genesis.hash === '0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177' &&\n                id === 4) {\n                returnValue = 'rinkeby';\n            }\n            if (genesis.hash === '0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a' &&\n                id === 5) {\n                returnValue = 'goerli';\n            }\n            if (genesis.hash === '0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9' &&\n                id === 42) {\n                returnValue = 'kovan';\n            }\n\n            if (_.isFunction(callback)) {\n                callback(null, returnValue);\n            }\n\n            return returnValue;\n        })\n        .catch(function (err) {\n            if (_.isFunction(callback)) {\n                callback(err);\n            } else {\n                throw err;\n            }\n        });\n};\n\nmodule.exports = getNetworkType;\n","module.exports = require(\"web3-shh\");","module.exports = require(\"web3-bzz\");","module.exports = require(\"eth-sig-util\");","module.exports = {\n  // Mimics crypto.random bytes, but takes in a random number generator\n  // as its second parameter. rng is expected to be a function that takes\n  // no parameters and returns a result like Math.random().\n  // This is important because it allows for a seeded random number generator.\n  // Since this is a mock RPC library, the rng doesn't need to be cryptographically secure.\n  randomBytes: function(length, rng) {\n    var buf = [];\n\n    for (var i = 0; i < length; i++) {\n      buf.push(rng() * 255);\n    }\n\n    return Buffer.from(buf);\n  },\n\n  randomAlphaNumericString: function(length, rng) {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    let text = \"\";\n\n    for (var i = 0; i < length; i++) {\n      text += alphabet.charAt(Math.floor((rng || Math.random)() * alphabet.length));\n    }\n\n    return text;\n  }\n};\n","// this replaces `eth-block-tracker` in the provider-engine, as that block tracker is meant to work with\n// an external provider instance\n\nconst EventEmitter = require(\"events\");\nvar blockHelper = require(\"./utils/block_helper\");\n\nfunction GanacheBlockTracker(opts) {\n  opts = opts || {};\n  EventEmitter.apply(this);\n  if (!opts.blockchain) {\n    throw new Error(\"RpcBlockTracker - no blockchain specified.\");\n  }\n  if (!opts.blockchain.on) {\n    throw new Error(\"RpcBlockTracker - blockchain is not an EventEmitter.\");\n  }\n  this._blockchain = opts.blockchain;\n  this.start = this.start.bind(this);\n  this.stop = this.stop.bind(this);\n  this.getTrackingBlock = this.getTrackingBlock.bind(this);\n  this.awaitCurrentBlock = this.awaitCurrentBlock.bind(this);\n  this._setCurrentBlock = this._setCurrentBlock.bind(this);\n}\n\nGanacheBlockTracker.prototype = Object.create(EventEmitter.prototype);\nGanacheBlockTracker.prototype.constructor = GanacheBlockTracker;\n\nGanacheBlockTracker.prototype.getTrackingBlock = function() {\n  return this._currentBlock;\n};\n\nGanacheBlockTracker.prototype.getCurrentBlock = function() {\n  return this._currentBlock;\n};\n\nGanacheBlockTracker.prototype.awaitCurrentBlock = function() {\n  const self = this;\n  // return if available\n  if (this._currentBlock) {\n    return this._currentBlock;\n  }\n  // wait for \"sync\" event\n  return new Promise((resolve) => this.once(\"block\", resolve)).then(() => self._currentBlock);\n};\n\nGanacheBlockTracker.prototype.start = function(opts = {}) {\n  this._blockchain.on(\"block\", this._setCurrentBlock);\n  return Promise.resolve();\n};\n\nGanacheBlockTracker.prototype.stop = function() {\n  this._isRunning = false;\n  this._blockchain.removeListener(\"block\", this._setCurrentBlock);\n};\n\n//\n// private\n//\n\nGanacheBlockTracker.prototype._setCurrentBlock = function(newBlock) {\n  let block = blockHelper.toJSON(newBlock, true);\n  if (this._currentBlock && this._currentBlock.hash === block.hash) {\n    return;\n  }\n  const oldBlock = this._currentBlock;\n  this._currentBlock = block;\n  this.emit(\"latest\", block);\n  this.emit(\"sync\", { block, oldBlock });\n  this.emit(\"block\", block);\n};\n\nmodule.exports = GanacheBlockTracker;\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nvar Provider = require(\"./provider\");\nvar webSocketServer = require(\"./webSocketServer\");\nvar httpServer = require(\"./httpServer\");\nvar _ = require(\"lodash\");\n\nmodule.exports = {\n  create: function(options) {\n    options = _applyDefaultOptions(options || {});\n\n    var logger = options.logger;\n    var provider = new Provider(options);\n\n    var server = httpServer(provider, logger);\n    server.keepAliveTimeout = options.keepAliveTimeout;\n\n    let connectionCounter = 0;\n    const connections = {};\n    server.on(\"connection\", (conn) => {\n      let key = connectionCounter++;\n      connections[key] = conn;\n      conn.on(\"close\", () => delete connections[key]);\n    });\n\n    var oldListen = server.listen;\n\n    server.listen = function() {\n      var args = Array.prototype.slice.call(arguments);\n      var callback = function() {};\n      if (args.length > 0) {\n        var last = args[args.length - 1];\n        if (typeof last === \"function\") {\n          callback = args.pop();\n        }\n      }\n\n      var intermediary = function(err) {\n        if (err) {\n          return callback(err);\n        }\n        server.provider.manager.waitForInitialization(callback);\n      };\n\n      args.push(intermediary);\n\n      oldListen.apply(server, args);\n    };\n\n    server.provider = provider;\n\n    if (options.ws) {\n      webSocketServer(server, provider, logger);\n    }\n\n    var oldClose = server.close;\n\n    server.close = function(callback) {\n      var args = Array.prototype.slice.call(arguments);\n      oldClose.apply(server, args);\n\n      server.provider.close(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        Object.keys(connections).forEach((key) => {\n          try {\n            connections[key].destroy();\n          } catch (error) {}\n        });\n      });\n    };\n\n    return server;\n  }\n};\n\nconst defaultOptions = {\n  logger: {\n    log: function() {}\n  },\n  ws: true,\n  keepAliveTimeout: 5000\n};\n\nvar _applyDefaultOptions = function(options) {\n  return _.merge({}, defaultOptions, options);\n};\n","var websocket = require(\"websocket\");\nvar WebSocketServer = websocket.server;\n\nmodule.exports = function(httpServer, provider, logger) {\n  var connectionManager = new ConnectionManager(provider, logger);\n\n  var wsServer = new WebSocketServer({\n    httpServer: httpServer,\n    autoAcceptConnections: true\n  });\n\n  wsServer.on(\"connect\", connectionManager.manageConnection);\n\n  return wsServer;\n};\n\nfunction ConnectionManager(provider, logger) {\n  const self = this;\n  self.provider = provider;\n  self.logger = logger;\n  self.connectionsBySubscriptionId = {};\n  self.connections = {};\n  self.connectionCounter = 0;\n\n  self._updateSubscriptions = self._updateSubscriptions.bind(self);\n  self.manageConnection = self.manageConnection.bind(self);\n  self._logPayload = self._logPayload.bind(self);\n  self._handleRequest = self._handleRequest.bind(self);\n\n  provider.on(\"data\", function(err, notification) {\n    if (err) {\n      return;\n    }\n    self._updateSubscriptions(notification);\n  });\n}\n\nConnectionManager.prototype.manageConnection = function(connection) {\n  const self = this;\n  connection.id = ++self.connectionCounter;\n  self.connections[connection.id] = {\n    connection: connection,\n    subscriptions: {}\n  };\n\n  connection.on(\"message\", function(message) {\n    let payload;\n    try {\n      if (message.type === \"utf8\") {\n        payload = JSON.parse(message.utf8Data);\n      } else if (message.type === \"binary\") {\n        payload = JSON.parse(message.binaryData.toString(\"utf8\").trim());\n      } else {\n        throw new Error(\"Invalid message type\");\n      }\n    } catch (e) {\n      connection.close(websocket.connection.CLOSE_REASON_UNPROCESSABLE_INPUT, e.message);\n      return;\n    }\n\n    self._logPayload(payload);\n    self._handleRequest(connection, payload);\n  });\n\n  connection.on(\"close\", function() {\n    // remove subscriptions\n    Object.keys(self.connections[connection.id].subscriptions).forEach((subscriptionId) => {\n      self.provider.send(\n        {\n          jsonrpc: \"2.0\",\n          method: \"eth_unsubscribe\",\n          params: [subscriptionId],\n          id: new Date().getTime()\n        },\n        function(err, result) {\n          if (err) {\n            return;\n          }\n          delete self.connectionsBySubscriptionId[subscriptionId];\n        }\n      );\n    });\n\n    delete self.connections[connection.id];\n  });\n};\n\nConnectionManager.prototype._handleRequest = function(connection, payload) {\n  const self = this;\n\n  // handle subscription requests, otherwise delegate to provider\n  switch (payload.method) {\n    case \"eth_subscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (!err && result.result && self.connections[connection.id]) {\n          self.connections[connection.id].subscriptions[result.result] = true;\n          self.connectionsBySubscriptionId[result.result] = self.connections[connection.id];\n        }\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    case \"eth_unsubscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (err || result.error) {\n          if (connection && connection.send) {\n            connection.send(JSON.stringify(result));\n          }\n          return;\n        }\n\n        if (self.connections[connection.id]) {\n          delete self.connections[connection.id].subscriptions[payload.params[0]];\n        }\n        delete self.connectionsBySubscriptionId[payload.params[0]];\n\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    default:\n      self.provider.send(payload, function(_, result) {\n        connection.send(JSON.stringify(result));\n      });\n  }\n};\n\n// Log messages that come into the TestRPC via http\nConnectionManager.prototype._logPayload = function(payload) {\n  const self = this;\n  if (payload instanceof Array) {\n    // Batch request\n    for (var i = 0; i < payload.length; i++) {\n      var item = payload[i];\n      self.logger.log(item.method);\n    }\n  } else {\n    self.logger.log(payload.method);\n  }\n};\n\nConnectionManager.prototype._updateSubscriptions = function(notification) {\n  const subscription = this.connectionsBySubscriptionId[notification.params.subscription];\n  // Safety check for subscription/connection.\n  if (subscription) {\n    subscription.connection.send(JSON.stringify(notification));\n  }\n};\n","module.exports = require(\"websocket\");","const http = require(\"http\");\nconst { rpcError } = require(\"./utils/to\");\n\nfunction createCORSResponseHeaders(method, requestHeaders) {\n  // https://fetch.spec.whatwg.org/#http-requests\n  const headers = {};\n  let isCORSRequest = requestHeaders.hasOwnProperty(\"origin\");\n  if (isCORSRequest) {\n    // OPTIONS preflight requests need a little extra treatment\n    if (method === \"OPTIONS\") {\n      // we only allow POST requests, so it doesn't matter which method the request is asking for\n      headers[\"Access-Control-Allow-Methods\"] = \"POST\";\n      // echo all requested access-control-request-headers back to the response\n      if (requestHeaders.hasOwnProperty(\"access-control-request-headers\")) {\n        headers[\"Access-Control-Allow-Headers\"] = requestHeaders[\"access-control-request-headers\"];\n      }\n      // Safari needs Content-Length = 0 for a 204 response otherwise it hangs forever\n      // https://github.com/expressjs/cors/pull/121#issue-130260174\n      headers[\"Content-Length\"] = 0;\n\n      // Make browsers and compliant clients cache the OPTIONS preflight response for 10\n      // minutes (this is the maximum time Chromium allows)\n      headers[\"Access-Control-Max-Age\"] = 600; // seconds\n    }\n\n    // From the spec: https://fetch.spec.whatwg.org/#http-responses\n    // \"For a CORS-preflight request, request’s credentials mode is always \"omit\",\n    // but for any subsequent CORS requests it might not be. Support therefore\n    // needs to be indicated as part of the HTTP response to the CORS-preflight request as well.\", so this\n    // header is added to all requests.\n    // Additionally, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials,\n    // states that there aren't any HTTP Request headers that indicate you whether or not Request.withCredentials\n    // is set. Because web3@1.0.0-beta.35-? always sets `request.withCredentials = true` while Safari requires it be\n    // returned even when no credentials are set in the browser this header must always be return on all requests.\n    // (I've found that Chrome and Firefox don't actually require the header when credentials aren't set)\n    //  Regression Commit: https://github.com/ethereum/web3.js/pull/1722\n    //  Open Web3 Issue: https://github.com/ethereum/web3.js/issues/1802\n    headers[\"Access-Control-Allow-Credentials\"] = true;\n\n    // From the spec: \"It cannot be reliably identified as participating in the CORS protocol\n    // as the `Origin` header is also included for all requests whose method is neither\n    // `GET` nor `HEAD`.\"\n    // Explicitly set the origin instead of using *, since credentials\n    // can't be used in conjunction with *. This will always be set\n    /// for valid preflight requests.\n    headers[\"Access-Control-Allow-Origin\"] = requestHeaders.origin;\n  }\n  return headers;\n}\n\nfunction sendResponse(response, statusCode, headers, data) {\n  response.writeHead(statusCode, headers);\n  response.end(data);\n}\n\nmodule.exports = function(provider, logger) {\n  var server = http.createServer(function(request, response) {\n    var method = request.method;\n    var body = [];\n\n    request\n      .on(\"data\", function(chunk) {\n        body.push(chunk);\n      })\n      .on(\"end\", function() {\n        body = Buffer.concat(body).toString();\n        // At this point, we have the headers, method, url and body, and can now\n        // do whatever we need to in order to respond to this request.\n\n        const headers = createCORSResponseHeaders(method, request.headers);\n\n        switch (method) {\n          case \"POST\":\n            var payload;\n            try {\n              payload = JSON.parse(body);\n            } catch (e) {\n              headers[\"Content-Type\"] = \"text/plain\";\n              sendResponse(response, 400, headers, \"400 Bad Request\");\n              return;\n            }\n\n            // Log messages that come into the TestRPC via http\n            if (payload instanceof Array) {\n              // Batch request\n              for (var i = 0; i < payload.length; i++) {\n                var item = payload[i];\n                logger.log(item.method);\n              }\n            } else {\n              logger.log(payload.method);\n            }\n\n            // http connections do not support subscriptions\n            if (payload.method === \"eth_subscribe\" || payload.method === \"eth_unsubscribe\") {\n              headers[\"Content-Type\"] = \"application/json\";\n              sendResponse(response, 400, headers, rpcError(payload.id, -32000, \"notifications not supported\"));\n              break;\n            }\n\n            provider.send(payload, function(_, result) {\n              headers[\"Content-Type\"] = \"application/json\";\n              sendResponse(response, 200, headers, JSON.stringify(result));\n            });\n\n            break;\n          case \"OPTIONS\":\n            sendResponse(response, 204, headers);\n            break;\n          default:\n            headers[\"Content-Type\"] = \"text/plain\";\n            sendResponse(response, 400, headers, \"400 Bad Request\");\n            break;\n        }\n      });\n  });\n\n  server.ganacheProvider = provider;\n  return server;\n};\n","module.exports = require(\"http\");"],"sourceRoot":""}